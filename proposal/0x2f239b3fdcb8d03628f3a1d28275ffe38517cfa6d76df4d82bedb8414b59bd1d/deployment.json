{
  "networkConfigs": [
    {
      "safeAddress": "0x040f331774Ed6BB161412B4cEDb1358B382aF3A5",
      "moduleAddress": "0x3D75d338B4711F8a33d293a2008f07a712513402",
      "safeInitData": "0xb63e800d00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000a238cbeb142c10ef7ad8442c6d1f9e89e07e776100000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000f48f2b2d2a534e402487b3ee7c18c33aec0fe5e4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000e3993566b34e5367d1c602439997bd08c11ff70000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec00000000000000000000000052386be2397e8eac26298f733b390684203fb58000000000000000000000000053405fb4d71591e33fe07bfbc90bd82e65720ad00000000000000000000000009f33a4809aa708d7a399fedba514e0a0d15efa8500000000000000000000000000000000000000000000000000000000000001448d80ff0a000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000f2008f3301c9eada5642b5bb12fd047d3ebb2932e619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000248236d0b80000000000000000000000000000000000000000000000000000000000000000018f3301c9eada5642b5bb12fd047d3ebb2932e6190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002411ea37fc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "nonce": "8",
      "chainId": "42161",
      "blockGasLimit": "1125899906842624",
      "blockNumber": "328991874",
      "newConfig": {
        "projectName": "RING-DAO",
        "orgId": "cluanacaw000111jik4xs4wkl",
        "owners": [
          "0x00E3993566b34e5367d1C602439997BD08c11FF7",
          "0x0f14341A7f464320319025540E8Fe48Ad0fe5aec",
          "0x52386BE2397e8EAc26298F733b390684203fB580",
          "0x53405FB4d71591E33fe07bFbC90bD82E65720ad0",
          "0x9F33a4809aA708d7a399fedBa514e0A0d15EfA85"
        ],
        "mainnets": [
          "arbitrum",
          "blast",
          "crab",
          "darwinia",
          "ethereum",
          "polygon",
          "moonbeam",
          "morph"
        ],
        "testnets": [
          "sepolia",
          "arbitrum_sepolia"
        ],
        "threshold": "3",
        "saltNonce": "0"
      },
      "executionMode": 2,
      "initialState": {
        "isExecuting": false,
        "isModuleDeployed": true,
        "isSafeDeployed": true
      },
      "isSystemDeployed": true,
      "actionInputs": [
        {
          "actionType": 1,
          "create2Address": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD",
          "initCodeWithArgs": "0x60806040523480156200001157600080fd5b5060405162001ec738038062001ec78339810160408190526200003491620002e5565b62000049826001600160401b03831662000051565b505062000409565b600254156200008f5760405162461bcd60e51b8152602060048201526005602482015264047533230360dc1b60448201526064015b60405180910390fd5b8151811115620000ca5760405162461bcd60e51b8152602060048201526005602482015264475332303160d81b604482015260640162000086565b6001811015620001055760405162461bcd60e51b815260206004820152600560248201526423a999181960d91b604482015260640162000086565b600160005b8351811015620002645760008482815181106200012b576200012b620003cb565b6020026020010151905060006001600160a01b0316816001600160a01b0316141580156200016357506001600160a01b038116600114155b80156200017957506001600160a01b0381163014155b8015620001985750806001600160a01b0316836001600160a01b031614155b620001ce5760405162461bcd60e51b8152602060048201526005602482015264475332303360d81b604482015260640162000086565b6001600160a01b038181166000908152602081905260409020541615620002205760405162461bcd60e51b815260206004820152600560248201526411d4cc8c0d60da1b604482015260640162000086565b6001600160a01b03928316600090815260208190526040902080546001600160a01b03191693821693909317909255806200025b81620003e1565b9150506200010a565b506001600160a01b0316600090815260208190526040902080546001600160a01b03191660019081179091559151909155600255565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002c857600080fd5b919050565b80516001600160401b0381168114620002c857600080fd5b60008060408385031215620002f957600080fd5b82516001600160401b03808211156200031157600080fd5b818501915085601f8301126200032657600080fd5b81516020828211156200033d576200033d6200029a565b8160051b604051601f19603f830116810181811086821117156200036557620003656200029a565b6040529283528183019350848101820192898411156200038457600080fd5b948201945b83861015620003ad576200039d86620002b0565b8552948201949382019362000389565b9650620003be9050878201620002cd565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200040257634e487b7160e01b600052601160045260246000fd5b5060010190565b611aae80620004196000396000f3fe6080604052600436106100b55760003560e01c8063a0e67e2b11610069578063e318b52b1161004e578063e318b52b146101bd578063e75235b8146101dd578063f8dc5dd9146101fb57600080fd5b8063a0e67e2b1461017b578063c7a823e01461019d57600080fd5b80632f54bf6e1161009a5780632f54bf6e1461010b578063694e80c31461012b578063935f9ade1461014b57600080fd5b80630589105b146100c15780630d582f13146100e957600080fd5b366100bc57005b600080fd5b6100d46100cf3660046115a1565b61021b565b60405190151581526020015b60405180910390f35b3480156100f557600080fd5b506101096101043660046116bf565b61036b565b005b34801561011757600080fd5b506100d46101263660046116e9565b6105c2565b34801561013757600080fd5b5061010961014636600461170b565b610617565b34801561015757600080fd5b506100d461016636600461170b565b60036020526000908152604090205460ff1681565b34801561018757600080fd5b50610190610731565b6040516100e09190611724565b3480156101a957600080fd5b506101096101b836600461177e565b610848565b3480156101c957600080fd5b506101096101d83660046117ca565b610a80565b3480156101e957600080fd5b506002546040519081526020016100e0565b34801561020757600080fd5b5061010961021636600461180d565b610e0a565b6000804630898989896040516020016102399695949392919061186d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602082012090915061027d8782878761109b565b8873ffffffffffffffffffffffffffffffffffffffff1688876040516102a391906118fb565b60006040518083038185875af1925050503d80600081146102e0576040519150601f19603f3d011682016040523d82523d6000602084013e6102e5565b606091505b50506000828152600360205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555190935081907f0457ea5bc67881c59a30a626040dbff6e109920907a75dc61f3465475530336e9061035790861515815260200190565b60405180910390a250509695505050505050565b61037361118e565b73ffffffffffffffffffffffffffffffffffffffff8216158015906103af575073ffffffffffffffffffffffffffffffffffffffff8216600114155b80156103d1575073ffffffffffffffffffffffffffffffffffffffff82163014155b61043c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f475332303300000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82811660009081526020819052604090205416156104cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610433565b600060208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d805473ffffffffffffffffffffffffffffffffffffffff858116808552604085208054929093167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556001808552835490911690911790915580549161055e83611946565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a180600254146105be576105be81610617565b5050565b600073ffffffffffffffffffffffffffffffffffffffff8216600114801590610611575073ffffffffffffffffffffffffffffffffffffffff8281166000908152602081905260409020541615155b92915050565b61061f61118e565b60015481111561068b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610433565b60018110156106f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230320000000000000000000000000000000000000000000000000000006044820152606401610433565b60028190556040518181527f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c939060200160405180910390a150565b6060600060015467ffffffffffffffff81111561075057610750611530565b604051908082528060200260200182016040528015610779578160200160208202803683370190505b506001600090815260208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d549192509073ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff811660011461084057808383815181106107f4576107f461197e565b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201810191909152918116600090815291829052604090912054168161083881611946565b9250506107c3565b509092915050565b6002546108569060416119ad565b81146108be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606401610433565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c849052603c812090805b600254811015610a7857366000868661090a8560416119ad565b906109168660016119c4565b6109219060416119ad565b9261092e939291906119d7565b9150915060006109748684848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111f992505050565b90508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161180156109d7575073ffffffffffffffffffffffffffffffffffffffff8181166000908152602081905260409020541615155b80156109fa575073ffffffffffffffffffffffffffffffffffffffff8116600114155b610a60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610433565b9350829150610a70905081611946565b9150506108f0565b505050505050565b610a8861118e565b73ffffffffffffffffffffffffffffffffffffffff811615801590610ac4575073ffffffffffffffffffffffffffffffffffffffff8116600114155b8015610ae6575073ffffffffffffffffffffffffffffffffffffffff81163014155b610b4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff8181166000908152602081905260409020541615610bdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff821615801590610c17575073ffffffffffffffffffffffffffffffffffffffff8216600114155b610c7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260208190526040902054811690831614610d10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208181526040808320805487871680865283862080549289167fffffffffffffffffffffffff0000000000000000000000000000000000000000938416179055968a1685528285208054821690971790965592849052825490941690915591519081527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf910160405180910390a160405173ffffffffffffffffffffffffffffffffffffffff821681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a1505050565b610e1261118e565b8060018054610e219190611a01565b1015610e89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff821615801590610ec5575073ffffffffffffffffffffffffffffffffffffffff8216600114155b610f2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260208190526040902054811690831614610fbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208190526040808220805488861684529183208054929095167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179094559181528254909116909155600180549161103683611a14565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf9060200160405180910390a180600254146110965761109681610617565b505050565b834210611104576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6f7065726174696f6e20657870697265640000000000000000000000000000006044820152606401610433565b60008381526003602052604090205460ff161561117d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6861736820616c726561647920757365640000000000000000000000000000006044820152606401610433565b611188838383610848565b50505050565b3330146111f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533033310000000000000000000000000000000000000000000000000000006044820152606401610433565b565b6000806000611208858561121d565b9150915061121581611262565b509392505050565b60008082516041036112535760208301516040840151606085015160001a61124787828585611418565b9450945050505061125b565b506000905060025b9250929050565b600081600481111561127657611276611a49565b0361127e5750565b600181600481111561129257611292611a49565b036112f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610433565b600281600481111561130d5761130d611a49565b03611374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610433565b600381600481111561138857611388611a49565b03611415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610433565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561144f57506000905060036114fe565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156114a3573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166114f7576000600192509250506114fe565b9150600090505b94509492505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461152b57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083601f84011261157157600080fd5b50813567ffffffffffffffff81111561158957600080fd5b60208301915083602082850101111561125b57600080fd5b60008060008060008060a087890312156115ba57600080fd5b6115c387611507565b95506020870135945060408701359350606087013567ffffffffffffffff808211156115ee57600080fd5b818901915089601f83011261160257600080fd5b81358181111561161457611614611530565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561165a5761165a611530565b816040528281528c602084870101111561167357600080fd5b8260208601602083013760006020848301015280975050505060808901359150808211156116a057600080fd5b506116ad89828a0161155f565b979a9699509497509295939492505050565b600080604083850312156116d257600080fd5b6116db83611507565b946020939093013593505050565b6000602082840312156116fb57600080fd5b61170482611507565b9392505050565b60006020828403121561171d57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561177257835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611740565b50909695505050505050565b60008060006040848603121561179357600080fd5b83359250602084013567ffffffffffffffff8111156117b157600080fd5b6117bd8682870161155f565b9497909650939450505050565b6000806000606084860312156117df57600080fd5b6117e884611507565b92506117f660208501611507565b915061180460408501611507565b90509250925092565b60008060006060848603121561182257600080fd5b61182b84611507565b925061183960208501611507565b9150604084013590509250925092565b60005b8381101561186457818101518382015260200161184c565b50506000910152565b868152600073ffffffffffffffffffffffffffffffffffffffff808816602084015280871660408401525084606083015283608083015260c060a083015282518060c08401526118c48160e0850160208701611849565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160e001979650505050505050565b6000825161190d818460208701611849565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361197757611977611917565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808202811582820484141761061157610611611917565b8082018082111561061157610611611917565b600080858511156119e757600080fd5b838611156119f457600080fd5b5050820193919092039150565b8181038181111561061157610611611917565b600081611a2357611a23611917565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220f324b0700dbbbeaf57c064d165aa16d47fc4f52aac1b0e1017b0f81c78d579af64736f6c634300081100330000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000050000000000000000000000001989d93ec04037ca64e2af7e48ff5c8fc2cea7b80000000000000000000000009f33a4809aa708d7a399fedba514e0a0d15efa85000000000000000000000000b9a0cadd13c5d534b034d878b2fca9e5a6e1e3a4000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d000000000000000000000000fa5727be643dba6599fc7f812fe60da3264a8205",
          "contracts": [
            {
              "address": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD",
              "initCodeWithArgs": "",
              "fullyQualifiedName": "lib/subapi/src/SubAPIMultiSig.sol:SubAPIMultiSig"
            }
          ],
          "index": "1",
          "decodedAction": {
            "referenceName": "SubAPIMultiSig",
            "functionName": "deploy",
            "variables": {
              "signers": [
                "0x1989D93Ec04037cA64e2af7e48FF5C8Fc2cEA7B8",
                "0x9F33a4809aA708d7a399fedBa514e0A0d15EfA85",
                "0xB9a0CaDD13C5d534b034d878b2fcA9E5a6e1e3A4",
                "0xc1A3FEE4132e9285f41F5389570fD9Fbbcb10a1D",
                "0xFa5727bE643dba6599fC7F812fE60dA3264A8205"
              ],
              "threshold": "3"
            },
            "address": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD",
            "value": "0"
          },
          "gas": "2075101",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
          "txData": "0x000000000000000000000000000000000000000000000000000000000000000160806040523480156200001157600080fd5b5060405162001ec738038062001ec78339810160408190526200003491620002e5565b62000049826001600160401b03831662000051565b505062000409565b600254156200008f5760405162461bcd60e51b8152602060048201526005602482015264047533230360dc1b60448201526064015b60405180910390fd5b8151811115620000ca5760405162461bcd60e51b8152602060048201526005602482015264475332303160d81b604482015260640162000086565b6001811015620001055760405162461bcd60e51b815260206004820152600560248201526423a999181960d91b604482015260640162000086565b600160005b8351811015620002645760008482815181106200012b576200012b620003cb565b6020026020010151905060006001600160a01b0316816001600160a01b0316141580156200016357506001600160a01b038116600114155b80156200017957506001600160a01b0381163014155b8015620001985750806001600160a01b0316836001600160a01b031614155b620001ce5760405162461bcd60e51b8152602060048201526005602482015264475332303360d81b604482015260640162000086565b6001600160a01b038181166000908152602081905260409020541615620002205760405162461bcd60e51b815260206004820152600560248201526411d4cc8c0d60da1b604482015260640162000086565b6001600160a01b03928316600090815260208190526040902080546001600160a01b03191693821693909317909255806200025b81620003e1565b9150506200010a565b506001600160a01b0316600090815260208190526040902080546001600160a01b03191660019081179091559151909155600255565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002c857600080fd5b919050565b80516001600160401b0381168114620002c857600080fd5b60008060408385031215620002f957600080fd5b82516001600160401b03808211156200031157600080fd5b818501915085601f8301126200032657600080fd5b81516020828211156200033d576200033d6200029a565b8160051b604051601f19603f830116810181811086821117156200036557620003656200029a565b6040529283528183019350848101820192898411156200038457600080fd5b948201945b83861015620003ad576200039d86620002b0565b8552948201949382019362000389565b9650620003be9050878201620002cd565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200040257634e487b7160e01b600052601160045260246000fd5b5060010190565b611aae80620004196000396000f3fe6080604052600436106100b55760003560e01c8063a0e67e2b11610069578063e318b52b1161004e578063e318b52b146101bd578063e75235b8146101dd578063f8dc5dd9146101fb57600080fd5b8063a0e67e2b1461017b578063c7a823e01461019d57600080fd5b80632f54bf6e1161009a5780632f54bf6e1461010b578063694e80c31461012b578063935f9ade1461014b57600080fd5b80630589105b146100c15780630d582f13146100e957600080fd5b366100bc57005b600080fd5b6100d46100cf3660046115a1565b61021b565b60405190151581526020015b60405180910390f35b3480156100f557600080fd5b506101096101043660046116bf565b61036b565b005b34801561011757600080fd5b506100d46101263660046116e9565b6105c2565b34801561013757600080fd5b5061010961014636600461170b565b610617565b34801561015757600080fd5b506100d461016636600461170b565b60036020526000908152604090205460ff1681565b34801561018757600080fd5b50610190610731565b6040516100e09190611724565b3480156101a957600080fd5b506101096101b836600461177e565b610848565b3480156101c957600080fd5b506101096101d83660046117ca565b610a80565b3480156101e957600080fd5b506002546040519081526020016100e0565b34801561020757600080fd5b5061010961021636600461180d565b610e0a565b6000804630898989896040516020016102399695949392919061186d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602082012090915061027d8782878761109b565b8873ffffffffffffffffffffffffffffffffffffffff1688876040516102a391906118fb565b60006040518083038185875af1925050503d80600081146102e0576040519150601f19603f3d011682016040523d82523d6000602084013e6102e5565b606091505b50506000828152600360205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555190935081907f0457ea5bc67881c59a30a626040dbff6e109920907a75dc61f3465475530336e9061035790861515815260200190565b60405180910390a250509695505050505050565b61037361118e565b73ffffffffffffffffffffffffffffffffffffffff8216158015906103af575073ffffffffffffffffffffffffffffffffffffffff8216600114155b80156103d1575073ffffffffffffffffffffffffffffffffffffffff82163014155b61043c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f475332303300000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82811660009081526020819052604090205416156104cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610433565b600060208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d805473ffffffffffffffffffffffffffffffffffffffff858116808552604085208054929093167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556001808552835490911690911790915580549161055e83611946565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a180600254146105be576105be81610617565b5050565b600073ffffffffffffffffffffffffffffffffffffffff8216600114801590610611575073ffffffffffffffffffffffffffffffffffffffff8281166000908152602081905260409020541615155b92915050565b61061f61118e565b60015481111561068b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610433565b60018110156106f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230320000000000000000000000000000000000000000000000000000006044820152606401610433565b60028190556040518181527f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c939060200160405180910390a150565b6060600060015467ffffffffffffffff81111561075057610750611530565b604051908082528060200260200182016040528015610779578160200160208202803683370190505b506001600090815260208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d549192509073ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff811660011461084057808383815181106107f4576107f461197e565b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201810191909152918116600090815291829052604090912054168161083881611946565b9250506107c3565b509092915050565b6002546108569060416119ad565b81146108be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606401610433565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c849052603c812090805b600254811015610a7857366000868661090a8560416119ad565b906109168660016119c4565b6109219060416119ad565b9261092e939291906119d7565b9150915060006109748684848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111f992505050565b90508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161180156109d7575073ffffffffffffffffffffffffffffffffffffffff8181166000908152602081905260409020541615155b80156109fa575073ffffffffffffffffffffffffffffffffffffffff8116600114155b610a60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610433565b9350829150610a70905081611946565b9150506108f0565b505050505050565b610a8861118e565b73ffffffffffffffffffffffffffffffffffffffff811615801590610ac4575073ffffffffffffffffffffffffffffffffffffffff8116600114155b8015610ae6575073ffffffffffffffffffffffffffffffffffffffff81163014155b610b4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff8181166000908152602081905260409020541615610bdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff821615801590610c17575073ffffffffffffffffffffffffffffffffffffffff8216600114155b610c7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260208190526040902054811690831614610d10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208181526040808320805487871680865283862080549289167fffffffffffffffffffffffff0000000000000000000000000000000000000000938416179055968a1685528285208054821690971790965592849052825490941690915591519081527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf910160405180910390a160405173ffffffffffffffffffffffffffffffffffffffff821681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a1505050565b610e1261118e565b8060018054610e219190611a01565b1015610e89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff821615801590610ec5575073ffffffffffffffffffffffffffffffffffffffff8216600114155b610f2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260208190526040902054811690831614610fbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208190526040808220805488861684529183208054929095167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179094559181528254909116909155600180549161103683611a14565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf9060200160405180910390a180600254146110965761109681610617565b505050565b834210611104576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6f7065726174696f6e20657870697265640000000000000000000000000000006044820152606401610433565b60008381526003602052604090205460ff161561117d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6861736820616c726561647920757365640000000000000000000000000000006044820152606401610433565b611188838383610848565b50505050565b3330146111f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533033310000000000000000000000000000000000000000000000000000006044820152606401610433565b565b6000806000611208858561121d565b9150915061121581611262565b509392505050565b60008082516041036112535760208301516040840151606085015160001a61124787828585611418565b9450945050505061125b565b506000905060025b9250929050565b600081600481111561127657611276611a49565b0361127e5750565b600181600481111561129257611292611a49565b036112f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610433565b600281600481111561130d5761130d611a49565b03611374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610433565b600381600481111561138857611388611a49565b03611415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610433565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561144f57506000905060036114fe565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156114a3573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166114f7576000600192509250506114fe565b9150600090505b94509492505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461152b57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083601f84011261157157600080fd5b50813567ffffffffffffffff81111561158957600080fd5b60208301915083602082850101111561125b57600080fd5b60008060008060008060a087890312156115ba57600080fd5b6115c387611507565b95506020870135945060408701359350606087013567ffffffffffffffff808211156115ee57600080fd5b818901915089601f83011261160257600080fd5b81358181111561161457611614611530565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561165a5761165a611530565b816040528281528c602084870101111561167357600080fd5b8260208601602083013760006020848301015280975050505060808901359150808211156116a057600080fd5b506116ad89828a0161155f565b979a9699509497509295939492505050565b600080604083850312156116d257600080fd5b6116db83611507565b946020939093013593505050565b6000602082840312156116fb57600080fd5b61170482611507565b9392505050565b60006020828403121561171d57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561177257835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611740565b50909695505050505050565b60008060006040848603121561179357600080fd5b83359250602084013567ffffffffffffffff8111156117b157600080fd5b6117bd8682870161155f565b9497909650939450505050565b6000806000606084860312156117df57600080fd5b6117e884611507565b92506117f660208501611507565b915061180460408501611507565b90509250925092565b60008060006060848603121561182257600080fd5b61182b84611507565b925061183960208501611507565b9150604084013590509250925092565b60005b8381101561186457818101518382015260200161184c565b50506000910152565b868152600073ffffffffffffffffffffffffffffffffffffffff808816602084015280871660408401525084606083015283608083015260c060a083015282518060c08401526118c48160e0850160208701611849565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160e001979650505050505050565b6000825161190d818460208701611849565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361197757611977611917565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808202811582820484141761061157610611611917565b8082018082111561061157610611611917565b600080858511156119e757600080fd5b838611156119f457600080fd5b5050820193919092039150565b8181038181111561061157610611611917565b600081611a2357611a23611917565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220f324b0700dbbbeaf57c064d165aa16d47fc4f52aac1b0e1017b0f81c78d579af64736f6c634300081100330000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000050000000000000000000000001989d93ec04037ca64e2af7e48ff5c8fc2cea7b80000000000000000000000009f33a4809aa708d7a399fedba514e0a0d15efa85000000000000000000000000b9a0cadd13c5d534b034d878b2fca9e5a6e1e3a4000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d000000000000000000000000fa5727be643dba6599fc7f812fe60da3264a8205"
        },
        {
          "actionType": 1,
          "create2Address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "initCodeWithArgs": "",
          "contracts": [
            {
              "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
              "initCodeWithArgs": "",
              "fullyQualifiedName": "lib/ORMP/src/eco/Oracle.sol:Oracle"
            }
          ],
          "index": "2",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "deploy",
            "variables": {
              "dao": "0x040f331774Ed6BB161412B4cEDb1358B382aF3A5",
              "ormp": "0x13b2211a7cA45Db2808F6dB05557ce5347e3634e"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "1209810",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
          "txData": "0x000000000000000000000000000000000000000000000000000000000000000260a060405234801561001057600080fd5b5060405161113038038061113083398101604081905261002f91610076565b6001600160a01b03908116608052600080546001600160a01b031916929091169190911790556100a9565b80516001600160a01b038116811461007157600080fd5b919050565b6000806040838503121561008957600080fd5b6100928361005a565b91506100a06020840161005a565b90509250929050565b60805161105e6100d2600039600081816102a80152818161046701526104cd015261105e6000f3fe6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063a6f9dae111610059578063a6f9dae1146102ea578063af9e3a361461030a578063b6333d1614610337578063f3fef3a31461036757600080fd5b80638da5cb5b1461024457806391b9b82714610296578063a1dbf432146102ca57600080fd5b806354fd4d50116100bb57806354fd4d5014610162578063651b04a7146101ae578063673448dd146101de57806384cfb6801461022457600080fd5b80630a863e6c146100ed578063506146951461010f57806352f7c9881461014257600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004610b5d565b610387565b005b34801561011b57600080fd5b5061012f61012a366004610b98565b6104c9565b6040519081526020015b60405180910390f35b34801561014e57600080fd5b5061010d61015d366004610bcd565b6105e1565b34801561016e57600080fd5b50604080518082018252600581527f322e312e30000000000000000000000000000000000000000000000000000000602082015290516101399190610c53565b3480156101ba57600080fd5b506101ce6101c9366004610c66565b6106ab565b6040519015158152602001610139565b3480156101ea57600080fd5b506101ce6101f9366004610d06565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b34801561023057600080fd5b5061010d61023f366004610d21565b6106e6565b34801561025057600080fd5b506000546102719073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610139565b3480156102a257600080fd5b506102717f000000000000000000000000000000000000000000000000000000000000000081565b3480156102d657600080fd5b5061012f6102e5366004610d5d565b6107f5565b3480156102f657600080fd5b5061010d610305366004610d06565b610876565b34801561031657600080fd5b5061012f610325366004610d89565b60016020526000908152604090205481565b34801561034357600080fd5b506101ce610352366004610d06565b60026020526000908152604090205460ff1681565b34801561037357600080fd5b5061010d610382366004610da2565b61096c565b60005473ffffffffffffffffffffffffffffffffffffffff16331461040d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e6572000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6040517f5f3abe960000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f00000000000000000000000000000000000000000000000000000000000000001690635f3abe9690608401600060405180830381600087803b1580156104ab57600080fd5b505af11580156104bf573d6000803e3d6000fd5b5050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663559e7230308686866040516020016105449392919092835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b604051602081830303815290604052805190602001206040518363ffffffff1660e01b815260040161059892919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b602060405180830381865afa1580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d99190610dcc565b949350505050565b3360009081526002602052604090205460ff1661065a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21617070726f76650000000000000000000000000000000000000000000000006044820152606401610404565b600082815260016020526040908190208290555182907f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b59061069f9084815260200190565b60405180910390a25050565b60006106be6106b985610ee9565b610b04565b6106dd60408601356106d36020880188610d06565b87602001356104c9565b14949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e657200000000000000000000000000000000000000000000000000006044820152606401610404565b73ffffffffffffffffffffffffffffffffffffffff821660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168515159081179091558251938452908301527fd984ea421ae5d2a473199f85e03998a04a12f54d6f1fa183a955b3df1c0c546d910160405180910390a15050565b60008281526001602052604081205480820361086f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104049060208082526004908201527f2166656500000000000000000000000000000000000000000000000000000000604082015260600190565b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e657200000000000000000000000000000000000000000000000000006044820152606401610404565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3360009081526002602052604090205460ff166109e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21617070726f76650000000000000000000000000000000000000000000000006044820152606401610404565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610a3f576040519150601f19603f3d011682016040523d82523d6000602084013e610a44565b606091505b5050905080610aaf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f21776974686472617700000000000000000000000000000000000000000000006044820152606401610404565b8273ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6583604051610af791815260200190565b60405180910390a2505050565b600081604051602001610b179190610f8b565b604051602081830303815290604052805190602001209050919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b5857600080fd5b919050565b60008060008060808587031215610b7357600080fd5b84359350610b8360208601610b34565b93969395505050506040820135916060013590565b600080600060608486031215610bad57600080fd5b83359250610bbd60208501610b34565b9150604084013590509250925092565b60008060408385031215610be057600080fd5b50508035926020909101359150565b6000815180845260005b81811015610c1557602081850181015186830182015201610bf9565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600061086f6020830184610bef565b600080600060408486031215610c7b57600080fd5b833567ffffffffffffffff80821115610c9357600080fd5b908501906101008288031215610ca857600080fd5b90935060208501359080821115610cbe57600080fd5b818601915086601f830112610cd257600080fd5b813581811115610ce157600080fd5b876020828501011115610cf357600080fd5b6020830194508093505050509250925092565b600060208284031215610d1857600080fd5b61086f82610b34565b60008060408385031215610d3457600080fd5b610d3d83610b34565b915060208301358015158114610d5257600080fd5b809150509250929050565b60008060408385031215610d7057600080fd5b82359150610d8060208401610b34565b90509250929050565b600060208284031215610d9b57600080fd5b5035919050565b60008060408385031215610db557600080fd5b610dbe83610b34565b946020939093013593505050565b600060208284031215610dde57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715610e3857610e38610de5565b60405290565b600082601f830112610e4f57600080fd5b813567ffffffffffffffff80821115610e6a57610e6a610de5565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610eb057610eb0610de5565b81604052838152866020858801011115610ec957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006101008236031215610efc57600080fd5b610f04610e14565b610f0d83610b34565b81526020830135602082015260408301356040820152610f2f60608401610b34565b606082015260808301356080820152610f4a60a08401610b34565b60a082015260c083013560c082015260e083013567ffffffffffffffff811115610f7357600080fd5b610f7f36828601610e3e565b60e08301525092915050565b60208152600073ffffffffffffffffffffffffffffffffffffffff808451166020840152602084015160408401526040840151606084015280606085015116608084015250608083015160a083015260a083015161100160c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015160e083015260e08301516101008081850152506105d9610120840182610bef56fea26469706673582212204e15bd44f524a009ddb10dfab169b887e49170106f13f83c120155f154c3b9bc64736f6c63430008110033000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a500000000000000000000000013b2211a7ca45db2808f6db05557ce5347e3634e"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "3",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setApproved",
            "variables": {
              "operator": "0x040f331774Ed6BB161412B4cEDb1358B382aF3A5",
              "approve": true
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "151304",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x84cfb680000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a50000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "4",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setApproved",
            "variables": {
              "operator": "0x0f14341A7f464320319025540E8Fe48Ad0fe5aec",
              "approve": true
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "151304",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x84cfb6800000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec0000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "5",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setApproved",
            "variables": {
              "operator": "0xc1A3FEE4132e9285f41F5389570fD9Fbbcb10a1D",
              "approve": true
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "151304",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x84cfb680000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d0000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "6",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "changeOwner",
            "variables": {
              "newOwner": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "127326",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0xa6f9dae1000000000000000000000000855275ac7ea4cc4f324915b2eb48839e447e04bd"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "7",
          "decodedAction": {
            "referenceName": "0x114890eB7386F94eae410186F20968bFAf66142a",
            "functionName": "call",
            "variables": [
              "0x84cfb680000000000000000000000000912d7601569cbc2df8a7f0aae50bfd18e8c64d050000000000000000000000000000000000000000000000000000000000000000"
            ],
            "address": "",
            "value": "0"
          },
          "gas": "133766",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x114890eB7386F94eae410186F20968bFAf66142a",
          "txData": "0x84cfb680000000000000000000000000912d7601569cbc2df8a7f0aae50bfd18e8c64d050000000000000000000000000000000000000000000000000000000000000000"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "8",
          "decodedAction": {
            "referenceName": "0x114890eB7386F94eae410186F20968bFAf66142a",
            "functionName": "call",
            "variables": [
              "0x84cfb68000000000000000000000000040c168503b9758540e18a79907f3fd8678c13f030000000000000000000000000000000000000000000000000000000000000001"
            ],
            "address": "",
            "value": "0"
          },
          "gas": "151286",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x114890eB7386F94eae410186F20968bFAf66142a",
          "txData": "0x84cfb68000000000000000000000000040c168503b9758540e18a79907f3fd8678c13f030000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "9",
          "decodedAction": {
            "referenceName": "0x13b2211a7cA45Db2808F6dB05557ce5347e3634e",
            "functionName": "call",
            "variables": [
              "0x4ea59979000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a"
            ],
            "address": "",
            "value": "0"
          },
          "gas": "134085",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x13b2211a7cA45Db2808F6dB05557ce5347e3634e",
          "txData": "0x4ea59979000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "10",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setFee",
            "variables": {
              "chainId": "81457",
              "fee_": "40000000000000"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "151210",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x52f7c9880000000000000000000000000000000000000000000000000000000000013e310000000000000000000000000000000000000000000000000000246139ca8000"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "11",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setFee",
            "variables": {
              "chainId": "46",
              "fee_": "2000000000000"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "151210",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x52f7c988000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000001d1a94a2000"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "12",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setFee",
            "variables": {
              "chainId": "1",
              "fee_": "2000000000000000"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "151210",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x52f7c988000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000071afd498d0000"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "13",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setFee",
            "variables": {
              "chainId": "2818",
              "fee_": "40000000000000"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "151210",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x52f7c9880000000000000000000000000000000000000000000000000000000000000b020000000000000000000000000000000000000000000000000000246139ca8000"
        }
      ],
      "unlabeledContracts": [],
      "arbitraryChain": false,
      "executorAddress": "0x7e16116661CA8d66C73612382833153911Fa03B1",
      "libraries": [],
      "gitCommit": "ec364d8a31f07d39a8f27b71bc4037675954fddd",
      "safeFundingRequest": {
        "fundsRequested": "0",
        "startingBalance": "0"
      }
    },
    {
      "safeAddress": "0x040f331774Ed6BB161412B4cEDb1358B382aF3A5",
      "moduleAddress": "0x3D75d338B4711F8a33d293a2008f07a712513402",
      "safeInitData": "0xb63e800d00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000a238cbeb142c10ef7ad8442c6d1f9e89e07e776100000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000f48f2b2d2a534e402487b3ee7c18c33aec0fe5e4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000e3993566b34e5367d1c602439997bd08c11ff70000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec00000000000000000000000052386be2397e8eac26298f733b390684203fb58000000000000000000000000053405fb4d71591e33fe07bfbc90bd82e65720ad00000000000000000000000009f33a4809aa708d7a399fedba514e0a0d15efa8500000000000000000000000000000000000000000000000000000000000001448d80ff0a000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000f2008f3301c9eada5642b5bb12fd047d3ebb2932e619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000248236d0b80000000000000000000000000000000000000000000000000000000000000000018f3301c9eada5642b5bb12fd047d3ebb2932e6190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002411ea37fc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "nonce": "6",
      "chainId": "81457",
      "blockGasLimit": "30000000",
      "blockNumber": "18252854",
      "newConfig": {
        "projectName": "RING-DAO",
        "orgId": "cluanacaw000111jik4xs4wkl",
        "owners": [
          "0x00E3993566b34e5367d1C602439997BD08c11FF7",
          "0x0f14341A7f464320319025540E8Fe48Ad0fe5aec",
          "0x52386BE2397e8EAc26298F733b390684203fB580",
          "0x53405FB4d71591E33fe07bFbC90bD82E65720ad0",
          "0x9F33a4809aA708d7a399fedBa514e0A0d15EfA85"
        ],
        "mainnets": [
          "arbitrum",
          "blast",
          "crab",
          "darwinia",
          "ethereum",
          "polygon",
          "moonbeam",
          "morph"
        ],
        "testnets": [
          "sepolia",
          "arbitrum_sepolia"
        ],
        "threshold": "3",
        "saltNonce": "0"
      },
      "executionMode": 2,
      "initialState": {
        "isExecuting": false,
        "isModuleDeployed": true,
        "isSafeDeployed": true
      },
      "isSystemDeployed": true,
      "actionInputs": [
        {
          "actionType": 1,
          "create2Address": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD",
          "initCodeWithArgs": "",
          "contracts": [
            {
              "address": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD",
              "initCodeWithArgs": "",
              "fullyQualifiedName": "lib/subapi/src/SubAPIMultiSig.sol:SubAPIMultiSig"
            }
          ],
          "index": "1",
          "decodedAction": {
            "referenceName": "SubAPIMultiSig",
            "functionName": "deploy",
            "variables": {
              "signers": [
                "0x1989D93Ec04037cA64e2af7e48FF5C8Fc2cEA7B8",
                "0x9F33a4809aA708d7a399fedBa514e0A0d15EfA85",
                "0xB9a0CaDD13C5d534b034d878b2fcA9E5a6e1e3A4",
                "0xc1A3FEE4132e9285f41F5389570fD9Fbbcb10a1D",
                "0xFa5727bE643dba6599fC7F812fE60dA3264A8205"
              ],
              "threshold": "3"
            },
            "address": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD",
            "value": "0"
          },
          "gas": "2072226",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
          "txData": "0x000000000000000000000000000000000000000000000000000000000000000160806040523480156200001157600080fd5b5060405162001ec738038062001ec78339810160408190526200003491620002e5565b62000049826001600160401b03831662000051565b505062000409565b600254156200008f5760405162461bcd60e51b8152602060048201526005602482015264047533230360dc1b60448201526064015b60405180910390fd5b8151811115620000ca5760405162461bcd60e51b8152602060048201526005602482015264475332303160d81b604482015260640162000086565b6001811015620001055760405162461bcd60e51b815260206004820152600560248201526423a999181960d91b604482015260640162000086565b600160005b8351811015620002645760008482815181106200012b576200012b620003cb565b6020026020010151905060006001600160a01b0316816001600160a01b0316141580156200016357506001600160a01b038116600114155b80156200017957506001600160a01b0381163014155b8015620001985750806001600160a01b0316836001600160a01b031614155b620001ce5760405162461bcd60e51b8152602060048201526005602482015264475332303360d81b604482015260640162000086565b6001600160a01b038181166000908152602081905260409020541615620002205760405162461bcd60e51b815260206004820152600560248201526411d4cc8c0d60da1b604482015260640162000086565b6001600160a01b03928316600090815260208190526040902080546001600160a01b03191693821693909317909255806200025b81620003e1565b9150506200010a565b506001600160a01b0316600090815260208190526040902080546001600160a01b03191660019081179091559151909155600255565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002c857600080fd5b919050565b80516001600160401b0381168114620002c857600080fd5b60008060408385031215620002f957600080fd5b82516001600160401b03808211156200031157600080fd5b818501915085601f8301126200032657600080fd5b81516020828211156200033d576200033d6200029a565b8160051b604051601f19603f830116810181811086821117156200036557620003656200029a565b6040529283528183019350848101820192898411156200038457600080fd5b948201945b83861015620003ad576200039d86620002b0565b8552948201949382019362000389565b9650620003be9050878201620002cd565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200040257634e487b7160e01b600052601160045260246000fd5b5060010190565b611aae80620004196000396000f3fe6080604052600436106100b55760003560e01c8063a0e67e2b11610069578063e318b52b1161004e578063e318b52b146101bd578063e75235b8146101dd578063f8dc5dd9146101fb57600080fd5b8063a0e67e2b1461017b578063c7a823e01461019d57600080fd5b80632f54bf6e1161009a5780632f54bf6e1461010b578063694e80c31461012b578063935f9ade1461014b57600080fd5b80630589105b146100c15780630d582f13146100e957600080fd5b366100bc57005b600080fd5b6100d46100cf3660046115a1565b61021b565b60405190151581526020015b60405180910390f35b3480156100f557600080fd5b506101096101043660046116bf565b61036b565b005b34801561011757600080fd5b506100d46101263660046116e9565b6105c2565b34801561013757600080fd5b5061010961014636600461170b565b610617565b34801561015757600080fd5b506100d461016636600461170b565b60036020526000908152604090205460ff1681565b34801561018757600080fd5b50610190610731565b6040516100e09190611724565b3480156101a957600080fd5b506101096101b836600461177e565b610848565b3480156101c957600080fd5b506101096101d83660046117ca565b610a80565b3480156101e957600080fd5b506002546040519081526020016100e0565b34801561020757600080fd5b5061010961021636600461180d565b610e0a565b6000804630898989896040516020016102399695949392919061186d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602082012090915061027d8782878761109b565b8873ffffffffffffffffffffffffffffffffffffffff1688876040516102a391906118fb565b60006040518083038185875af1925050503d80600081146102e0576040519150601f19603f3d011682016040523d82523d6000602084013e6102e5565b606091505b50506000828152600360205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555190935081907f0457ea5bc67881c59a30a626040dbff6e109920907a75dc61f3465475530336e9061035790861515815260200190565b60405180910390a250509695505050505050565b61037361118e565b73ffffffffffffffffffffffffffffffffffffffff8216158015906103af575073ffffffffffffffffffffffffffffffffffffffff8216600114155b80156103d1575073ffffffffffffffffffffffffffffffffffffffff82163014155b61043c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f475332303300000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82811660009081526020819052604090205416156104cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610433565b600060208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d805473ffffffffffffffffffffffffffffffffffffffff858116808552604085208054929093167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556001808552835490911690911790915580549161055e83611946565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a180600254146105be576105be81610617565b5050565b600073ffffffffffffffffffffffffffffffffffffffff8216600114801590610611575073ffffffffffffffffffffffffffffffffffffffff8281166000908152602081905260409020541615155b92915050565b61061f61118e565b60015481111561068b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610433565b60018110156106f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230320000000000000000000000000000000000000000000000000000006044820152606401610433565b60028190556040518181527f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c939060200160405180910390a150565b6060600060015467ffffffffffffffff81111561075057610750611530565b604051908082528060200260200182016040528015610779578160200160208202803683370190505b506001600090815260208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d549192509073ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff811660011461084057808383815181106107f4576107f461197e565b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201810191909152918116600090815291829052604090912054168161083881611946565b9250506107c3565b509092915050565b6002546108569060416119ad565b81146108be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606401610433565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c849052603c812090805b600254811015610a7857366000868661090a8560416119ad565b906109168660016119c4565b6109219060416119ad565b9261092e939291906119d7565b9150915060006109748684848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111f992505050565b90508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161180156109d7575073ffffffffffffffffffffffffffffffffffffffff8181166000908152602081905260409020541615155b80156109fa575073ffffffffffffffffffffffffffffffffffffffff8116600114155b610a60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610433565b9350829150610a70905081611946565b9150506108f0565b505050505050565b610a8861118e565b73ffffffffffffffffffffffffffffffffffffffff811615801590610ac4575073ffffffffffffffffffffffffffffffffffffffff8116600114155b8015610ae6575073ffffffffffffffffffffffffffffffffffffffff81163014155b610b4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff8181166000908152602081905260409020541615610bdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff821615801590610c17575073ffffffffffffffffffffffffffffffffffffffff8216600114155b610c7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260208190526040902054811690831614610d10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208181526040808320805487871680865283862080549289167fffffffffffffffffffffffff0000000000000000000000000000000000000000938416179055968a1685528285208054821690971790965592849052825490941690915591519081527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf910160405180910390a160405173ffffffffffffffffffffffffffffffffffffffff821681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a1505050565b610e1261118e565b8060018054610e219190611a01565b1015610e89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff821615801590610ec5575073ffffffffffffffffffffffffffffffffffffffff8216600114155b610f2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260208190526040902054811690831614610fbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208190526040808220805488861684529183208054929095167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179094559181528254909116909155600180549161103683611a14565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf9060200160405180910390a180600254146110965761109681610617565b505050565b834210611104576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6f7065726174696f6e20657870697265640000000000000000000000000000006044820152606401610433565b60008381526003602052604090205460ff161561117d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6861736820616c726561647920757365640000000000000000000000000000006044820152606401610433565b611188838383610848565b50505050565b3330146111f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533033310000000000000000000000000000000000000000000000000000006044820152606401610433565b565b6000806000611208858561121d565b9150915061121581611262565b509392505050565b60008082516041036112535760208301516040840151606085015160001a61124787828585611418565b9450945050505061125b565b506000905060025b9250929050565b600081600481111561127657611276611a49565b0361127e5750565b600181600481111561129257611292611a49565b036112f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610433565b600281600481111561130d5761130d611a49565b03611374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610433565b600381600481111561138857611388611a49565b03611415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610433565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561144f57506000905060036114fe565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156114a3573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166114f7576000600192509250506114fe565b9150600090505b94509492505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461152b57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083601f84011261157157600080fd5b50813567ffffffffffffffff81111561158957600080fd5b60208301915083602082850101111561125b57600080fd5b60008060008060008060a087890312156115ba57600080fd5b6115c387611507565b95506020870135945060408701359350606087013567ffffffffffffffff808211156115ee57600080fd5b818901915089601f83011261160257600080fd5b81358181111561161457611614611530565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561165a5761165a611530565b816040528281528c602084870101111561167357600080fd5b8260208601602083013760006020848301015280975050505060808901359150808211156116a057600080fd5b506116ad89828a0161155f565b979a9699509497509295939492505050565b600080604083850312156116d257600080fd5b6116db83611507565b946020939093013593505050565b6000602082840312156116fb57600080fd5b61170482611507565b9392505050565b60006020828403121561171d57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561177257835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611740565b50909695505050505050565b60008060006040848603121561179357600080fd5b83359250602084013567ffffffffffffffff8111156117b157600080fd5b6117bd8682870161155f565b9497909650939450505050565b6000806000606084860312156117df57600080fd5b6117e884611507565b92506117f660208501611507565b915061180460408501611507565b90509250925092565b60008060006060848603121561182257600080fd5b61182b84611507565b925061183960208501611507565b9150604084013590509250925092565b60005b8381101561186457818101518382015260200161184c565b50506000910152565b868152600073ffffffffffffffffffffffffffffffffffffffff808816602084015280871660408401525084606083015283608083015260c060a083015282518060c08401526118c48160e0850160208701611849565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160e001979650505050505050565b6000825161190d818460208701611849565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361197757611977611917565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808202811582820484141761061157610611611917565b8082018082111561061157610611611917565b600080858511156119e757600080fd5b838611156119f457600080fd5b5050820193919092039150565b8181038181111561061157610611611917565b600081611a2357611a23611917565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220f324b0700dbbbeaf57c064d165aa16d47fc4f52aac1b0e1017b0f81c78d579af64736f6c634300081100330000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000050000000000000000000000001989d93ec04037ca64e2af7e48ff5c8fc2cea7b80000000000000000000000009f33a4809aa708d7a399fedba514e0a0d15efa85000000000000000000000000b9a0cadd13c5d534b034d878b2fca9e5a6e1e3a4000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d000000000000000000000000fa5727be643dba6599fc7f812fe60da3264a8205"
        },
        {
          "actionType": 1,
          "create2Address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "initCodeWithArgs": "",
          "contracts": [
            {
              "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
              "initCodeWithArgs": "",
              "fullyQualifiedName": "lib/ORMP/src/eco/Oracle.sol:Oracle"
            }
          ],
          "index": "2",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "deploy",
            "variables": {
              "dao": "0x040f331774Ed6BB161412B4cEDb1358B382aF3A5",
              "ormp": "0x13b2211a7cA45Db2808F6dB05557ce5347e3634e"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "1209810",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
          "txData": "0x000000000000000000000000000000000000000000000000000000000000000260a060405234801561001057600080fd5b5060405161113038038061113083398101604081905261002f91610076565b6001600160a01b03908116608052600080546001600160a01b031916929091169190911790556100a9565b80516001600160a01b038116811461007157600080fd5b919050565b6000806040838503121561008957600080fd5b6100928361005a565b91506100a06020840161005a565b90509250929050565b60805161105e6100d2600039600081816102a80152818161046701526104cd015261105e6000f3fe6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063a6f9dae111610059578063a6f9dae1146102ea578063af9e3a361461030a578063b6333d1614610337578063f3fef3a31461036757600080fd5b80638da5cb5b1461024457806391b9b82714610296578063a1dbf432146102ca57600080fd5b806354fd4d50116100bb57806354fd4d5014610162578063651b04a7146101ae578063673448dd146101de57806384cfb6801461022457600080fd5b80630a863e6c146100ed578063506146951461010f57806352f7c9881461014257600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004610b5d565b610387565b005b34801561011b57600080fd5b5061012f61012a366004610b98565b6104c9565b6040519081526020015b60405180910390f35b34801561014e57600080fd5b5061010d61015d366004610bcd565b6105e1565b34801561016e57600080fd5b50604080518082018252600581527f322e312e30000000000000000000000000000000000000000000000000000000602082015290516101399190610c53565b3480156101ba57600080fd5b506101ce6101c9366004610c66565b6106ab565b6040519015158152602001610139565b3480156101ea57600080fd5b506101ce6101f9366004610d06565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b34801561023057600080fd5b5061010d61023f366004610d21565b6106e6565b34801561025057600080fd5b506000546102719073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610139565b3480156102a257600080fd5b506102717f000000000000000000000000000000000000000000000000000000000000000081565b3480156102d657600080fd5b5061012f6102e5366004610d5d565b6107f5565b3480156102f657600080fd5b5061010d610305366004610d06565b610876565b34801561031657600080fd5b5061012f610325366004610d89565b60016020526000908152604090205481565b34801561034357600080fd5b506101ce610352366004610d06565b60026020526000908152604090205460ff1681565b34801561037357600080fd5b5061010d610382366004610da2565b61096c565b60005473ffffffffffffffffffffffffffffffffffffffff16331461040d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e6572000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6040517f5f3abe960000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f00000000000000000000000000000000000000000000000000000000000000001690635f3abe9690608401600060405180830381600087803b1580156104ab57600080fd5b505af11580156104bf573d6000803e3d6000fd5b5050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663559e7230308686866040516020016105449392919092835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b604051602081830303815290604052805190602001206040518363ffffffff1660e01b815260040161059892919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b602060405180830381865afa1580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d99190610dcc565b949350505050565b3360009081526002602052604090205460ff1661065a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21617070726f76650000000000000000000000000000000000000000000000006044820152606401610404565b600082815260016020526040908190208290555182907f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b59061069f9084815260200190565b60405180910390a25050565b60006106be6106b985610ee9565b610b04565b6106dd60408601356106d36020880188610d06565b87602001356104c9565b14949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e657200000000000000000000000000000000000000000000000000006044820152606401610404565b73ffffffffffffffffffffffffffffffffffffffff821660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168515159081179091558251938452908301527fd984ea421ae5d2a473199f85e03998a04a12f54d6f1fa183a955b3df1c0c546d910160405180910390a15050565b60008281526001602052604081205480820361086f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104049060208082526004908201527f2166656500000000000000000000000000000000000000000000000000000000604082015260600190565b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e657200000000000000000000000000000000000000000000000000006044820152606401610404565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3360009081526002602052604090205460ff166109e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21617070726f76650000000000000000000000000000000000000000000000006044820152606401610404565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610a3f576040519150601f19603f3d011682016040523d82523d6000602084013e610a44565b606091505b5050905080610aaf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f21776974686472617700000000000000000000000000000000000000000000006044820152606401610404565b8273ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6583604051610af791815260200190565b60405180910390a2505050565b600081604051602001610b179190610f8b565b604051602081830303815290604052805190602001209050919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b5857600080fd5b919050565b60008060008060808587031215610b7357600080fd5b84359350610b8360208601610b34565b93969395505050506040820135916060013590565b600080600060608486031215610bad57600080fd5b83359250610bbd60208501610b34565b9150604084013590509250925092565b60008060408385031215610be057600080fd5b50508035926020909101359150565b6000815180845260005b81811015610c1557602081850181015186830182015201610bf9565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600061086f6020830184610bef565b600080600060408486031215610c7b57600080fd5b833567ffffffffffffffff80821115610c9357600080fd5b908501906101008288031215610ca857600080fd5b90935060208501359080821115610cbe57600080fd5b818601915086601f830112610cd257600080fd5b813581811115610ce157600080fd5b876020828501011115610cf357600080fd5b6020830194508093505050509250925092565b600060208284031215610d1857600080fd5b61086f82610b34565b60008060408385031215610d3457600080fd5b610d3d83610b34565b915060208301358015158114610d5257600080fd5b809150509250929050565b60008060408385031215610d7057600080fd5b82359150610d8060208401610b34565b90509250929050565b600060208284031215610d9b57600080fd5b5035919050565b60008060408385031215610db557600080fd5b610dbe83610b34565b946020939093013593505050565b600060208284031215610dde57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715610e3857610e38610de5565b60405290565b600082601f830112610e4f57600080fd5b813567ffffffffffffffff80821115610e6a57610e6a610de5565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610eb057610eb0610de5565b81604052838152866020858801011115610ec957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006101008236031215610efc57600080fd5b610f04610e14565b610f0d83610b34565b81526020830135602082015260408301356040820152610f2f60608401610b34565b606082015260808301356080820152610f4a60a08401610b34565b60a082015260c083013560c082015260e083013567ffffffffffffffff811115610f7357600080fd5b610f7f36828601610e3e565b60e08301525092915050565b60208152600073ffffffffffffffffffffffffffffffffffffffff808451166020840152602084015160408401526040840151606084015280606085015116608084015250608083015160a083015260a083015161100160c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015160e083015260e08301516101008081850152506105d9610120840182610bef56fea26469706673582212204e15bd44f524a009ddb10dfab169b887e49170106f13f83c120155f154c3b9bc64736f6c63430008110033000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a500000000000000000000000013b2211a7ca45db2808f6db05557ce5347e3634e"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "3",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setApproved",
            "variables": {
              "operator": "0x040f331774Ed6BB161412B4cEDb1358B382aF3A5",
              "approve": true
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "151304",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x84cfb680000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a50000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "4",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setApproved",
            "variables": {
              "operator": "0x0f14341A7f464320319025540E8Fe48Ad0fe5aec",
              "approve": true
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "151304",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x84cfb6800000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec0000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "5",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setApproved",
            "variables": {
              "operator": "0xc1A3FEE4132e9285f41F5389570fD9Fbbcb10a1D",
              "approve": true
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "151304",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x84cfb680000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d0000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "6",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "changeOwner",
            "variables": {
              "newOwner": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "127326",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0xa6f9dae1000000000000000000000000855275ac7ea4cc4f324915b2eb48839e447e04bd"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "7",
          "decodedAction": {
            "referenceName": "0x114890eB7386F94eae410186F20968bFAf66142a",
            "functionName": "call",
            "variables": [
              "0x84cfb680000000000000000000000000912d7601569cbc2df8a7f0aae50bfd18e8c64d050000000000000000000000000000000000000000000000000000000000000000"
            ],
            "address": "",
            "value": "0"
          },
          "gas": "133766",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x114890eB7386F94eae410186F20968bFAf66142a",
          "txData": "0x84cfb680000000000000000000000000912d7601569cbc2df8a7f0aae50bfd18e8c64d050000000000000000000000000000000000000000000000000000000000000000"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "8",
          "decodedAction": {
            "referenceName": "0x114890eB7386F94eae410186F20968bFAf66142a",
            "functionName": "call",
            "variables": [
              "0x84cfb68000000000000000000000000040c168503b9758540e18a79907f3fd8678c13f030000000000000000000000000000000000000000000000000000000000000001"
            ],
            "address": "",
            "value": "0"
          },
          "gas": "151286",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x114890eB7386F94eae410186F20968bFAf66142a",
          "txData": "0x84cfb68000000000000000000000000040c168503b9758540e18a79907f3fd8678c13f030000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "9",
          "decodedAction": {
            "referenceName": "0x13b2211a7cA45Db2808F6dB05557ce5347e3634e",
            "functionName": "call",
            "variables": [
              "0x4ea59979000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a"
            ],
            "address": "",
            "value": "0"
          },
          "gas": "134085",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x13b2211a7cA45Db2808F6dB05557ce5347e3634e",
          "txData": "0x4ea59979000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "10",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setFee",
            "variables": {
              "chainId": "42161",
              "fee_": "40000000000000"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "151210",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x52f7c988000000000000000000000000000000000000000000000000000000000000a4b10000000000000000000000000000000000000000000000000000246139ca8000"
        }
      ],
      "unlabeledContracts": [],
      "arbitraryChain": false,
      "executorAddress": "0x7e16116661CA8d66C73612382833153911Fa03B1",
      "libraries": [],
      "gitCommit": "ec364d8a31f07d39a8f27b71bc4037675954fddd",
      "safeFundingRequest": {
        "fundsRequested": "0",
        "startingBalance": "0"
      }
    },
    {
      "safeAddress": "0x040f331774Ed6BB161412B4cEDb1358B382aF3A5",
      "moduleAddress": "0x3D75d338B4711F8a33d293a2008f07a712513402",
      "safeInitData": "0xb63e800d00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000a238cbeb142c10ef7ad8442c6d1f9e89e07e776100000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000f48f2b2d2a534e402487b3ee7c18c33aec0fe5e4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000e3993566b34e5367d1c602439997bd08c11ff70000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec00000000000000000000000052386be2397e8eac26298f733b390684203fb58000000000000000000000000053405fb4d71591e33fe07bfbc90bd82e65720ad00000000000000000000000009f33a4809aa708d7a399fedba514e0a0d15efa8500000000000000000000000000000000000000000000000000000000000001448d80ff0a000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000f2008f3301c9eada5642b5bb12fd047d3ebb2932e619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000248236d0b80000000000000000000000000000000000000000000000000000000000000000018f3301c9eada5642b5bb12fd047d3ebb2932e6190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002411ea37fc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "nonce": "6",
      "chainId": "44",
      "blockGasLimit": "20000000",
      "blockNumber": "6611669",
      "newConfig": {
        "projectName": "RING-DAO",
        "orgId": "cluanacaw000111jik4xs4wkl",
        "owners": [
          "0x00E3993566b34e5367d1C602439997BD08c11FF7",
          "0x0f14341A7f464320319025540E8Fe48Ad0fe5aec",
          "0x52386BE2397e8EAc26298F733b390684203fB580",
          "0x53405FB4d71591E33fe07bFbC90bD82E65720ad0",
          "0x9F33a4809aA708d7a399fedBa514e0A0d15EfA85"
        ],
        "mainnets": [
          "arbitrum",
          "blast",
          "crab",
          "darwinia",
          "ethereum",
          "polygon",
          "moonbeam",
          "morph"
        ],
        "testnets": [
          "sepolia",
          "arbitrum_sepolia"
        ],
        "threshold": "3",
        "saltNonce": "0"
      },
      "executionMode": 2,
      "initialState": {
        "isExecuting": false,
        "isModuleDeployed": true,
        "isSafeDeployed": true
      },
      "isSystemDeployed": true,
      "actionInputs": [
        {
          "actionType": 1,
          "create2Address": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD",
          "initCodeWithArgs": "",
          "contracts": [
            {
              "address": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD",
              "initCodeWithArgs": "",
              "fullyQualifiedName": "lib/subapi/src/SubAPIMultiSig.sol:SubAPIMultiSig"
            }
          ],
          "index": "1",
          "decodedAction": {
            "referenceName": "SubAPIMultiSig",
            "functionName": "deploy",
            "variables": {
              "signers": [
                "0x1989D93Ec04037cA64e2af7e48FF5C8Fc2cEA7B8",
                "0x9F33a4809aA708d7a399fedBa514e0A0d15EfA85",
                "0xB9a0CaDD13C5d534b034d878b2fcA9E5a6e1e3A4",
                "0xc1A3FEE4132e9285f41F5389570fD9Fbbcb10a1D",
                "0xFa5727bE643dba6599fC7F812fE60dA3264A8205"
              ],
              "threshold": "3"
            },
            "address": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD",
            "value": "0"
          },
          "gas": "11200000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
          "txData": "0x000000000000000000000000000000000000000000000000000000000000000160806040523480156200001157600080fd5b5060405162001ec738038062001ec78339810160408190526200003491620002e5565b62000049826001600160401b03831662000051565b505062000409565b600254156200008f5760405162461bcd60e51b8152602060048201526005602482015264047533230360dc1b60448201526064015b60405180910390fd5b8151811115620000ca5760405162461bcd60e51b8152602060048201526005602482015264475332303160d81b604482015260640162000086565b6001811015620001055760405162461bcd60e51b815260206004820152600560248201526423a999181960d91b604482015260640162000086565b600160005b8351811015620002645760008482815181106200012b576200012b620003cb565b6020026020010151905060006001600160a01b0316816001600160a01b0316141580156200016357506001600160a01b038116600114155b80156200017957506001600160a01b0381163014155b8015620001985750806001600160a01b0316836001600160a01b031614155b620001ce5760405162461bcd60e51b8152602060048201526005602482015264475332303360d81b604482015260640162000086565b6001600160a01b038181166000908152602081905260409020541615620002205760405162461bcd60e51b815260206004820152600560248201526411d4cc8c0d60da1b604482015260640162000086565b6001600160a01b03928316600090815260208190526040902080546001600160a01b03191693821693909317909255806200025b81620003e1565b9150506200010a565b506001600160a01b0316600090815260208190526040902080546001600160a01b03191660019081179091559151909155600255565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002c857600080fd5b919050565b80516001600160401b0381168114620002c857600080fd5b60008060408385031215620002f957600080fd5b82516001600160401b03808211156200031157600080fd5b818501915085601f8301126200032657600080fd5b81516020828211156200033d576200033d6200029a565b8160051b604051601f19603f830116810181811086821117156200036557620003656200029a565b6040529283528183019350848101820192898411156200038457600080fd5b948201945b83861015620003ad576200039d86620002b0565b8552948201949382019362000389565b9650620003be9050878201620002cd565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200040257634e487b7160e01b600052601160045260246000fd5b5060010190565b611aae80620004196000396000f3fe6080604052600436106100b55760003560e01c8063a0e67e2b11610069578063e318b52b1161004e578063e318b52b146101bd578063e75235b8146101dd578063f8dc5dd9146101fb57600080fd5b8063a0e67e2b1461017b578063c7a823e01461019d57600080fd5b80632f54bf6e1161009a5780632f54bf6e1461010b578063694e80c31461012b578063935f9ade1461014b57600080fd5b80630589105b146100c15780630d582f13146100e957600080fd5b366100bc57005b600080fd5b6100d46100cf3660046115a1565b61021b565b60405190151581526020015b60405180910390f35b3480156100f557600080fd5b506101096101043660046116bf565b61036b565b005b34801561011757600080fd5b506100d46101263660046116e9565b6105c2565b34801561013757600080fd5b5061010961014636600461170b565b610617565b34801561015757600080fd5b506100d461016636600461170b565b60036020526000908152604090205460ff1681565b34801561018757600080fd5b50610190610731565b6040516100e09190611724565b3480156101a957600080fd5b506101096101b836600461177e565b610848565b3480156101c957600080fd5b506101096101d83660046117ca565b610a80565b3480156101e957600080fd5b506002546040519081526020016100e0565b34801561020757600080fd5b5061010961021636600461180d565b610e0a565b6000804630898989896040516020016102399695949392919061186d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602082012090915061027d8782878761109b565b8873ffffffffffffffffffffffffffffffffffffffff1688876040516102a391906118fb565b60006040518083038185875af1925050503d80600081146102e0576040519150601f19603f3d011682016040523d82523d6000602084013e6102e5565b606091505b50506000828152600360205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555190935081907f0457ea5bc67881c59a30a626040dbff6e109920907a75dc61f3465475530336e9061035790861515815260200190565b60405180910390a250509695505050505050565b61037361118e565b73ffffffffffffffffffffffffffffffffffffffff8216158015906103af575073ffffffffffffffffffffffffffffffffffffffff8216600114155b80156103d1575073ffffffffffffffffffffffffffffffffffffffff82163014155b61043c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f475332303300000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82811660009081526020819052604090205416156104cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610433565b600060208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d805473ffffffffffffffffffffffffffffffffffffffff858116808552604085208054929093167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556001808552835490911690911790915580549161055e83611946565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a180600254146105be576105be81610617565b5050565b600073ffffffffffffffffffffffffffffffffffffffff8216600114801590610611575073ffffffffffffffffffffffffffffffffffffffff8281166000908152602081905260409020541615155b92915050565b61061f61118e565b60015481111561068b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610433565b60018110156106f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230320000000000000000000000000000000000000000000000000000006044820152606401610433565b60028190556040518181527f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c939060200160405180910390a150565b6060600060015467ffffffffffffffff81111561075057610750611530565b604051908082528060200260200182016040528015610779578160200160208202803683370190505b506001600090815260208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d549192509073ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff811660011461084057808383815181106107f4576107f461197e565b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201810191909152918116600090815291829052604090912054168161083881611946565b9250506107c3565b509092915050565b6002546108569060416119ad565b81146108be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606401610433565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c849052603c812090805b600254811015610a7857366000868661090a8560416119ad565b906109168660016119c4565b6109219060416119ad565b9261092e939291906119d7565b9150915060006109748684848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111f992505050565b90508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161180156109d7575073ffffffffffffffffffffffffffffffffffffffff8181166000908152602081905260409020541615155b80156109fa575073ffffffffffffffffffffffffffffffffffffffff8116600114155b610a60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610433565b9350829150610a70905081611946565b9150506108f0565b505050505050565b610a8861118e565b73ffffffffffffffffffffffffffffffffffffffff811615801590610ac4575073ffffffffffffffffffffffffffffffffffffffff8116600114155b8015610ae6575073ffffffffffffffffffffffffffffffffffffffff81163014155b610b4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff8181166000908152602081905260409020541615610bdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff821615801590610c17575073ffffffffffffffffffffffffffffffffffffffff8216600114155b610c7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260208190526040902054811690831614610d10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208181526040808320805487871680865283862080549289167fffffffffffffffffffffffff0000000000000000000000000000000000000000938416179055968a1685528285208054821690971790965592849052825490941690915591519081527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf910160405180910390a160405173ffffffffffffffffffffffffffffffffffffffff821681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a1505050565b610e1261118e565b8060018054610e219190611a01565b1015610e89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff821615801590610ec5575073ffffffffffffffffffffffffffffffffffffffff8216600114155b610f2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260208190526040902054811690831614610fbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208190526040808220805488861684529183208054929095167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179094559181528254909116909155600180549161103683611a14565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf9060200160405180910390a180600254146110965761109681610617565b505050565b834210611104576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6f7065726174696f6e20657870697265640000000000000000000000000000006044820152606401610433565b60008381526003602052604090205460ff161561117d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6861736820616c726561647920757365640000000000000000000000000000006044820152606401610433565b611188838383610848565b50505050565b3330146111f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533033310000000000000000000000000000000000000000000000000000006044820152606401610433565b565b6000806000611208858561121d565b9150915061121581611262565b509392505050565b60008082516041036112535760208301516040840151606085015160001a61124787828585611418565b9450945050505061125b565b506000905060025b9250929050565b600081600481111561127657611276611a49565b0361127e5750565b600181600481111561129257611292611a49565b036112f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610433565b600281600481111561130d5761130d611a49565b03611374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610433565b600381600481111561138857611388611a49565b03611415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610433565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561144f57506000905060036114fe565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156114a3573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166114f7576000600192509250506114fe565b9150600090505b94509492505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461152b57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083601f84011261157157600080fd5b50813567ffffffffffffffff81111561158957600080fd5b60208301915083602082850101111561125b57600080fd5b60008060008060008060a087890312156115ba57600080fd5b6115c387611507565b95506020870135945060408701359350606087013567ffffffffffffffff808211156115ee57600080fd5b818901915089601f83011261160257600080fd5b81358181111561161457611614611530565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561165a5761165a611530565b816040528281528c602084870101111561167357600080fd5b8260208601602083013760006020848301015280975050505060808901359150808211156116a057600080fd5b506116ad89828a0161155f565b979a9699509497509295939492505050565b600080604083850312156116d257600080fd5b6116db83611507565b946020939093013593505050565b6000602082840312156116fb57600080fd5b61170482611507565b9392505050565b60006020828403121561171d57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561177257835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611740565b50909695505050505050565b60008060006040848603121561179357600080fd5b83359250602084013567ffffffffffffffff8111156117b157600080fd5b6117bd8682870161155f565b9497909650939450505050565b6000806000606084860312156117df57600080fd5b6117e884611507565b92506117f660208501611507565b915061180460408501611507565b90509250925092565b60008060006060848603121561182257600080fd5b61182b84611507565b925061183960208501611507565b9150604084013590509250925092565b60005b8381101561186457818101518382015260200161184c565b50506000910152565b868152600073ffffffffffffffffffffffffffffffffffffffff808816602084015280871660408401525084606083015283608083015260c060a083015282518060c08401526118c48160e0850160208701611849565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160e001979650505050505050565b6000825161190d818460208701611849565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361197757611977611917565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808202811582820484141761061157610611611917565b8082018082111561061157610611611917565b600080858511156119e757600080fd5b838611156119f457600080fd5b5050820193919092039150565b8181038181111561061157610611611917565b600081611a2357611a23611917565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220f324b0700dbbbeaf57c064d165aa16d47fc4f52aac1b0e1017b0f81c78d579af64736f6c634300081100330000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000050000000000000000000000001989d93ec04037ca64e2af7e48ff5c8fc2cea7b80000000000000000000000009f33a4809aa708d7a399fedba514e0a0d15efa85000000000000000000000000b9a0cadd13c5d534b034d878b2fca9e5a6e1e3a4000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d000000000000000000000000fa5727be643dba6599fc7f812fe60da3264a8205"
        },
        {
          "actionType": 1,
          "create2Address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "initCodeWithArgs": "0x60a060405234801561001057600080fd5b5060405161113038038061113083398101604081905261002f91610076565b6001600160a01b03908116608052600080546001600160a01b031916929091169190911790556100a9565b80516001600160a01b038116811461007157600080fd5b919050565b6000806040838503121561008957600080fd5b6100928361005a565b91506100a06020840161005a565b90509250929050565b60805161105e6100d2600039600081816102a80152818161046701526104cd015261105e6000f3fe6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063a6f9dae111610059578063a6f9dae1146102ea578063af9e3a361461030a578063b6333d1614610337578063f3fef3a31461036757600080fd5b80638da5cb5b1461024457806391b9b82714610296578063a1dbf432146102ca57600080fd5b806354fd4d50116100bb57806354fd4d5014610162578063651b04a7146101ae578063673448dd146101de57806384cfb6801461022457600080fd5b80630a863e6c146100ed578063506146951461010f57806352f7c9881461014257600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004610b5d565b610387565b005b34801561011b57600080fd5b5061012f61012a366004610b98565b6104c9565b6040519081526020015b60405180910390f35b34801561014e57600080fd5b5061010d61015d366004610bcd565b6105e1565b34801561016e57600080fd5b50604080518082018252600581527f322e312e30000000000000000000000000000000000000000000000000000000602082015290516101399190610c53565b3480156101ba57600080fd5b506101ce6101c9366004610c66565b6106ab565b6040519015158152602001610139565b3480156101ea57600080fd5b506101ce6101f9366004610d06565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b34801561023057600080fd5b5061010d61023f366004610d21565b6106e6565b34801561025057600080fd5b506000546102719073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610139565b3480156102a257600080fd5b506102717f000000000000000000000000000000000000000000000000000000000000000081565b3480156102d657600080fd5b5061012f6102e5366004610d5d565b6107f5565b3480156102f657600080fd5b5061010d610305366004610d06565b610876565b34801561031657600080fd5b5061012f610325366004610d89565b60016020526000908152604090205481565b34801561034357600080fd5b506101ce610352366004610d06565b60026020526000908152604090205460ff1681565b34801561037357600080fd5b5061010d610382366004610da2565b61096c565b60005473ffffffffffffffffffffffffffffffffffffffff16331461040d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e6572000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6040517f5f3abe960000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f00000000000000000000000000000000000000000000000000000000000000001690635f3abe9690608401600060405180830381600087803b1580156104ab57600080fd5b505af11580156104bf573d6000803e3d6000fd5b5050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663559e7230308686866040516020016105449392919092835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b604051602081830303815290604052805190602001206040518363ffffffff1660e01b815260040161059892919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b602060405180830381865afa1580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d99190610dcc565b949350505050565b3360009081526002602052604090205460ff1661065a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21617070726f76650000000000000000000000000000000000000000000000006044820152606401610404565b600082815260016020526040908190208290555182907f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b59061069f9084815260200190565b60405180910390a25050565b60006106be6106b985610ee9565b610b04565b6106dd60408601356106d36020880188610d06565b87602001356104c9565b14949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e657200000000000000000000000000000000000000000000000000006044820152606401610404565b73ffffffffffffffffffffffffffffffffffffffff821660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168515159081179091558251938452908301527fd984ea421ae5d2a473199f85e03998a04a12f54d6f1fa183a955b3df1c0c546d910160405180910390a15050565b60008281526001602052604081205480820361086f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104049060208082526004908201527f2166656500000000000000000000000000000000000000000000000000000000604082015260600190565b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e657200000000000000000000000000000000000000000000000000006044820152606401610404565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3360009081526002602052604090205460ff166109e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21617070726f76650000000000000000000000000000000000000000000000006044820152606401610404565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610a3f576040519150601f19603f3d011682016040523d82523d6000602084013e610a44565b606091505b5050905080610aaf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f21776974686472617700000000000000000000000000000000000000000000006044820152606401610404565b8273ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6583604051610af791815260200190565b60405180910390a2505050565b600081604051602001610b179190610f8b565b604051602081830303815290604052805190602001209050919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b5857600080fd5b919050565b60008060008060808587031215610b7357600080fd5b84359350610b8360208601610b34565b93969395505050506040820135916060013590565b600080600060608486031215610bad57600080fd5b83359250610bbd60208501610b34565b9150604084013590509250925092565b60008060408385031215610be057600080fd5b50508035926020909101359150565b6000815180845260005b81811015610c1557602081850181015186830182015201610bf9565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600061086f6020830184610bef565b600080600060408486031215610c7b57600080fd5b833567ffffffffffffffff80821115610c9357600080fd5b908501906101008288031215610ca857600080fd5b90935060208501359080821115610cbe57600080fd5b818601915086601f830112610cd257600080fd5b813581811115610ce157600080fd5b876020828501011115610cf357600080fd5b6020830194508093505050509250925092565b600060208284031215610d1857600080fd5b61086f82610b34565b60008060408385031215610d3457600080fd5b610d3d83610b34565b915060208301358015158114610d5257600080fd5b809150509250929050565b60008060408385031215610d7057600080fd5b82359150610d8060208401610b34565b90509250929050565b600060208284031215610d9b57600080fd5b5035919050565b60008060408385031215610db557600080fd5b610dbe83610b34565b946020939093013593505050565b600060208284031215610dde57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715610e3857610e38610de5565b60405290565b600082601f830112610e4f57600080fd5b813567ffffffffffffffff80821115610e6a57610e6a610de5565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610eb057610eb0610de5565b81604052838152866020858801011115610ec957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006101008236031215610efc57600080fd5b610f04610e14565b610f0d83610b34565b81526020830135602082015260408301356040820152610f2f60608401610b34565b606082015260808301356080820152610f4a60a08401610b34565b60a082015260c083013560c082015260e083013567ffffffffffffffff811115610f7357600080fd5b610f7f36828601610e3e565b60e08301525092915050565b60208152600073ffffffffffffffffffffffffffffffffffffffff808451166020840152602084015160408401526040840151606084015280606085015116608084015250608083015160a083015260a083015161100160c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015160e083015260e08301516101008081850152506105d9610120840182610bef56fea26469706673582212204e15bd44f524a009ddb10dfab169b887e49170106f13f83c120155f154c3b9bc64736f6c63430008110033000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a500000000000000000000000013b2211a7ca45db2808f6db05557ce5347e3634e",
          "contracts": [
            {
              "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
              "initCodeWithArgs": "",
              "fullyQualifiedName": "lib/ORMP/src/eco/Oracle.sol:Oracle"
            }
          ],
          "index": "2",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "deploy",
            "variables": {
              "dao": "0x040f331774Ed6BB161412B4cEDb1358B382aF3A5",
              "ormp": "0x13b2211a7cA45Db2808F6dB05557ce5347e3634e"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "11200000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
          "txData": "0x000000000000000000000000000000000000000000000000000000000000000260a060405234801561001057600080fd5b5060405161113038038061113083398101604081905261002f91610076565b6001600160a01b03908116608052600080546001600160a01b031916929091169190911790556100a9565b80516001600160a01b038116811461007157600080fd5b919050565b6000806040838503121561008957600080fd5b6100928361005a565b91506100a06020840161005a565b90509250929050565b60805161105e6100d2600039600081816102a80152818161046701526104cd015261105e6000f3fe6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063a6f9dae111610059578063a6f9dae1146102ea578063af9e3a361461030a578063b6333d1614610337578063f3fef3a31461036757600080fd5b80638da5cb5b1461024457806391b9b82714610296578063a1dbf432146102ca57600080fd5b806354fd4d50116100bb57806354fd4d5014610162578063651b04a7146101ae578063673448dd146101de57806384cfb6801461022457600080fd5b80630a863e6c146100ed578063506146951461010f57806352f7c9881461014257600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004610b5d565b610387565b005b34801561011b57600080fd5b5061012f61012a366004610b98565b6104c9565b6040519081526020015b60405180910390f35b34801561014e57600080fd5b5061010d61015d366004610bcd565b6105e1565b34801561016e57600080fd5b50604080518082018252600581527f322e312e30000000000000000000000000000000000000000000000000000000602082015290516101399190610c53565b3480156101ba57600080fd5b506101ce6101c9366004610c66565b6106ab565b6040519015158152602001610139565b3480156101ea57600080fd5b506101ce6101f9366004610d06565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b34801561023057600080fd5b5061010d61023f366004610d21565b6106e6565b34801561025057600080fd5b506000546102719073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610139565b3480156102a257600080fd5b506102717f000000000000000000000000000000000000000000000000000000000000000081565b3480156102d657600080fd5b5061012f6102e5366004610d5d565b6107f5565b3480156102f657600080fd5b5061010d610305366004610d06565b610876565b34801561031657600080fd5b5061012f610325366004610d89565b60016020526000908152604090205481565b34801561034357600080fd5b506101ce610352366004610d06565b60026020526000908152604090205460ff1681565b34801561037357600080fd5b5061010d610382366004610da2565b61096c565b60005473ffffffffffffffffffffffffffffffffffffffff16331461040d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e6572000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6040517f5f3abe960000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f00000000000000000000000000000000000000000000000000000000000000001690635f3abe9690608401600060405180830381600087803b1580156104ab57600080fd5b505af11580156104bf573d6000803e3d6000fd5b5050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663559e7230308686866040516020016105449392919092835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b604051602081830303815290604052805190602001206040518363ffffffff1660e01b815260040161059892919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b602060405180830381865afa1580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d99190610dcc565b949350505050565b3360009081526002602052604090205460ff1661065a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21617070726f76650000000000000000000000000000000000000000000000006044820152606401610404565b600082815260016020526040908190208290555182907f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b59061069f9084815260200190565b60405180910390a25050565b60006106be6106b985610ee9565b610b04565b6106dd60408601356106d36020880188610d06565b87602001356104c9565b14949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e657200000000000000000000000000000000000000000000000000006044820152606401610404565b73ffffffffffffffffffffffffffffffffffffffff821660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168515159081179091558251938452908301527fd984ea421ae5d2a473199f85e03998a04a12f54d6f1fa183a955b3df1c0c546d910160405180910390a15050565b60008281526001602052604081205480820361086f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104049060208082526004908201527f2166656500000000000000000000000000000000000000000000000000000000604082015260600190565b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e657200000000000000000000000000000000000000000000000000006044820152606401610404565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3360009081526002602052604090205460ff166109e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21617070726f76650000000000000000000000000000000000000000000000006044820152606401610404565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610a3f576040519150601f19603f3d011682016040523d82523d6000602084013e610a44565b606091505b5050905080610aaf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f21776974686472617700000000000000000000000000000000000000000000006044820152606401610404565b8273ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6583604051610af791815260200190565b60405180910390a2505050565b600081604051602001610b179190610f8b565b604051602081830303815290604052805190602001209050919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b5857600080fd5b919050565b60008060008060808587031215610b7357600080fd5b84359350610b8360208601610b34565b93969395505050506040820135916060013590565b600080600060608486031215610bad57600080fd5b83359250610bbd60208501610b34565b9150604084013590509250925092565b60008060408385031215610be057600080fd5b50508035926020909101359150565b6000815180845260005b81811015610c1557602081850181015186830182015201610bf9565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600061086f6020830184610bef565b600080600060408486031215610c7b57600080fd5b833567ffffffffffffffff80821115610c9357600080fd5b908501906101008288031215610ca857600080fd5b90935060208501359080821115610cbe57600080fd5b818601915086601f830112610cd257600080fd5b813581811115610ce157600080fd5b876020828501011115610cf357600080fd5b6020830194508093505050509250925092565b600060208284031215610d1857600080fd5b61086f82610b34565b60008060408385031215610d3457600080fd5b610d3d83610b34565b915060208301358015158114610d5257600080fd5b809150509250929050565b60008060408385031215610d7057600080fd5b82359150610d8060208401610b34565b90509250929050565b600060208284031215610d9b57600080fd5b5035919050565b60008060408385031215610db557600080fd5b610dbe83610b34565b946020939093013593505050565b600060208284031215610dde57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715610e3857610e38610de5565b60405290565b600082601f830112610e4f57600080fd5b813567ffffffffffffffff80821115610e6a57610e6a610de5565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610eb057610eb0610de5565b81604052838152866020858801011115610ec957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006101008236031215610efc57600080fd5b610f04610e14565b610f0d83610b34565b81526020830135602082015260408301356040820152610f2f60608401610b34565b606082015260808301356080820152610f4a60a08401610b34565b60a082015260c083013560c082015260e083013567ffffffffffffffff811115610f7357600080fd5b610f7f36828601610e3e565b60e08301525092915050565b60208152600073ffffffffffffffffffffffffffffffffffffffff808451166020840152602084015160408401526040840151606084015280606085015116608084015250608083015160a083015260a083015161100160c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015160e083015260e08301516101008081850152506105d9610120840182610bef56fea26469706673582212204e15bd44f524a009ddb10dfab169b887e49170106f13f83c120155f154c3b9bc64736f6c63430008110033000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a500000000000000000000000013b2211a7ca45db2808f6db05557ce5347e3634e"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "3",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setApproved",
            "variables": {
              "operator": "0x040f331774Ed6BB161412B4cEDb1358B382aF3A5",
              "approve": true
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "11200000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x84cfb680000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a50000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "4",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setApproved",
            "variables": {
              "operator": "0x0f14341A7f464320319025540E8Fe48Ad0fe5aec",
              "approve": true
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "11200000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x84cfb6800000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec0000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "5",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setApproved",
            "variables": {
              "operator": "0xc1A3FEE4132e9285f41F5389570fD9Fbbcb10a1D",
              "approve": true
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "11200000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x84cfb680000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d0000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "6",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "changeOwner",
            "variables": {
              "newOwner": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "11200000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0xa6f9dae1000000000000000000000000855275ac7ea4cc4f324915b2eb48839e447e04bd"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "7",
          "decodedAction": {
            "referenceName": "0x114890eB7386F94eae410186F20968bFAf66142a",
            "functionName": "call",
            "variables": [
              "0x84cfb680000000000000000000000000912d7601569cbc2df8a7f0aae50bfd18e8c64d050000000000000000000000000000000000000000000000000000000000000000"
            ],
            "address": "",
            "value": "0"
          },
          "gas": "11200000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x114890eB7386F94eae410186F20968bFAf66142a",
          "txData": "0x84cfb680000000000000000000000000912d7601569cbc2df8a7f0aae50bfd18e8c64d050000000000000000000000000000000000000000000000000000000000000000"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "8",
          "decodedAction": {
            "referenceName": "0x114890eB7386F94eae410186F20968bFAf66142a",
            "functionName": "call",
            "variables": [
              "0x84cfb68000000000000000000000000040c168503b9758540e18a79907f3fd8678c13f030000000000000000000000000000000000000000000000000000000000000001"
            ],
            "address": "",
            "value": "0"
          },
          "gas": "11200000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x114890eB7386F94eae410186F20968bFAf66142a",
          "txData": "0x84cfb68000000000000000000000000040c168503b9758540e18a79907f3fd8678c13f030000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "9",
          "decodedAction": {
            "referenceName": "0x13b2211a7cA45Db2808F6dB05557ce5347e3634e",
            "functionName": "call",
            "variables": [
              "0x4ea59979000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a"
            ],
            "address": "",
            "value": "0"
          },
          "gas": "11200000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x13b2211a7cA45Db2808F6dB05557ce5347e3634e",
          "txData": "0x4ea59979000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "10",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setFee",
            "variables": {
              "chainId": "46",
              "fee_": "20000000000000000000"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "11200000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x52f7c988000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000001158e460913d00000"
        }
      ],
      "unlabeledContracts": [],
      "arbitraryChain": false,
      "executorAddress": "0x7e16116661CA8d66C73612382833153911Fa03B1",
      "libraries": [],
      "gitCommit": "ec364d8a31f07d39a8f27b71bc4037675954fddd",
      "safeFundingRequest": {
        "fundsRequested": "0",
        "startingBalance": "0"
      }
    },
    {
      "safeAddress": "0x040f331774Ed6BB161412B4cEDb1358B382aF3A5",
      "moduleAddress": "0x3D75d338B4711F8a33d293a2008f07a712513402",
      "safeInitData": "0xb63e800d00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000a238cbeb142c10ef7ad8442c6d1f9e89e07e776100000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000f48f2b2d2a534e402487b3ee7c18c33aec0fe5e4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000e3993566b34e5367d1c602439997bd08c11ff70000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec00000000000000000000000052386be2397e8eac26298f733b390684203fb58000000000000000000000000053405fb4d71591e33fe07bfbc90bd82e65720ad00000000000000000000000009f33a4809aa708d7a399fedba514e0a0d15efa8500000000000000000000000000000000000000000000000000000000000001448d80ff0a000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000f2008f3301c9eada5642b5bb12fd047d3ebb2932e619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000248236d0b80000000000000000000000000000000000000000000000000000000000000000018f3301c9eada5642b5bb12fd047d3ebb2932e6190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002411ea37fc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "nonce": "9",
      "chainId": "46",
      "blockGasLimit": "20000000",
      "blockNumber": "6418998",
      "newConfig": {
        "projectName": "RING-DAO",
        "orgId": "cluanacaw000111jik4xs4wkl",
        "owners": [
          "0x00E3993566b34e5367d1C602439997BD08c11FF7",
          "0x0f14341A7f464320319025540E8Fe48Ad0fe5aec",
          "0x52386BE2397e8EAc26298F733b390684203fB580",
          "0x53405FB4d71591E33fe07bFbC90bD82E65720ad0",
          "0x9F33a4809aA708d7a399fedBa514e0A0d15EfA85"
        ],
        "mainnets": [
          "arbitrum",
          "blast",
          "crab",
          "darwinia",
          "ethereum",
          "polygon",
          "moonbeam",
          "morph"
        ],
        "testnets": [
          "sepolia",
          "arbitrum_sepolia"
        ],
        "threshold": "3",
        "saltNonce": "0"
      },
      "executionMode": 2,
      "initialState": {
        "isExecuting": false,
        "isModuleDeployed": true,
        "isSafeDeployed": true
      },
      "isSystemDeployed": true,
      "actionInputs": [
        {
          "actionType": 1,
          "create2Address": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD",
          "initCodeWithArgs": "",
          "contracts": [
            {
              "address": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD",
              "initCodeWithArgs": "",
              "fullyQualifiedName": "lib/subapi/src/SubAPIMultiSig.sol:SubAPIMultiSig"
            }
          ],
          "index": "1",
          "decodedAction": {
            "referenceName": "SubAPIMultiSig",
            "functionName": "deploy",
            "variables": {
              "signers": [
                "0x1989D93Ec04037cA64e2af7e48FF5C8Fc2cEA7B8",
                "0x9F33a4809aA708d7a399fedBa514e0A0d15EfA85",
                "0xB9a0CaDD13C5d534b034d878b2fcA9E5a6e1e3A4",
                "0xc1A3FEE4132e9285f41F5389570fD9Fbbcb10a1D",
                "0xFa5727bE643dba6599fC7F812fE60dA3264A8205"
              ],
              "threshold": "3"
            },
            "address": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD",
            "value": "0"
          },
          "gas": "11200000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
          "txData": "0x000000000000000000000000000000000000000000000000000000000000000160806040523480156200001157600080fd5b5060405162001ec738038062001ec78339810160408190526200003491620002e5565b62000049826001600160401b03831662000051565b505062000409565b600254156200008f5760405162461bcd60e51b8152602060048201526005602482015264047533230360dc1b60448201526064015b60405180910390fd5b8151811115620000ca5760405162461bcd60e51b8152602060048201526005602482015264475332303160d81b604482015260640162000086565b6001811015620001055760405162461bcd60e51b815260206004820152600560248201526423a999181960d91b604482015260640162000086565b600160005b8351811015620002645760008482815181106200012b576200012b620003cb565b6020026020010151905060006001600160a01b0316816001600160a01b0316141580156200016357506001600160a01b038116600114155b80156200017957506001600160a01b0381163014155b8015620001985750806001600160a01b0316836001600160a01b031614155b620001ce5760405162461bcd60e51b8152602060048201526005602482015264475332303360d81b604482015260640162000086565b6001600160a01b038181166000908152602081905260409020541615620002205760405162461bcd60e51b815260206004820152600560248201526411d4cc8c0d60da1b604482015260640162000086565b6001600160a01b03928316600090815260208190526040902080546001600160a01b03191693821693909317909255806200025b81620003e1565b9150506200010a565b506001600160a01b0316600090815260208190526040902080546001600160a01b03191660019081179091559151909155600255565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002c857600080fd5b919050565b80516001600160401b0381168114620002c857600080fd5b60008060408385031215620002f957600080fd5b82516001600160401b03808211156200031157600080fd5b818501915085601f8301126200032657600080fd5b81516020828211156200033d576200033d6200029a565b8160051b604051601f19603f830116810181811086821117156200036557620003656200029a565b6040529283528183019350848101820192898411156200038457600080fd5b948201945b83861015620003ad576200039d86620002b0565b8552948201949382019362000389565b9650620003be9050878201620002cd565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200040257634e487b7160e01b600052601160045260246000fd5b5060010190565b611aae80620004196000396000f3fe6080604052600436106100b55760003560e01c8063a0e67e2b11610069578063e318b52b1161004e578063e318b52b146101bd578063e75235b8146101dd578063f8dc5dd9146101fb57600080fd5b8063a0e67e2b1461017b578063c7a823e01461019d57600080fd5b80632f54bf6e1161009a5780632f54bf6e1461010b578063694e80c31461012b578063935f9ade1461014b57600080fd5b80630589105b146100c15780630d582f13146100e957600080fd5b366100bc57005b600080fd5b6100d46100cf3660046115a1565b61021b565b60405190151581526020015b60405180910390f35b3480156100f557600080fd5b506101096101043660046116bf565b61036b565b005b34801561011757600080fd5b506100d46101263660046116e9565b6105c2565b34801561013757600080fd5b5061010961014636600461170b565b610617565b34801561015757600080fd5b506100d461016636600461170b565b60036020526000908152604090205460ff1681565b34801561018757600080fd5b50610190610731565b6040516100e09190611724565b3480156101a957600080fd5b506101096101b836600461177e565b610848565b3480156101c957600080fd5b506101096101d83660046117ca565b610a80565b3480156101e957600080fd5b506002546040519081526020016100e0565b34801561020757600080fd5b5061010961021636600461180d565b610e0a565b6000804630898989896040516020016102399695949392919061186d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602082012090915061027d8782878761109b565b8873ffffffffffffffffffffffffffffffffffffffff1688876040516102a391906118fb565b60006040518083038185875af1925050503d80600081146102e0576040519150601f19603f3d011682016040523d82523d6000602084013e6102e5565b606091505b50506000828152600360205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555190935081907f0457ea5bc67881c59a30a626040dbff6e109920907a75dc61f3465475530336e9061035790861515815260200190565b60405180910390a250509695505050505050565b61037361118e565b73ffffffffffffffffffffffffffffffffffffffff8216158015906103af575073ffffffffffffffffffffffffffffffffffffffff8216600114155b80156103d1575073ffffffffffffffffffffffffffffffffffffffff82163014155b61043c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f475332303300000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82811660009081526020819052604090205416156104cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610433565b600060208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d805473ffffffffffffffffffffffffffffffffffffffff858116808552604085208054929093167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556001808552835490911690911790915580549161055e83611946565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a180600254146105be576105be81610617565b5050565b600073ffffffffffffffffffffffffffffffffffffffff8216600114801590610611575073ffffffffffffffffffffffffffffffffffffffff8281166000908152602081905260409020541615155b92915050565b61061f61118e565b60015481111561068b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610433565b60018110156106f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230320000000000000000000000000000000000000000000000000000006044820152606401610433565b60028190556040518181527f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c939060200160405180910390a150565b6060600060015467ffffffffffffffff81111561075057610750611530565b604051908082528060200260200182016040528015610779578160200160208202803683370190505b506001600090815260208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d549192509073ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff811660011461084057808383815181106107f4576107f461197e565b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201810191909152918116600090815291829052604090912054168161083881611946565b9250506107c3565b509092915050565b6002546108569060416119ad565b81146108be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606401610433565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c849052603c812090805b600254811015610a7857366000868661090a8560416119ad565b906109168660016119c4565b6109219060416119ad565b9261092e939291906119d7565b9150915060006109748684848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111f992505050565b90508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161180156109d7575073ffffffffffffffffffffffffffffffffffffffff8181166000908152602081905260409020541615155b80156109fa575073ffffffffffffffffffffffffffffffffffffffff8116600114155b610a60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610433565b9350829150610a70905081611946565b9150506108f0565b505050505050565b610a8861118e565b73ffffffffffffffffffffffffffffffffffffffff811615801590610ac4575073ffffffffffffffffffffffffffffffffffffffff8116600114155b8015610ae6575073ffffffffffffffffffffffffffffffffffffffff81163014155b610b4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff8181166000908152602081905260409020541615610bdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff821615801590610c17575073ffffffffffffffffffffffffffffffffffffffff8216600114155b610c7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260208190526040902054811690831614610d10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208181526040808320805487871680865283862080549289167fffffffffffffffffffffffff0000000000000000000000000000000000000000938416179055968a1685528285208054821690971790965592849052825490941690915591519081527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf910160405180910390a160405173ffffffffffffffffffffffffffffffffffffffff821681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a1505050565b610e1261118e565b8060018054610e219190611a01565b1015610e89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff821615801590610ec5575073ffffffffffffffffffffffffffffffffffffffff8216600114155b610f2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260208190526040902054811690831614610fbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208190526040808220805488861684529183208054929095167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179094559181528254909116909155600180549161103683611a14565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf9060200160405180910390a180600254146110965761109681610617565b505050565b834210611104576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6f7065726174696f6e20657870697265640000000000000000000000000000006044820152606401610433565b60008381526003602052604090205460ff161561117d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6861736820616c726561647920757365640000000000000000000000000000006044820152606401610433565b611188838383610848565b50505050565b3330146111f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533033310000000000000000000000000000000000000000000000000000006044820152606401610433565b565b6000806000611208858561121d565b9150915061121581611262565b509392505050565b60008082516041036112535760208301516040840151606085015160001a61124787828585611418565b9450945050505061125b565b506000905060025b9250929050565b600081600481111561127657611276611a49565b0361127e5750565b600181600481111561129257611292611a49565b036112f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610433565b600281600481111561130d5761130d611a49565b03611374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610433565b600381600481111561138857611388611a49565b03611415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610433565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561144f57506000905060036114fe565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156114a3573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166114f7576000600192509250506114fe565b9150600090505b94509492505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461152b57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083601f84011261157157600080fd5b50813567ffffffffffffffff81111561158957600080fd5b60208301915083602082850101111561125b57600080fd5b60008060008060008060a087890312156115ba57600080fd5b6115c387611507565b95506020870135945060408701359350606087013567ffffffffffffffff808211156115ee57600080fd5b818901915089601f83011261160257600080fd5b81358181111561161457611614611530565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561165a5761165a611530565b816040528281528c602084870101111561167357600080fd5b8260208601602083013760006020848301015280975050505060808901359150808211156116a057600080fd5b506116ad89828a0161155f565b979a9699509497509295939492505050565b600080604083850312156116d257600080fd5b6116db83611507565b946020939093013593505050565b6000602082840312156116fb57600080fd5b61170482611507565b9392505050565b60006020828403121561171d57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561177257835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611740565b50909695505050505050565b60008060006040848603121561179357600080fd5b83359250602084013567ffffffffffffffff8111156117b157600080fd5b6117bd8682870161155f565b9497909650939450505050565b6000806000606084860312156117df57600080fd5b6117e884611507565b92506117f660208501611507565b915061180460408501611507565b90509250925092565b60008060006060848603121561182257600080fd5b61182b84611507565b925061183960208501611507565b9150604084013590509250925092565b60005b8381101561186457818101518382015260200161184c565b50506000910152565b868152600073ffffffffffffffffffffffffffffffffffffffff808816602084015280871660408401525084606083015283608083015260c060a083015282518060c08401526118c48160e0850160208701611849565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160e001979650505050505050565b6000825161190d818460208701611849565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361197757611977611917565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808202811582820484141761061157610611611917565b8082018082111561061157610611611917565b600080858511156119e757600080fd5b838611156119f457600080fd5b5050820193919092039150565b8181038181111561061157610611611917565b600081611a2357611a23611917565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220f324b0700dbbbeaf57c064d165aa16d47fc4f52aac1b0e1017b0f81c78d579af64736f6c634300081100330000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000050000000000000000000000001989d93ec04037ca64e2af7e48ff5c8fc2cea7b80000000000000000000000009f33a4809aa708d7a399fedba514e0a0d15efa85000000000000000000000000b9a0cadd13c5d534b034d878b2fca9e5a6e1e3a4000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d000000000000000000000000fa5727be643dba6599fc7f812fe60da3264a8205"
        },
        {
          "actionType": 1,
          "create2Address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "initCodeWithArgs": "",
          "contracts": [
            {
              "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
              "initCodeWithArgs": "",
              "fullyQualifiedName": "lib/ORMP/src/eco/Oracle.sol:Oracle"
            }
          ],
          "index": "2",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "deploy",
            "variables": {
              "dao": "0x040f331774Ed6BB161412B4cEDb1358B382aF3A5",
              "ormp": "0x13b2211a7cA45Db2808F6dB05557ce5347e3634e"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "11200000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
          "txData": "0x000000000000000000000000000000000000000000000000000000000000000260a060405234801561001057600080fd5b5060405161113038038061113083398101604081905261002f91610076565b6001600160a01b03908116608052600080546001600160a01b031916929091169190911790556100a9565b80516001600160a01b038116811461007157600080fd5b919050565b6000806040838503121561008957600080fd5b6100928361005a565b91506100a06020840161005a565b90509250929050565b60805161105e6100d2600039600081816102a80152818161046701526104cd015261105e6000f3fe6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063a6f9dae111610059578063a6f9dae1146102ea578063af9e3a361461030a578063b6333d1614610337578063f3fef3a31461036757600080fd5b80638da5cb5b1461024457806391b9b82714610296578063a1dbf432146102ca57600080fd5b806354fd4d50116100bb57806354fd4d5014610162578063651b04a7146101ae578063673448dd146101de57806384cfb6801461022457600080fd5b80630a863e6c146100ed578063506146951461010f57806352f7c9881461014257600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004610b5d565b610387565b005b34801561011b57600080fd5b5061012f61012a366004610b98565b6104c9565b6040519081526020015b60405180910390f35b34801561014e57600080fd5b5061010d61015d366004610bcd565b6105e1565b34801561016e57600080fd5b50604080518082018252600581527f322e312e30000000000000000000000000000000000000000000000000000000602082015290516101399190610c53565b3480156101ba57600080fd5b506101ce6101c9366004610c66565b6106ab565b6040519015158152602001610139565b3480156101ea57600080fd5b506101ce6101f9366004610d06565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b34801561023057600080fd5b5061010d61023f366004610d21565b6106e6565b34801561025057600080fd5b506000546102719073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610139565b3480156102a257600080fd5b506102717f000000000000000000000000000000000000000000000000000000000000000081565b3480156102d657600080fd5b5061012f6102e5366004610d5d565b6107f5565b3480156102f657600080fd5b5061010d610305366004610d06565b610876565b34801561031657600080fd5b5061012f610325366004610d89565b60016020526000908152604090205481565b34801561034357600080fd5b506101ce610352366004610d06565b60026020526000908152604090205460ff1681565b34801561037357600080fd5b5061010d610382366004610da2565b61096c565b60005473ffffffffffffffffffffffffffffffffffffffff16331461040d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e6572000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6040517f5f3abe960000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f00000000000000000000000000000000000000000000000000000000000000001690635f3abe9690608401600060405180830381600087803b1580156104ab57600080fd5b505af11580156104bf573d6000803e3d6000fd5b5050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663559e7230308686866040516020016105449392919092835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b604051602081830303815290604052805190602001206040518363ffffffff1660e01b815260040161059892919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b602060405180830381865afa1580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d99190610dcc565b949350505050565b3360009081526002602052604090205460ff1661065a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21617070726f76650000000000000000000000000000000000000000000000006044820152606401610404565b600082815260016020526040908190208290555182907f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b59061069f9084815260200190565b60405180910390a25050565b60006106be6106b985610ee9565b610b04565b6106dd60408601356106d36020880188610d06565b87602001356104c9565b14949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e657200000000000000000000000000000000000000000000000000006044820152606401610404565b73ffffffffffffffffffffffffffffffffffffffff821660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168515159081179091558251938452908301527fd984ea421ae5d2a473199f85e03998a04a12f54d6f1fa183a955b3df1c0c546d910160405180910390a15050565b60008281526001602052604081205480820361086f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104049060208082526004908201527f2166656500000000000000000000000000000000000000000000000000000000604082015260600190565b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e657200000000000000000000000000000000000000000000000000006044820152606401610404565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3360009081526002602052604090205460ff166109e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21617070726f76650000000000000000000000000000000000000000000000006044820152606401610404565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610a3f576040519150601f19603f3d011682016040523d82523d6000602084013e610a44565b606091505b5050905080610aaf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f21776974686472617700000000000000000000000000000000000000000000006044820152606401610404565b8273ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6583604051610af791815260200190565b60405180910390a2505050565b600081604051602001610b179190610f8b565b604051602081830303815290604052805190602001209050919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b5857600080fd5b919050565b60008060008060808587031215610b7357600080fd5b84359350610b8360208601610b34565b93969395505050506040820135916060013590565b600080600060608486031215610bad57600080fd5b83359250610bbd60208501610b34565b9150604084013590509250925092565b60008060408385031215610be057600080fd5b50508035926020909101359150565b6000815180845260005b81811015610c1557602081850181015186830182015201610bf9565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600061086f6020830184610bef565b600080600060408486031215610c7b57600080fd5b833567ffffffffffffffff80821115610c9357600080fd5b908501906101008288031215610ca857600080fd5b90935060208501359080821115610cbe57600080fd5b818601915086601f830112610cd257600080fd5b813581811115610ce157600080fd5b876020828501011115610cf357600080fd5b6020830194508093505050509250925092565b600060208284031215610d1857600080fd5b61086f82610b34565b60008060408385031215610d3457600080fd5b610d3d83610b34565b915060208301358015158114610d5257600080fd5b809150509250929050565b60008060408385031215610d7057600080fd5b82359150610d8060208401610b34565b90509250929050565b600060208284031215610d9b57600080fd5b5035919050565b60008060408385031215610db557600080fd5b610dbe83610b34565b946020939093013593505050565b600060208284031215610dde57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715610e3857610e38610de5565b60405290565b600082601f830112610e4f57600080fd5b813567ffffffffffffffff80821115610e6a57610e6a610de5565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610eb057610eb0610de5565b81604052838152866020858801011115610ec957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006101008236031215610efc57600080fd5b610f04610e14565b610f0d83610b34565b81526020830135602082015260408301356040820152610f2f60608401610b34565b606082015260808301356080820152610f4a60a08401610b34565b60a082015260c083013560c082015260e083013567ffffffffffffffff811115610f7357600080fd5b610f7f36828601610e3e565b60e08301525092915050565b60208152600073ffffffffffffffffffffffffffffffffffffffff808451166020840152602084015160408401526040840151606084015280606085015116608084015250608083015160a083015260a083015161100160c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015160e083015260e08301516101008081850152506105d9610120840182610bef56fea26469706673582212204e15bd44f524a009ddb10dfab169b887e49170106f13f83c120155f154c3b9bc64736f6c63430008110033000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a500000000000000000000000013b2211a7ca45db2808f6db05557ce5347e3634e"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "3",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setApproved",
            "variables": {
              "operator": "0x040f331774Ed6BB161412B4cEDb1358B382aF3A5",
              "approve": true
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "11200000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x84cfb680000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a50000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "4",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setApproved",
            "variables": {
              "operator": "0x0f14341A7f464320319025540E8Fe48Ad0fe5aec",
              "approve": true
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "11200000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x84cfb6800000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec0000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "5",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setApproved",
            "variables": {
              "operator": "0xc1A3FEE4132e9285f41F5389570fD9Fbbcb10a1D",
              "approve": true
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "11200000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x84cfb680000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d0000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "6",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "changeOwner",
            "variables": {
              "newOwner": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "11200000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0xa6f9dae1000000000000000000000000855275ac7ea4cc4f324915b2eb48839e447e04bd"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "7",
          "decodedAction": {
            "referenceName": "0x114890eB7386F94eae410186F20968bFAf66142a",
            "functionName": "call",
            "variables": [
              "0x84cfb680000000000000000000000000912d7601569cbc2df8a7f0aae50bfd18e8c64d050000000000000000000000000000000000000000000000000000000000000000"
            ],
            "address": "",
            "value": "0"
          },
          "gas": "11200000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x114890eB7386F94eae410186F20968bFAf66142a",
          "txData": "0x84cfb680000000000000000000000000912d7601569cbc2df8a7f0aae50bfd18e8c64d050000000000000000000000000000000000000000000000000000000000000000"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "8",
          "decodedAction": {
            "referenceName": "0x114890eB7386F94eae410186F20968bFAf66142a",
            "functionName": "call",
            "variables": [
              "0x84cfb68000000000000000000000000040c168503b9758540e18a79907f3fd8678c13f030000000000000000000000000000000000000000000000000000000000000001"
            ],
            "address": "",
            "value": "0"
          },
          "gas": "11200000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x114890eB7386F94eae410186F20968bFAf66142a",
          "txData": "0x84cfb68000000000000000000000000040c168503b9758540e18a79907f3fd8678c13f030000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "9",
          "decodedAction": {
            "referenceName": "0x13b2211a7cA45Db2808F6dB05557ce5347e3634e",
            "functionName": "call",
            "variables": [
              "0x4ea59979000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a"
            ],
            "address": "",
            "value": "0"
          },
          "gas": "11200000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x13b2211a7cA45Db2808F6dB05557ce5347e3634e",
          "txData": "0x4ea59979000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "10",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setFee",
            "variables": {
              "chainId": "42161",
              "fee_": "36000000000000000000"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "11200000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x52f7c988000000000000000000000000000000000000000000000000000000000000a4b1000000000000000000000000000000000000000000000001f399b1438a100000"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "11",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setFee",
            "variables": {
              "chainId": "44",
              "fee_": "1000000000000000000"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "11200000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x52f7c988000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000de0b6b3a7640000"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "12",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setFee",
            "variables": {
              "chainId": "1",
              "fee_": "600000000000000000000"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "11200000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x52f7c988000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000002086ac351052600000"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "13",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setFee",
            "variables": {
              "chainId": "137",
              "fee_": "2000000000000000000"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "11200000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x52f7c98800000000000000000000000000000000000000000000000000000000000000890000000000000000000000000000000000000000000000001bc16d674ec80000"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "14",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setFee",
            "variables": {
              "chainId": "1284",
              "fee_": "2000000000000000000"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "11200000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x52f7c98800000000000000000000000000000000000000000000000000000000000005040000000000000000000000000000000000000000000000001bc16d674ec80000"
        }
      ],
      "unlabeledContracts": [],
      "arbitraryChain": false,
      "executorAddress": "0x7e16116661CA8d66C73612382833153911Fa03B1",
      "libraries": [],
      "gitCommit": "ec364d8a31f07d39a8f27b71bc4037675954fddd",
      "safeFundingRequest": {
        "fundsRequested": "0",
        "startingBalance": "0"
      }
    },
    {
      "safeAddress": "0x040f331774Ed6BB161412B4cEDb1358B382aF3A5",
      "moduleAddress": "0x3D75d338B4711F8a33d293a2008f07a712513402",
      "safeInitData": "0xb63e800d00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000a238cbeb142c10ef7ad8442c6d1f9e89e07e776100000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000f48f2b2d2a534e402487b3ee7c18c33aec0fe5e4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000e3993566b34e5367d1c602439997bd08c11ff70000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec00000000000000000000000052386be2397e8eac26298f733b390684203fb58000000000000000000000000053405fb4d71591e33fe07bfbc90bd82e65720ad00000000000000000000000009f33a4809aa708d7a399fedba514e0a0d15efa8500000000000000000000000000000000000000000000000000000000000001448d80ff0a000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000f2008f3301c9eada5642b5bb12fd047d3ebb2932e619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000248236d0b80000000000000000000000000000000000000000000000000000000000000000018f3301c9eada5642b5bb12fd047d3ebb2932e6190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002411ea37fc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "nonce": "9",
      "chainId": "1",
      "blockGasLimit": "36000000",
      "blockNumber": "22323781",
      "newConfig": {
        "projectName": "RING-DAO",
        "orgId": "cluanacaw000111jik4xs4wkl",
        "owners": [
          "0x00E3993566b34e5367d1C602439997BD08c11FF7",
          "0x0f14341A7f464320319025540E8Fe48Ad0fe5aec",
          "0x52386BE2397e8EAc26298F733b390684203fB580",
          "0x53405FB4d71591E33fe07bFbC90bD82E65720ad0",
          "0x9F33a4809aA708d7a399fedBa514e0A0d15EfA85"
        ],
        "mainnets": [
          "arbitrum",
          "blast",
          "crab",
          "darwinia",
          "ethereum",
          "polygon",
          "moonbeam",
          "morph"
        ],
        "testnets": [
          "sepolia",
          "arbitrum_sepolia"
        ],
        "threshold": "3",
        "saltNonce": "0"
      },
      "executionMode": 2,
      "initialState": {
        "isExecuting": false,
        "isModuleDeployed": true,
        "isSafeDeployed": true
      },
      "isSystemDeployed": true,
      "actionInputs": [
        {
          "actionType": 1,
          "create2Address": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD",
          "initCodeWithArgs": "",
          "contracts": [
            {
              "address": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD",
              "initCodeWithArgs": "",
              "fullyQualifiedName": "lib/subapi/src/SubAPIMultiSig.sol:SubAPIMultiSig"
            }
          ],
          "index": "1",
          "decodedAction": {
            "referenceName": "SubAPIMultiSig",
            "functionName": "deploy",
            "variables": {
              "signers": [
                "0x1989D93Ec04037cA64e2af7e48FF5C8Fc2cEA7B8",
                "0x9F33a4809aA708d7a399fedBa514e0A0d15EfA85",
                "0xB9a0CaDD13C5d534b034d878b2fcA9E5a6e1e3A4",
                "0xc1A3FEE4132e9285f41F5389570fD9Fbbcb10a1D",
                "0xFa5727bE643dba6599fC7F812fE60dA3264A8205"
              ],
              "threshold": "3"
            },
            "address": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD",
            "value": "0"
          },
          "gas": "2073206",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
          "txData": "0x000000000000000000000000000000000000000000000000000000000000000160806040523480156200001157600080fd5b5060405162001ec738038062001ec78339810160408190526200003491620002e5565b62000049826001600160401b03831662000051565b505062000409565b600254156200008f5760405162461bcd60e51b8152602060048201526005602482015264047533230360dc1b60448201526064015b60405180910390fd5b8151811115620000ca5760405162461bcd60e51b8152602060048201526005602482015264475332303160d81b604482015260640162000086565b6001811015620001055760405162461bcd60e51b815260206004820152600560248201526423a999181960d91b604482015260640162000086565b600160005b8351811015620002645760008482815181106200012b576200012b620003cb565b6020026020010151905060006001600160a01b0316816001600160a01b0316141580156200016357506001600160a01b038116600114155b80156200017957506001600160a01b0381163014155b8015620001985750806001600160a01b0316836001600160a01b031614155b620001ce5760405162461bcd60e51b8152602060048201526005602482015264475332303360d81b604482015260640162000086565b6001600160a01b038181166000908152602081905260409020541615620002205760405162461bcd60e51b815260206004820152600560248201526411d4cc8c0d60da1b604482015260640162000086565b6001600160a01b03928316600090815260208190526040902080546001600160a01b03191693821693909317909255806200025b81620003e1565b9150506200010a565b506001600160a01b0316600090815260208190526040902080546001600160a01b03191660019081179091559151909155600255565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002c857600080fd5b919050565b80516001600160401b0381168114620002c857600080fd5b60008060408385031215620002f957600080fd5b82516001600160401b03808211156200031157600080fd5b818501915085601f8301126200032657600080fd5b81516020828211156200033d576200033d6200029a565b8160051b604051601f19603f830116810181811086821117156200036557620003656200029a565b6040529283528183019350848101820192898411156200038457600080fd5b948201945b83861015620003ad576200039d86620002b0565b8552948201949382019362000389565b9650620003be9050878201620002cd565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200040257634e487b7160e01b600052601160045260246000fd5b5060010190565b611aae80620004196000396000f3fe6080604052600436106100b55760003560e01c8063a0e67e2b11610069578063e318b52b1161004e578063e318b52b146101bd578063e75235b8146101dd578063f8dc5dd9146101fb57600080fd5b8063a0e67e2b1461017b578063c7a823e01461019d57600080fd5b80632f54bf6e1161009a5780632f54bf6e1461010b578063694e80c31461012b578063935f9ade1461014b57600080fd5b80630589105b146100c15780630d582f13146100e957600080fd5b366100bc57005b600080fd5b6100d46100cf3660046115a1565b61021b565b60405190151581526020015b60405180910390f35b3480156100f557600080fd5b506101096101043660046116bf565b61036b565b005b34801561011757600080fd5b506100d46101263660046116e9565b6105c2565b34801561013757600080fd5b5061010961014636600461170b565b610617565b34801561015757600080fd5b506100d461016636600461170b565b60036020526000908152604090205460ff1681565b34801561018757600080fd5b50610190610731565b6040516100e09190611724565b3480156101a957600080fd5b506101096101b836600461177e565b610848565b3480156101c957600080fd5b506101096101d83660046117ca565b610a80565b3480156101e957600080fd5b506002546040519081526020016100e0565b34801561020757600080fd5b5061010961021636600461180d565b610e0a565b6000804630898989896040516020016102399695949392919061186d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602082012090915061027d8782878761109b565b8873ffffffffffffffffffffffffffffffffffffffff1688876040516102a391906118fb565b60006040518083038185875af1925050503d80600081146102e0576040519150601f19603f3d011682016040523d82523d6000602084013e6102e5565b606091505b50506000828152600360205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555190935081907f0457ea5bc67881c59a30a626040dbff6e109920907a75dc61f3465475530336e9061035790861515815260200190565b60405180910390a250509695505050505050565b61037361118e565b73ffffffffffffffffffffffffffffffffffffffff8216158015906103af575073ffffffffffffffffffffffffffffffffffffffff8216600114155b80156103d1575073ffffffffffffffffffffffffffffffffffffffff82163014155b61043c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f475332303300000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82811660009081526020819052604090205416156104cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610433565b600060208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d805473ffffffffffffffffffffffffffffffffffffffff858116808552604085208054929093167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556001808552835490911690911790915580549161055e83611946565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a180600254146105be576105be81610617565b5050565b600073ffffffffffffffffffffffffffffffffffffffff8216600114801590610611575073ffffffffffffffffffffffffffffffffffffffff8281166000908152602081905260409020541615155b92915050565b61061f61118e565b60015481111561068b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610433565b60018110156106f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230320000000000000000000000000000000000000000000000000000006044820152606401610433565b60028190556040518181527f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c939060200160405180910390a150565b6060600060015467ffffffffffffffff81111561075057610750611530565b604051908082528060200260200182016040528015610779578160200160208202803683370190505b506001600090815260208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d549192509073ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff811660011461084057808383815181106107f4576107f461197e565b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201810191909152918116600090815291829052604090912054168161083881611946565b9250506107c3565b509092915050565b6002546108569060416119ad565b81146108be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606401610433565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c849052603c812090805b600254811015610a7857366000868661090a8560416119ad565b906109168660016119c4565b6109219060416119ad565b9261092e939291906119d7565b9150915060006109748684848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111f992505050565b90508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161180156109d7575073ffffffffffffffffffffffffffffffffffffffff8181166000908152602081905260409020541615155b80156109fa575073ffffffffffffffffffffffffffffffffffffffff8116600114155b610a60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610433565b9350829150610a70905081611946565b9150506108f0565b505050505050565b610a8861118e565b73ffffffffffffffffffffffffffffffffffffffff811615801590610ac4575073ffffffffffffffffffffffffffffffffffffffff8116600114155b8015610ae6575073ffffffffffffffffffffffffffffffffffffffff81163014155b610b4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff8181166000908152602081905260409020541615610bdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff821615801590610c17575073ffffffffffffffffffffffffffffffffffffffff8216600114155b610c7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260208190526040902054811690831614610d10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208181526040808320805487871680865283862080549289167fffffffffffffffffffffffff0000000000000000000000000000000000000000938416179055968a1685528285208054821690971790965592849052825490941690915591519081527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf910160405180910390a160405173ffffffffffffffffffffffffffffffffffffffff821681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a1505050565b610e1261118e565b8060018054610e219190611a01565b1015610e89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff821615801590610ec5575073ffffffffffffffffffffffffffffffffffffffff8216600114155b610f2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260208190526040902054811690831614610fbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208190526040808220805488861684529183208054929095167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179094559181528254909116909155600180549161103683611a14565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf9060200160405180910390a180600254146110965761109681610617565b505050565b834210611104576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6f7065726174696f6e20657870697265640000000000000000000000000000006044820152606401610433565b60008381526003602052604090205460ff161561117d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6861736820616c726561647920757365640000000000000000000000000000006044820152606401610433565b611188838383610848565b50505050565b3330146111f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533033310000000000000000000000000000000000000000000000000000006044820152606401610433565b565b6000806000611208858561121d565b9150915061121581611262565b509392505050565b60008082516041036112535760208301516040840151606085015160001a61124787828585611418565b9450945050505061125b565b506000905060025b9250929050565b600081600481111561127657611276611a49565b0361127e5750565b600181600481111561129257611292611a49565b036112f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610433565b600281600481111561130d5761130d611a49565b03611374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610433565b600381600481111561138857611388611a49565b03611415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610433565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561144f57506000905060036114fe565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156114a3573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166114f7576000600192509250506114fe565b9150600090505b94509492505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461152b57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083601f84011261157157600080fd5b50813567ffffffffffffffff81111561158957600080fd5b60208301915083602082850101111561125b57600080fd5b60008060008060008060a087890312156115ba57600080fd5b6115c387611507565b95506020870135945060408701359350606087013567ffffffffffffffff808211156115ee57600080fd5b818901915089601f83011261160257600080fd5b81358181111561161457611614611530565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561165a5761165a611530565b816040528281528c602084870101111561167357600080fd5b8260208601602083013760006020848301015280975050505060808901359150808211156116a057600080fd5b506116ad89828a0161155f565b979a9699509497509295939492505050565b600080604083850312156116d257600080fd5b6116db83611507565b946020939093013593505050565b6000602082840312156116fb57600080fd5b61170482611507565b9392505050565b60006020828403121561171d57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561177257835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611740565b50909695505050505050565b60008060006040848603121561179357600080fd5b83359250602084013567ffffffffffffffff8111156117b157600080fd5b6117bd8682870161155f565b9497909650939450505050565b6000806000606084860312156117df57600080fd5b6117e884611507565b92506117f660208501611507565b915061180460408501611507565b90509250925092565b60008060006060848603121561182257600080fd5b61182b84611507565b925061183960208501611507565b9150604084013590509250925092565b60005b8381101561186457818101518382015260200161184c565b50506000910152565b868152600073ffffffffffffffffffffffffffffffffffffffff808816602084015280871660408401525084606083015283608083015260c060a083015282518060c08401526118c48160e0850160208701611849565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160e001979650505050505050565b6000825161190d818460208701611849565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361197757611977611917565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808202811582820484141761061157610611611917565b8082018082111561061157610611611917565b600080858511156119e757600080fd5b838611156119f457600080fd5b5050820193919092039150565b8181038181111561061157610611611917565b600081611a2357611a23611917565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220f324b0700dbbbeaf57c064d165aa16d47fc4f52aac1b0e1017b0f81c78d579af64736f6c634300081100330000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000050000000000000000000000001989d93ec04037ca64e2af7e48ff5c8fc2cea7b80000000000000000000000009f33a4809aa708d7a399fedba514e0a0d15efa85000000000000000000000000b9a0cadd13c5d534b034d878b2fca9e5a6e1e3a4000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d000000000000000000000000fa5727be643dba6599fc7f812fe60da3264a8205"
        },
        {
          "actionType": 1,
          "create2Address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "initCodeWithArgs": "",
          "contracts": [
            {
              "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
              "initCodeWithArgs": "",
              "fullyQualifiedName": "lib/ORMP/src/eco/Oracle.sol:Oracle"
            }
          ],
          "index": "2",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "deploy",
            "variables": {
              "dao": "0x040f331774Ed6BB161412B4cEDb1358B382aF3A5",
              "ormp": "0x13b2211a7cA45Db2808F6dB05557ce5347e3634e"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "1209810",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
          "txData": "0x000000000000000000000000000000000000000000000000000000000000000260a060405234801561001057600080fd5b5060405161113038038061113083398101604081905261002f91610076565b6001600160a01b03908116608052600080546001600160a01b031916929091169190911790556100a9565b80516001600160a01b038116811461007157600080fd5b919050565b6000806040838503121561008957600080fd5b6100928361005a565b91506100a06020840161005a565b90509250929050565b60805161105e6100d2600039600081816102a80152818161046701526104cd015261105e6000f3fe6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063a6f9dae111610059578063a6f9dae1146102ea578063af9e3a361461030a578063b6333d1614610337578063f3fef3a31461036757600080fd5b80638da5cb5b1461024457806391b9b82714610296578063a1dbf432146102ca57600080fd5b806354fd4d50116100bb57806354fd4d5014610162578063651b04a7146101ae578063673448dd146101de57806384cfb6801461022457600080fd5b80630a863e6c146100ed578063506146951461010f57806352f7c9881461014257600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004610b5d565b610387565b005b34801561011b57600080fd5b5061012f61012a366004610b98565b6104c9565b6040519081526020015b60405180910390f35b34801561014e57600080fd5b5061010d61015d366004610bcd565b6105e1565b34801561016e57600080fd5b50604080518082018252600581527f322e312e30000000000000000000000000000000000000000000000000000000602082015290516101399190610c53565b3480156101ba57600080fd5b506101ce6101c9366004610c66565b6106ab565b6040519015158152602001610139565b3480156101ea57600080fd5b506101ce6101f9366004610d06565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b34801561023057600080fd5b5061010d61023f366004610d21565b6106e6565b34801561025057600080fd5b506000546102719073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610139565b3480156102a257600080fd5b506102717f000000000000000000000000000000000000000000000000000000000000000081565b3480156102d657600080fd5b5061012f6102e5366004610d5d565b6107f5565b3480156102f657600080fd5b5061010d610305366004610d06565b610876565b34801561031657600080fd5b5061012f610325366004610d89565b60016020526000908152604090205481565b34801561034357600080fd5b506101ce610352366004610d06565b60026020526000908152604090205460ff1681565b34801561037357600080fd5b5061010d610382366004610da2565b61096c565b60005473ffffffffffffffffffffffffffffffffffffffff16331461040d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e6572000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6040517f5f3abe960000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f00000000000000000000000000000000000000000000000000000000000000001690635f3abe9690608401600060405180830381600087803b1580156104ab57600080fd5b505af11580156104bf573d6000803e3d6000fd5b5050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663559e7230308686866040516020016105449392919092835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b604051602081830303815290604052805190602001206040518363ffffffff1660e01b815260040161059892919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b602060405180830381865afa1580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d99190610dcc565b949350505050565b3360009081526002602052604090205460ff1661065a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21617070726f76650000000000000000000000000000000000000000000000006044820152606401610404565b600082815260016020526040908190208290555182907f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b59061069f9084815260200190565b60405180910390a25050565b60006106be6106b985610ee9565b610b04565b6106dd60408601356106d36020880188610d06565b87602001356104c9565b14949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e657200000000000000000000000000000000000000000000000000006044820152606401610404565b73ffffffffffffffffffffffffffffffffffffffff821660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168515159081179091558251938452908301527fd984ea421ae5d2a473199f85e03998a04a12f54d6f1fa183a955b3df1c0c546d910160405180910390a15050565b60008281526001602052604081205480820361086f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104049060208082526004908201527f2166656500000000000000000000000000000000000000000000000000000000604082015260600190565b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e657200000000000000000000000000000000000000000000000000006044820152606401610404565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3360009081526002602052604090205460ff166109e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21617070726f76650000000000000000000000000000000000000000000000006044820152606401610404565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610a3f576040519150601f19603f3d011682016040523d82523d6000602084013e610a44565b606091505b5050905080610aaf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f21776974686472617700000000000000000000000000000000000000000000006044820152606401610404565b8273ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6583604051610af791815260200190565b60405180910390a2505050565b600081604051602001610b179190610f8b565b604051602081830303815290604052805190602001209050919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b5857600080fd5b919050565b60008060008060808587031215610b7357600080fd5b84359350610b8360208601610b34565b93969395505050506040820135916060013590565b600080600060608486031215610bad57600080fd5b83359250610bbd60208501610b34565b9150604084013590509250925092565b60008060408385031215610be057600080fd5b50508035926020909101359150565b6000815180845260005b81811015610c1557602081850181015186830182015201610bf9565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600061086f6020830184610bef565b600080600060408486031215610c7b57600080fd5b833567ffffffffffffffff80821115610c9357600080fd5b908501906101008288031215610ca857600080fd5b90935060208501359080821115610cbe57600080fd5b818601915086601f830112610cd257600080fd5b813581811115610ce157600080fd5b876020828501011115610cf357600080fd5b6020830194508093505050509250925092565b600060208284031215610d1857600080fd5b61086f82610b34565b60008060408385031215610d3457600080fd5b610d3d83610b34565b915060208301358015158114610d5257600080fd5b809150509250929050565b60008060408385031215610d7057600080fd5b82359150610d8060208401610b34565b90509250929050565b600060208284031215610d9b57600080fd5b5035919050565b60008060408385031215610db557600080fd5b610dbe83610b34565b946020939093013593505050565b600060208284031215610dde57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715610e3857610e38610de5565b60405290565b600082601f830112610e4f57600080fd5b813567ffffffffffffffff80821115610e6a57610e6a610de5565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610eb057610eb0610de5565b81604052838152866020858801011115610ec957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006101008236031215610efc57600080fd5b610f04610e14565b610f0d83610b34565b81526020830135602082015260408301356040820152610f2f60608401610b34565b606082015260808301356080820152610f4a60a08401610b34565b60a082015260c083013560c082015260e083013567ffffffffffffffff811115610f7357600080fd5b610f7f36828601610e3e565b60e08301525092915050565b60208152600073ffffffffffffffffffffffffffffffffffffffff808451166020840152602084015160408401526040840151606084015280606085015116608084015250608083015160a083015260a083015161100160c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015160e083015260e08301516101008081850152506105d9610120840182610bef56fea26469706673582212204e15bd44f524a009ddb10dfab169b887e49170106f13f83c120155f154c3b9bc64736f6c63430008110033000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a500000000000000000000000013b2211a7ca45db2808f6db05557ce5347e3634e"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "3",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setApproved",
            "variables": {
              "operator": "0x040f331774Ed6BB161412B4cEDb1358B382aF3A5",
              "approve": true
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "151304",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x84cfb680000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a50000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "4",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setApproved",
            "variables": {
              "operator": "0x0f14341A7f464320319025540E8Fe48Ad0fe5aec",
              "approve": true
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "151304",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x84cfb6800000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec0000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "5",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setApproved",
            "variables": {
              "operator": "0xc1A3FEE4132e9285f41F5389570fD9Fbbcb10a1D",
              "approve": true
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "151304",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x84cfb680000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d0000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "6",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "changeOwner",
            "variables": {
              "newOwner": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "127326",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0xa6f9dae1000000000000000000000000855275ac7ea4cc4f324915b2eb48839e447e04bd"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "7",
          "decodedAction": {
            "referenceName": "0x114890eB7386F94eae410186F20968bFAf66142a",
            "functionName": "call",
            "variables": [
              "0x84cfb680000000000000000000000000912d7601569cbc2df8a7f0aae50bfd18e8c64d050000000000000000000000000000000000000000000000000000000000000000"
            ],
            "address": "",
            "value": "0"
          },
          "gas": "133766",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x114890eB7386F94eae410186F20968bFAf66142a",
          "txData": "0x84cfb680000000000000000000000000912d7601569cbc2df8a7f0aae50bfd18e8c64d050000000000000000000000000000000000000000000000000000000000000000"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "8",
          "decodedAction": {
            "referenceName": "0x114890eB7386F94eae410186F20968bFAf66142a",
            "functionName": "call",
            "variables": [
              "0x84cfb68000000000000000000000000040c168503b9758540e18a79907f3fd8678c13f030000000000000000000000000000000000000000000000000000000000000001"
            ],
            "address": "",
            "value": "0"
          },
          "gas": "151286",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x114890eB7386F94eae410186F20968bFAf66142a",
          "txData": "0x84cfb68000000000000000000000000040c168503b9758540e18a79907f3fd8678c13f030000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "9",
          "decodedAction": {
            "referenceName": "0x13b2211a7cA45Db2808F6dB05557ce5347e3634e",
            "functionName": "call",
            "variables": [
              "0x4ea59979000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a"
            ],
            "address": "",
            "value": "0"
          },
          "gas": "134085",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x13b2211a7cA45Db2808F6dB05557ce5347e3634e",
          "txData": "0x4ea59979000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "10",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setFee",
            "variables": {
              "chainId": "42161",
              "fee_": "40000000000000"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "151210",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x52f7c988000000000000000000000000000000000000000000000000000000000000a4b10000000000000000000000000000000000000000000000000000246139ca8000"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "11",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setFee",
            "variables": {
              "chainId": "46",
              "fee_": "2000000000000"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "151210",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x52f7c988000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000001d1a94a2000"
        }
      ],
      "unlabeledContracts": [],
      "arbitraryChain": false,
      "executorAddress": "0x7e16116661CA8d66C73612382833153911Fa03B1",
      "libraries": [],
      "gitCommit": "ec364d8a31f07d39a8f27b71bc4037675954fddd",
      "safeFundingRequest": {
        "fundsRequested": "0",
        "startingBalance": "0"
      }
    },
    {
      "safeAddress": "0x040f331774Ed6BB161412B4cEDb1358B382aF3A5",
      "moduleAddress": "0x3D75d338B4711F8a33d293a2008f07a712513402",
      "safeInitData": "0xb63e800d00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000a238cbeb142c10ef7ad8442c6d1f9e89e07e776100000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000f48f2b2d2a534e402487b3ee7c18c33aec0fe5e4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000e3993566b34e5367d1c602439997bd08c11ff70000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec00000000000000000000000052386be2397e8eac26298f733b390684203fb58000000000000000000000000053405fb4d71591e33fe07bfbc90bd82e65720ad00000000000000000000000009f33a4809aa708d7a399fedba514e0a0d15efa8500000000000000000000000000000000000000000000000000000000000001448d80ff0a000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000f2008f3301c9eada5642b5bb12fd047d3ebb2932e619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000248236d0b80000000000000000000000000000000000000000000000000000000000000000018f3301c9eada5642b5bb12fd047d3ebb2932e6190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002411ea37fc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "nonce": "6",
      "chainId": "137",
      "blockGasLimit": "30000000",
      "blockNumber": "70610319",
      "newConfig": {
        "projectName": "RING-DAO",
        "orgId": "cluanacaw000111jik4xs4wkl",
        "owners": [
          "0x00E3993566b34e5367d1C602439997BD08c11FF7",
          "0x0f14341A7f464320319025540E8Fe48Ad0fe5aec",
          "0x52386BE2397e8EAc26298F733b390684203fB580",
          "0x53405FB4d71591E33fe07bFbC90bD82E65720ad0",
          "0x9F33a4809aA708d7a399fedBa514e0A0d15EfA85"
        ],
        "mainnets": [
          "arbitrum",
          "blast",
          "crab",
          "darwinia",
          "ethereum",
          "polygon",
          "moonbeam",
          "morph"
        ],
        "testnets": [
          "sepolia",
          "arbitrum_sepolia"
        ],
        "threshold": "3",
        "saltNonce": "0"
      },
      "executionMode": 2,
      "initialState": {
        "isExecuting": false,
        "isModuleDeployed": true,
        "isSafeDeployed": true
      },
      "isSystemDeployed": true,
      "actionInputs": [
        {
          "actionType": 1,
          "create2Address": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD",
          "initCodeWithArgs": "",
          "contracts": [
            {
              "address": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD",
              "initCodeWithArgs": "",
              "fullyQualifiedName": "lib/subapi/src/SubAPIMultiSig.sol:SubAPIMultiSig"
            }
          ],
          "index": "1",
          "decodedAction": {
            "referenceName": "SubAPIMultiSig",
            "functionName": "deploy",
            "variables": {
              "signers": [
                "0x1989D93Ec04037cA64e2af7e48FF5C8Fc2cEA7B8",
                "0x9F33a4809aA708d7a399fedBa514e0A0d15EfA85",
                "0xB9a0CaDD13C5d534b034d878b2fcA9E5a6e1e3A4",
                "0xc1A3FEE4132e9285f41F5389570fD9Fbbcb10a1D",
                "0xFa5727bE643dba6599fC7F812fE60dA3264A8205"
              ],
              "threshold": "3"
            },
            "address": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD",
            "value": "0"
          },
          "gas": "2072226",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
          "txData": "0x000000000000000000000000000000000000000000000000000000000000000160806040523480156200001157600080fd5b5060405162001ec738038062001ec78339810160408190526200003491620002e5565b62000049826001600160401b03831662000051565b505062000409565b600254156200008f5760405162461bcd60e51b8152602060048201526005602482015264047533230360dc1b60448201526064015b60405180910390fd5b8151811115620000ca5760405162461bcd60e51b8152602060048201526005602482015264475332303160d81b604482015260640162000086565b6001811015620001055760405162461bcd60e51b815260206004820152600560248201526423a999181960d91b604482015260640162000086565b600160005b8351811015620002645760008482815181106200012b576200012b620003cb565b6020026020010151905060006001600160a01b0316816001600160a01b0316141580156200016357506001600160a01b038116600114155b80156200017957506001600160a01b0381163014155b8015620001985750806001600160a01b0316836001600160a01b031614155b620001ce5760405162461bcd60e51b8152602060048201526005602482015264475332303360d81b604482015260640162000086565b6001600160a01b038181166000908152602081905260409020541615620002205760405162461bcd60e51b815260206004820152600560248201526411d4cc8c0d60da1b604482015260640162000086565b6001600160a01b03928316600090815260208190526040902080546001600160a01b03191693821693909317909255806200025b81620003e1565b9150506200010a565b506001600160a01b0316600090815260208190526040902080546001600160a01b03191660019081179091559151909155600255565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002c857600080fd5b919050565b80516001600160401b0381168114620002c857600080fd5b60008060408385031215620002f957600080fd5b82516001600160401b03808211156200031157600080fd5b818501915085601f8301126200032657600080fd5b81516020828211156200033d576200033d6200029a565b8160051b604051601f19603f830116810181811086821117156200036557620003656200029a565b6040529283528183019350848101820192898411156200038457600080fd5b948201945b83861015620003ad576200039d86620002b0565b8552948201949382019362000389565b9650620003be9050878201620002cd565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200040257634e487b7160e01b600052601160045260246000fd5b5060010190565b611aae80620004196000396000f3fe6080604052600436106100b55760003560e01c8063a0e67e2b11610069578063e318b52b1161004e578063e318b52b146101bd578063e75235b8146101dd578063f8dc5dd9146101fb57600080fd5b8063a0e67e2b1461017b578063c7a823e01461019d57600080fd5b80632f54bf6e1161009a5780632f54bf6e1461010b578063694e80c31461012b578063935f9ade1461014b57600080fd5b80630589105b146100c15780630d582f13146100e957600080fd5b366100bc57005b600080fd5b6100d46100cf3660046115a1565b61021b565b60405190151581526020015b60405180910390f35b3480156100f557600080fd5b506101096101043660046116bf565b61036b565b005b34801561011757600080fd5b506100d46101263660046116e9565b6105c2565b34801561013757600080fd5b5061010961014636600461170b565b610617565b34801561015757600080fd5b506100d461016636600461170b565b60036020526000908152604090205460ff1681565b34801561018757600080fd5b50610190610731565b6040516100e09190611724565b3480156101a957600080fd5b506101096101b836600461177e565b610848565b3480156101c957600080fd5b506101096101d83660046117ca565b610a80565b3480156101e957600080fd5b506002546040519081526020016100e0565b34801561020757600080fd5b5061010961021636600461180d565b610e0a565b6000804630898989896040516020016102399695949392919061186d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602082012090915061027d8782878761109b565b8873ffffffffffffffffffffffffffffffffffffffff1688876040516102a391906118fb565b60006040518083038185875af1925050503d80600081146102e0576040519150601f19603f3d011682016040523d82523d6000602084013e6102e5565b606091505b50506000828152600360205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555190935081907f0457ea5bc67881c59a30a626040dbff6e109920907a75dc61f3465475530336e9061035790861515815260200190565b60405180910390a250509695505050505050565b61037361118e565b73ffffffffffffffffffffffffffffffffffffffff8216158015906103af575073ffffffffffffffffffffffffffffffffffffffff8216600114155b80156103d1575073ffffffffffffffffffffffffffffffffffffffff82163014155b61043c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f475332303300000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82811660009081526020819052604090205416156104cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610433565b600060208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d805473ffffffffffffffffffffffffffffffffffffffff858116808552604085208054929093167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556001808552835490911690911790915580549161055e83611946565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a180600254146105be576105be81610617565b5050565b600073ffffffffffffffffffffffffffffffffffffffff8216600114801590610611575073ffffffffffffffffffffffffffffffffffffffff8281166000908152602081905260409020541615155b92915050565b61061f61118e565b60015481111561068b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610433565b60018110156106f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230320000000000000000000000000000000000000000000000000000006044820152606401610433565b60028190556040518181527f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c939060200160405180910390a150565b6060600060015467ffffffffffffffff81111561075057610750611530565b604051908082528060200260200182016040528015610779578160200160208202803683370190505b506001600090815260208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d549192509073ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff811660011461084057808383815181106107f4576107f461197e565b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201810191909152918116600090815291829052604090912054168161083881611946565b9250506107c3565b509092915050565b6002546108569060416119ad565b81146108be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606401610433565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c849052603c812090805b600254811015610a7857366000868661090a8560416119ad565b906109168660016119c4565b6109219060416119ad565b9261092e939291906119d7565b9150915060006109748684848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111f992505050565b90508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161180156109d7575073ffffffffffffffffffffffffffffffffffffffff8181166000908152602081905260409020541615155b80156109fa575073ffffffffffffffffffffffffffffffffffffffff8116600114155b610a60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610433565b9350829150610a70905081611946565b9150506108f0565b505050505050565b610a8861118e565b73ffffffffffffffffffffffffffffffffffffffff811615801590610ac4575073ffffffffffffffffffffffffffffffffffffffff8116600114155b8015610ae6575073ffffffffffffffffffffffffffffffffffffffff81163014155b610b4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff8181166000908152602081905260409020541615610bdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff821615801590610c17575073ffffffffffffffffffffffffffffffffffffffff8216600114155b610c7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260208190526040902054811690831614610d10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208181526040808320805487871680865283862080549289167fffffffffffffffffffffffff0000000000000000000000000000000000000000938416179055968a1685528285208054821690971790965592849052825490941690915591519081527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf910160405180910390a160405173ffffffffffffffffffffffffffffffffffffffff821681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a1505050565b610e1261118e565b8060018054610e219190611a01565b1015610e89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff821615801590610ec5575073ffffffffffffffffffffffffffffffffffffffff8216600114155b610f2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260208190526040902054811690831614610fbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208190526040808220805488861684529183208054929095167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179094559181528254909116909155600180549161103683611a14565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf9060200160405180910390a180600254146110965761109681610617565b505050565b834210611104576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6f7065726174696f6e20657870697265640000000000000000000000000000006044820152606401610433565b60008381526003602052604090205460ff161561117d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6861736820616c726561647920757365640000000000000000000000000000006044820152606401610433565b611188838383610848565b50505050565b3330146111f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533033310000000000000000000000000000000000000000000000000000006044820152606401610433565b565b6000806000611208858561121d565b9150915061121581611262565b509392505050565b60008082516041036112535760208301516040840151606085015160001a61124787828585611418565b9450945050505061125b565b506000905060025b9250929050565b600081600481111561127657611276611a49565b0361127e5750565b600181600481111561129257611292611a49565b036112f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610433565b600281600481111561130d5761130d611a49565b03611374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610433565b600381600481111561138857611388611a49565b03611415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610433565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561144f57506000905060036114fe565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156114a3573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166114f7576000600192509250506114fe565b9150600090505b94509492505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461152b57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083601f84011261157157600080fd5b50813567ffffffffffffffff81111561158957600080fd5b60208301915083602082850101111561125b57600080fd5b60008060008060008060a087890312156115ba57600080fd5b6115c387611507565b95506020870135945060408701359350606087013567ffffffffffffffff808211156115ee57600080fd5b818901915089601f83011261160257600080fd5b81358181111561161457611614611530565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561165a5761165a611530565b816040528281528c602084870101111561167357600080fd5b8260208601602083013760006020848301015280975050505060808901359150808211156116a057600080fd5b506116ad89828a0161155f565b979a9699509497509295939492505050565b600080604083850312156116d257600080fd5b6116db83611507565b946020939093013593505050565b6000602082840312156116fb57600080fd5b61170482611507565b9392505050565b60006020828403121561171d57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561177257835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611740565b50909695505050505050565b60008060006040848603121561179357600080fd5b83359250602084013567ffffffffffffffff8111156117b157600080fd5b6117bd8682870161155f565b9497909650939450505050565b6000806000606084860312156117df57600080fd5b6117e884611507565b92506117f660208501611507565b915061180460408501611507565b90509250925092565b60008060006060848603121561182257600080fd5b61182b84611507565b925061183960208501611507565b9150604084013590509250925092565b60005b8381101561186457818101518382015260200161184c565b50506000910152565b868152600073ffffffffffffffffffffffffffffffffffffffff808816602084015280871660408401525084606083015283608083015260c060a083015282518060c08401526118c48160e0850160208701611849565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160e001979650505050505050565b6000825161190d818460208701611849565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361197757611977611917565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808202811582820484141761061157610611611917565b8082018082111561061157610611611917565b600080858511156119e757600080fd5b838611156119f457600080fd5b5050820193919092039150565b8181038181111561061157610611611917565b600081611a2357611a23611917565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220f324b0700dbbbeaf57c064d165aa16d47fc4f52aac1b0e1017b0f81c78d579af64736f6c634300081100330000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000050000000000000000000000001989d93ec04037ca64e2af7e48ff5c8fc2cea7b80000000000000000000000009f33a4809aa708d7a399fedba514e0a0d15efa85000000000000000000000000b9a0cadd13c5d534b034d878b2fca9e5a6e1e3a4000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d000000000000000000000000fa5727be643dba6599fc7f812fe60da3264a8205"
        },
        {
          "actionType": 1,
          "create2Address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "initCodeWithArgs": "0x60a060405234801561001057600080fd5b5060405161113038038061113083398101604081905261002f91610076565b6001600160a01b03908116608052600080546001600160a01b031916929091169190911790556100a9565b80516001600160a01b038116811461007157600080fd5b919050565b6000806040838503121561008957600080fd5b6100928361005a565b91506100a06020840161005a565b90509250929050565b60805161105e6100d2600039600081816102a80152818161046701526104cd015261105e6000f3fe6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063a6f9dae111610059578063a6f9dae1146102ea578063af9e3a361461030a578063b6333d1614610337578063f3fef3a31461036757600080fd5b80638da5cb5b1461024457806391b9b82714610296578063a1dbf432146102ca57600080fd5b806354fd4d50116100bb57806354fd4d5014610162578063651b04a7146101ae578063673448dd146101de57806384cfb6801461022457600080fd5b80630a863e6c146100ed578063506146951461010f57806352f7c9881461014257600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004610b5d565b610387565b005b34801561011b57600080fd5b5061012f61012a366004610b98565b6104c9565b6040519081526020015b60405180910390f35b34801561014e57600080fd5b5061010d61015d366004610bcd565b6105e1565b34801561016e57600080fd5b50604080518082018252600581527f322e312e30000000000000000000000000000000000000000000000000000000602082015290516101399190610c53565b3480156101ba57600080fd5b506101ce6101c9366004610c66565b6106ab565b6040519015158152602001610139565b3480156101ea57600080fd5b506101ce6101f9366004610d06565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b34801561023057600080fd5b5061010d61023f366004610d21565b6106e6565b34801561025057600080fd5b506000546102719073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610139565b3480156102a257600080fd5b506102717f000000000000000000000000000000000000000000000000000000000000000081565b3480156102d657600080fd5b5061012f6102e5366004610d5d565b6107f5565b3480156102f657600080fd5b5061010d610305366004610d06565b610876565b34801561031657600080fd5b5061012f610325366004610d89565b60016020526000908152604090205481565b34801561034357600080fd5b506101ce610352366004610d06565b60026020526000908152604090205460ff1681565b34801561037357600080fd5b5061010d610382366004610da2565b61096c565b60005473ffffffffffffffffffffffffffffffffffffffff16331461040d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e6572000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6040517f5f3abe960000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f00000000000000000000000000000000000000000000000000000000000000001690635f3abe9690608401600060405180830381600087803b1580156104ab57600080fd5b505af11580156104bf573d6000803e3d6000fd5b5050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663559e7230308686866040516020016105449392919092835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b604051602081830303815290604052805190602001206040518363ffffffff1660e01b815260040161059892919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b602060405180830381865afa1580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d99190610dcc565b949350505050565b3360009081526002602052604090205460ff1661065a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21617070726f76650000000000000000000000000000000000000000000000006044820152606401610404565b600082815260016020526040908190208290555182907f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b59061069f9084815260200190565b60405180910390a25050565b60006106be6106b985610ee9565b610b04565b6106dd60408601356106d36020880188610d06565b87602001356104c9565b14949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e657200000000000000000000000000000000000000000000000000006044820152606401610404565b73ffffffffffffffffffffffffffffffffffffffff821660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168515159081179091558251938452908301527fd984ea421ae5d2a473199f85e03998a04a12f54d6f1fa183a955b3df1c0c546d910160405180910390a15050565b60008281526001602052604081205480820361086f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104049060208082526004908201527f2166656500000000000000000000000000000000000000000000000000000000604082015260600190565b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e657200000000000000000000000000000000000000000000000000006044820152606401610404565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3360009081526002602052604090205460ff166109e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21617070726f76650000000000000000000000000000000000000000000000006044820152606401610404565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610a3f576040519150601f19603f3d011682016040523d82523d6000602084013e610a44565b606091505b5050905080610aaf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f21776974686472617700000000000000000000000000000000000000000000006044820152606401610404565b8273ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6583604051610af791815260200190565b60405180910390a2505050565b600081604051602001610b179190610f8b565b604051602081830303815290604052805190602001209050919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b5857600080fd5b919050565b60008060008060808587031215610b7357600080fd5b84359350610b8360208601610b34565b93969395505050506040820135916060013590565b600080600060608486031215610bad57600080fd5b83359250610bbd60208501610b34565b9150604084013590509250925092565b60008060408385031215610be057600080fd5b50508035926020909101359150565b6000815180845260005b81811015610c1557602081850181015186830182015201610bf9565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600061086f6020830184610bef565b600080600060408486031215610c7b57600080fd5b833567ffffffffffffffff80821115610c9357600080fd5b908501906101008288031215610ca857600080fd5b90935060208501359080821115610cbe57600080fd5b818601915086601f830112610cd257600080fd5b813581811115610ce157600080fd5b876020828501011115610cf357600080fd5b6020830194508093505050509250925092565b600060208284031215610d1857600080fd5b61086f82610b34565b60008060408385031215610d3457600080fd5b610d3d83610b34565b915060208301358015158114610d5257600080fd5b809150509250929050565b60008060408385031215610d7057600080fd5b82359150610d8060208401610b34565b90509250929050565b600060208284031215610d9b57600080fd5b5035919050565b60008060408385031215610db557600080fd5b610dbe83610b34565b946020939093013593505050565b600060208284031215610dde57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715610e3857610e38610de5565b60405290565b600082601f830112610e4f57600080fd5b813567ffffffffffffffff80821115610e6a57610e6a610de5565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610eb057610eb0610de5565b81604052838152866020858801011115610ec957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006101008236031215610efc57600080fd5b610f04610e14565b610f0d83610b34565b81526020830135602082015260408301356040820152610f2f60608401610b34565b606082015260808301356080820152610f4a60a08401610b34565b60a082015260c083013560c082015260e083013567ffffffffffffffff811115610f7357600080fd5b610f7f36828601610e3e565b60e08301525092915050565b60208152600073ffffffffffffffffffffffffffffffffffffffff808451166020840152602084015160408401526040840151606084015280606085015116608084015250608083015160a083015260a083015161100160c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015160e083015260e08301516101008081850152506105d9610120840182610bef56fea26469706673582212204e15bd44f524a009ddb10dfab169b887e49170106f13f83c120155f154c3b9bc64736f6c63430008110033000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a500000000000000000000000013b2211a7ca45db2808f6db05557ce5347e3634e",
          "contracts": [
            {
              "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
              "initCodeWithArgs": "",
              "fullyQualifiedName": "lib/ORMP/src/eco/Oracle.sol:Oracle"
            }
          ],
          "index": "2",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "deploy",
            "variables": {
              "dao": "0x040f331774Ed6BB161412B4cEDb1358B382aF3A5",
              "ormp": "0x13b2211a7cA45Db2808F6dB05557ce5347e3634e"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "1209810",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
          "txData": "0x000000000000000000000000000000000000000000000000000000000000000260a060405234801561001057600080fd5b5060405161113038038061113083398101604081905261002f91610076565b6001600160a01b03908116608052600080546001600160a01b031916929091169190911790556100a9565b80516001600160a01b038116811461007157600080fd5b919050565b6000806040838503121561008957600080fd5b6100928361005a565b91506100a06020840161005a565b90509250929050565b60805161105e6100d2600039600081816102a80152818161046701526104cd015261105e6000f3fe6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063a6f9dae111610059578063a6f9dae1146102ea578063af9e3a361461030a578063b6333d1614610337578063f3fef3a31461036757600080fd5b80638da5cb5b1461024457806391b9b82714610296578063a1dbf432146102ca57600080fd5b806354fd4d50116100bb57806354fd4d5014610162578063651b04a7146101ae578063673448dd146101de57806384cfb6801461022457600080fd5b80630a863e6c146100ed578063506146951461010f57806352f7c9881461014257600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004610b5d565b610387565b005b34801561011b57600080fd5b5061012f61012a366004610b98565b6104c9565b6040519081526020015b60405180910390f35b34801561014e57600080fd5b5061010d61015d366004610bcd565b6105e1565b34801561016e57600080fd5b50604080518082018252600581527f322e312e30000000000000000000000000000000000000000000000000000000602082015290516101399190610c53565b3480156101ba57600080fd5b506101ce6101c9366004610c66565b6106ab565b6040519015158152602001610139565b3480156101ea57600080fd5b506101ce6101f9366004610d06565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b34801561023057600080fd5b5061010d61023f366004610d21565b6106e6565b34801561025057600080fd5b506000546102719073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610139565b3480156102a257600080fd5b506102717f000000000000000000000000000000000000000000000000000000000000000081565b3480156102d657600080fd5b5061012f6102e5366004610d5d565b6107f5565b3480156102f657600080fd5b5061010d610305366004610d06565b610876565b34801561031657600080fd5b5061012f610325366004610d89565b60016020526000908152604090205481565b34801561034357600080fd5b506101ce610352366004610d06565b60026020526000908152604090205460ff1681565b34801561037357600080fd5b5061010d610382366004610da2565b61096c565b60005473ffffffffffffffffffffffffffffffffffffffff16331461040d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e6572000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6040517f5f3abe960000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f00000000000000000000000000000000000000000000000000000000000000001690635f3abe9690608401600060405180830381600087803b1580156104ab57600080fd5b505af11580156104bf573d6000803e3d6000fd5b5050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663559e7230308686866040516020016105449392919092835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b604051602081830303815290604052805190602001206040518363ffffffff1660e01b815260040161059892919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b602060405180830381865afa1580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d99190610dcc565b949350505050565b3360009081526002602052604090205460ff1661065a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21617070726f76650000000000000000000000000000000000000000000000006044820152606401610404565b600082815260016020526040908190208290555182907f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b59061069f9084815260200190565b60405180910390a25050565b60006106be6106b985610ee9565b610b04565b6106dd60408601356106d36020880188610d06565b87602001356104c9565b14949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e657200000000000000000000000000000000000000000000000000006044820152606401610404565b73ffffffffffffffffffffffffffffffffffffffff821660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168515159081179091558251938452908301527fd984ea421ae5d2a473199f85e03998a04a12f54d6f1fa183a955b3df1c0c546d910160405180910390a15050565b60008281526001602052604081205480820361086f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104049060208082526004908201527f2166656500000000000000000000000000000000000000000000000000000000604082015260600190565b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e657200000000000000000000000000000000000000000000000000006044820152606401610404565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3360009081526002602052604090205460ff166109e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21617070726f76650000000000000000000000000000000000000000000000006044820152606401610404565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610a3f576040519150601f19603f3d011682016040523d82523d6000602084013e610a44565b606091505b5050905080610aaf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f21776974686472617700000000000000000000000000000000000000000000006044820152606401610404565b8273ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6583604051610af791815260200190565b60405180910390a2505050565b600081604051602001610b179190610f8b565b604051602081830303815290604052805190602001209050919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b5857600080fd5b919050565b60008060008060808587031215610b7357600080fd5b84359350610b8360208601610b34565b93969395505050506040820135916060013590565b600080600060608486031215610bad57600080fd5b83359250610bbd60208501610b34565b9150604084013590509250925092565b60008060408385031215610be057600080fd5b50508035926020909101359150565b6000815180845260005b81811015610c1557602081850181015186830182015201610bf9565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600061086f6020830184610bef565b600080600060408486031215610c7b57600080fd5b833567ffffffffffffffff80821115610c9357600080fd5b908501906101008288031215610ca857600080fd5b90935060208501359080821115610cbe57600080fd5b818601915086601f830112610cd257600080fd5b813581811115610ce157600080fd5b876020828501011115610cf357600080fd5b6020830194508093505050509250925092565b600060208284031215610d1857600080fd5b61086f82610b34565b60008060408385031215610d3457600080fd5b610d3d83610b34565b915060208301358015158114610d5257600080fd5b809150509250929050565b60008060408385031215610d7057600080fd5b82359150610d8060208401610b34565b90509250929050565b600060208284031215610d9b57600080fd5b5035919050565b60008060408385031215610db557600080fd5b610dbe83610b34565b946020939093013593505050565b600060208284031215610dde57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715610e3857610e38610de5565b60405290565b600082601f830112610e4f57600080fd5b813567ffffffffffffffff80821115610e6a57610e6a610de5565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610eb057610eb0610de5565b81604052838152866020858801011115610ec957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006101008236031215610efc57600080fd5b610f04610e14565b610f0d83610b34565b81526020830135602082015260408301356040820152610f2f60608401610b34565b606082015260808301356080820152610f4a60a08401610b34565b60a082015260c083013560c082015260e083013567ffffffffffffffff811115610f7357600080fd5b610f7f36828601610e3e565b60e08301525092915050565b60208152600073ffffffffffffffffffffffffffffffffffffffff808451166020840152602084015160408401526040840151606084015280606085015116608084015250608083015160a083015260a083015161100160c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015160e083015260e08301516101008081850152506105d9610120840182610bef56fea26469706673582212204e15bd44f524a009ddb10dfab169b887e49170106f13f83c120155f154c3b9bc64736f6c63430008110033000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a500000000000000000000000013b2211a7ca45db2808f6db05557ce5347e3634e"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "3",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setApproved",
            "variables": {
              "operator": "0x040f331774Ed6BB161412B4cEDb1358B382aF3A5",
              "approve": true
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "151304",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x84cfb680000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a50000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "4",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setApproved",
            "variables": {
              "operator": "0x0f14341A7f464320319025540E8Fe48Ad0fe5aec",
              "approve": true
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "151304",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x84cfb6800000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec0000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "5",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setApproved",
            "variables": {
              "operator": "0xc1A3FEE4132e9285f41F5389570fD9Fbbcb10a1D",
              "approve": true
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "151304",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x84cfb680000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d0000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "6",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "changeOwner",
            "variables": {
              "newOwner": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "127326",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0xa6f9dae1000000000000000000000000855275ac7ea4cc4f324915b2eb48839e447e04bd"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "7",
          "decodedAction": {
            "referenceName": "0x114890eB7386F94eae410186F20968bFAf66142a",
            "functionName": "call",
            "variables": [
              "0x84cfb680000000000000000000000000912d7601569cbc2df8a7f0aae50bfd18e8c64d050000000000000000000000000000000000000000000000000000000000000000"
            ],
            "address": "",
            "value": "0"
          },
          "gas": "133766",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x114890eB7386F94eae410186F20968bFAf66142a",
          "txData": "0x84cfb680000000000000000000000000912d7601569cbc2df8a7f0aae50bfd18e8c64d050000000000000000000000000000000000000000000000000000000000000000"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "8",
          "decodedAction": {
            "referenceName": "0x114890eB7386F94eae410186F20968bFAf66142a",
            "functionName": "call",
            "variables": [
              "0x84cfb68000000000000000000000000040c168503b9758540e18a79907f3fd8678c13f030000000000000000000000000000000000000000000000000000000000000001"
            ],
            "address": "",
            "value": "0"
          },
          "gas": "151286",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x114890eB7386F94eae410186F20968bFAf66142a",
          "txData": "0x84cfb68000000000000000000000000040c168503b9758540e18a79907f3fd8678c13f030000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "9",
          "decodedAction": {
            "referenceName": "0x13b2211a7cA45Db2808F6dB05557ce5347e3634e",
            "functionName": "call",
            "variables": [
              "0x4ea59979000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a"
            ],
            "address": "",
            "value": "0"
          },
          "gas": "134085",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x13b2211a7cA45Db2808F6dB05557ce5347e3634e",
          "txData": "0x4ea59979000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "10",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setFee",
            "variables": {
              "chainId": "46",
              "fee_": "10000000000000000"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "151210",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x52f7c988000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000002386f26fc10000"
        }
      ],
      "unlabeledContracts": [],
      "arbitraryChain": false,
      "executorAddress": "0x7e16116661CA8d66C73612382833153911Fa03B1",
      "libraries": [],
      "gitCommit": "ec364d8a31f07d39a8f27b71bc4037675954fddd",
      "safeFundingRequest": {
        "fundsRequested": "0",
        "startingBalance": "0"
      }
    },
    {
      "safeAddress": "0x040f331774Ed6BB161412B4cEDb1358B382aF3A5",
      "moduleAddress": "0x3D75d338B4711F8a33d293a2008f07a712513402",
      "safeInitData": "0xb63e800d00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000a238cbeb142c10ef7ad8442c6d1f9e89e07e776100000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000f48f2b2d2a534e402487b3ee7c18c33aec0fe5e4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000e3993566b34e5367d1c602439997bd08c11ff70000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec00000000000000000000000052386be2397e8eac26298f733b390684203fb58000000000000000000000000053405fb4d71591e33fe07bfbc90bd82e65720ad00000000000000000000000009f33a4809aa708d7a399fedba514e0a0d15efa8500000000000000000000000000000000000000000000000000000000000001448d80ff0a000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000f2008f3301c9eada5642b5bb12fd047d3ebb2932e619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000248236d0b80000000000000000000000000000000000000000000000000000000000000000018f3301c9eada5642b5bb12fd047d3ebb2932e6190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002411ea37fc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "nonce": "6",
      "chainId": "1284",
      "blockGasLimit": "60000000",
      "blockNumber": "10563737",
      "newConfig": {
        "projectName": "RING-DAO",
        "orgId": "cluanacaw000111jik4xs4wkl",
        "owners": [
          "0x00E3993566b34e5367d1C602439997BD08c11FF7",
          "0x0f14341A7f464320319025540E8Fe48Ad0fe5aec",
          "0x52386BE2397e8EAc26298F733b390684203fB580",
          "0x53405FB4d71591E33fe07bFbC90bD82E65720ad0",
          "0x9F33a4809aA708d7a399fedBa514e0A0d15EfA85"
        ],
        "mainnets": [
          "arbitrum",
          "blast",
          "crab",
          "darwinia",
          "ethereum",
          "polygon",
          "moonbeam",
          "morph"
        ],
        "testnets": [
          "sepolia",
          "arbitrum_sepolia"
        ],
        "threshold": "3",
        "saltNonce": "0"
      },
      "executionMode": 2,
      "initialState": {
        "isExecuting": false,
        "isModuleDeployed": true,
        "isSafeDeployed": true
      },
      "isSystemDeployed": true,
      "actionInputs": [
        {
          "actionType": 1,
          "create2Address": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD",
          "initCodeWithArgs": "",
          "contracts": [
            {
              "address": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD",
              "initCodeWithArgs": "",
              "fullyQualifiedName": "lib/subapi/src/SubAPIMultiSig.sol:SubAPIMultiSig"
            }
          ],
          "index": "1",
          "decodedAction": {
            "referenceName": "SubAPIMultiSig",
            "functionName": "deploy",
            "variables": {
              "signers": [
                "0x1989D93Ec04037cA64e2af7e48FF5C8Fc2cEA7B8",
                "0x9F33a4809aA708d7a399fedBa514e0A0d15EfA85",
                "0xB9a0CaDD13C5d534b034d878b2fcA9E5a6e1e3A4",
                "0xc1A3FEE4132e9285f41F5389570fD9Fbbcb10a1D",
                "0xFa5727bE643dba6599fC7F812fE60dA3264A8205"
              ],
              "threshold": "3"
            },
            "address": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD",
            "value": "0"
          },
          "gas": "10500000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
          "txData": "0x000000000000000000000000000000000000000000000000000000000000000160806040523480156200001157600080fd5b5060405162001ec738038062001ec78339810160408190526200003491620002e5565b62000049826001600160401b03831662000051565b505062000409565b600254156200008f5760405162461bcd60e51b8152602060048201526005602482015264047533230360dc1b60448201526064015b60405180910390fd5b8151811115620000ca5760405162461bcd60e51b8152602060048201526005602482015264475332303160d81b604482015260640162000086565b6001811015620001055760405162461bcd60e51b815260206004820152600560248201526423a999181960d91b604482015260640162000086565b600160005b8351811015620002645760008482815181106200012b576200012b620003cb565b6020026020010151905060006001600160a01b0316816001600160a01b0316141580156200016357506001600160a01b038116600114155b80156200017957506001600160a01b0381163014155b8015620001985750806001600160a01b0316836001600160a01b031614155b620001ce5760405162461bcd60e51b8152602060048201526005602482015264475332303360d81b604482015260640162000086565b6001600160a01b038181166000908152602081905260409020541615620002205760405162461bcd60e51b815260206004820152600560248201526411d4cc8c0d60da1b604482015260640162000086565b6001600160a01b03928316600090815260208190526040902080546001600160a01b03191693821693909317909255806200025b81620003e1565b9150506200010a565b506001600160a01b0316600090815260208190526040902080546001600160a01b03191660019081179091559151909155600255565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002c857600080fd5b919050565b80516001600160401b0381168114620002c857600080fd5b60008060408385031215620002f957600080fd5b82516001600160401b03808211156200031157600080fd5b818501915085601f8301126200032657600080fd5b81516020828211156200033d576200033d6200029a565b8160051b604051601f19603f830116810181811086821117156200036557620003656200029a565b6040529283528183019350848101820192898411156200038457600080fd5b948201945b83861015620003ad576200039d86620002b0565b8552948201949382019362000389565b9650620003be9050878201620002cd565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200040257634e487b7160e01b600052601160045260246000fd5b5060010190565b611aae80620004196000396000f3fe6080604052600436106100b55760003560e01c8063a0e67e2b11610069578063e318b52b1161004e578063e318b52b146101bd578063e75235b8146101dd578063f8dc5dd9146101fb57600080fd5b8063a0e67e2b1461017b578063c7a823e01461019d57600080fd5b80632f54bf6e1161009a5780632f54bf6e1461010b578063694e80c31461012b578063935f9ade1461014b57600080fd5b80630589105b146100c15780630d582f13146100e957600080fd5b366100bc57005b600080fd5b6100d46100cf3660046115a1565b61021b565b60405190151581526020015b60405180910390f35b3480156100f557600080fd5b506101096101043660046116bf565b61036b565b005b34801561011757600080fd5b506100d46101263660046116e9565b6105c2565b34801561013757600080fd5b5061010961014636600461170b565b610617565b34801561015757600080fd5b506100d461016636600461170b565b60036020526000908152604090205460ff1681565b34801561018757600080fd5b50610190610731565b6040516100e09190611724565b3480156101a957600080fd5b506101096101b836600461177e565b610848565b3480156101c957600080fd5b506101096101d83660046117ca565b610a80565b3480156101e957600080fd5b506002546040519081526020016100e0565b34801561020757600080fd5b5061010961021636600461180d565b610e0a565b6000804630898989896040516020016102399695949392919061186d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602082012090915061027d8782878761109b565b8873ffffffffffffffffffffffffffffffffffffffff1688876040516102a391906118fb565b60006040518083038185875af1925050503d80600081146102e0576040519150601f19603f3d011682016040523d82523d6000602084013e6102e5565b606091505b50506000828152600360205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555190935081907f0457ea5bc67881c59a30a626040dbff6e109920907a75dc61f3465475530336e9061035790861515815260200190565b60405180910390a250509695505050505050565b61037361118e565b73ffffffffffffffffffffffffffffffffffffffff8216158015906103af575073ffffffffffffffffffffffffffffffffffffffff8216600114155b80156103d1575073ffffffffffffffffffffffffffffffffffffffff82163014155b61043c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f475332303300000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82811660009081526020819052604090205416156104cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610433565b600060208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d805473ffffffffffffffffffffffffffffffffffffffff858116808552604085208054929093167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556001808552835490911690911790915580549161055e83611946565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a180600254146105be576105be81610617565b5050565b600073ffffffffffffffffffffffffffffffffffffffff8216600114801590610611575073ffffffffffffffffffffffffffffffffffffffff8281166000908152602081905260409020541615155b92915050565b61061f61118e565b60015481111561068b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610433565b60018110156106f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230320000000000000000000000000000000000000000000000000000006044820152606401610433565b60028190556040518181527f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c939060200160405180910390a150565b6060600060015467ffffffffffffffff81111561075057610750611530565b604051908082528060200260200182016040528015610779578160200160208202803683370190505b506001600090815260208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d549192509073ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff811660011461084057808383815181106107f4576107f461197e565b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201810191909152918116600090815291829052604090912054168161083881611946565b9250506107c3565b509092915050565b6002546108569060416119ad565b81146108be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606401610433565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c849052603c812090805b600254811015610a7857366000868661090a8560416119ad565b906109168660016119c4565b6109219060416119ad565b9261092e939291906119d7565b9150915060006109748684848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111f992505050565b90508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161180156109d7575073ffffffffffffffffffffffffffffffffffffffff8181166000908152602081905260409020541615155b80156109fa575073ffffffffffffffffffffffffffffffffffffffff8116600114155b610a60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610433565b9350829150610a70905081611946565b9150506108f0565b505050505050565b610a8861118e565b73ffffffffffffffffffffffffffffffffffffffff811615801590610ac4575073ffffffffffffffffffffffffffffffffffffffff8116600114155b8015610ae6575073ffffffffffffffffffffffffffffffffffffffff81163014155b610b4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff8181166000908152602081905260409020541615610bdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff821615801590610c17575073ffffffffffffffffffffffffffffffffffffffff8216600114155b610c7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260208190526040902054811690831614610d10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208181526040808320805487871680865283862080549289167fffffffffffffffffffffffff0000000000000000000000000000000000000000938416179055968a1685528285208054821690971790965592849052825490941690915591519081527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf910160405180910390a160405173ffffffffffffffffffffffffffffffffffffffff821681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a1505050565b610e1261118e565b8060018054610e219190611a01565b1015610e89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff821615801590610ec5575073ffffffffffffffffffffffffffffffffffffffff8216600114155b610f2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260208190526040902054811690831614610fbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208190526040808220805488861684529183208054929095167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179094559181528254909116909155600180549161103683611a14565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf9060200160405180910390a180600254146110965761109681610617565b505050565b834210611104576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6f7065726174696f6e20657870697265640000000000000000000000000000006044820152606401610433565b60008381526003602052604090205460ff161561117d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6861736820616c726561647920757365640000000000000000000000000000006044820152606401610433565b611188838383610848565b50505050565b3330146111f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533033310000000000000000000000000000000000000000000000000000006044820152606401610433565b565b6000806000611208858561121d565b9150915061121581611262565b509392505050565b60008082516041036112535760208301516040840151606085015160001a61124787828585611418565b9450945050505061125b565b506000905060025b9250929050565b600081600481111561127657611276611a49565b0361127e5750565b600181600481111561129257611292611a49565b036112f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610433565b600281600481111561130d5761130d611a49565b03611374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610433565b600381600481111561138857611388611a49565b03611415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610433565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561144f57506000905060036114fe565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156114a3573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166114f7576000600192509250506114fe565b9150600090505b94509492505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461152b57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083601f84011261157157600080fd5b50813567ffffffffffffffff81111561158957600080fd5b60208301915083602082850101111561125b57600080fd5b60008060008060008060a087890312156115ba57600080fd5b6115c387611507565b95506020870135945060408701359350606087013567ffffffffffffffff808211156115ee57600080fd5b818901915089601f83011261160257600080fd5b81358181111561161457611614611530565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561165a5761165a611530565b816040528281528c602084870101111561167357600080fd5b8260208601602083013760006020848301015280975050505060808901359150808211156116a057600080fd5b506116ad89828a0161155f565b979a9699509497509295939492505050565b600080604083850312156116d257600080fd5b6116db83611507565b946020939093013593505050565b6000602082840312156116fb57600080fd5b61170482611507565b9392505050565b60006020828403121561171d57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561177257835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611740565b50909695505050505050565b60008060006040848603121561179357600080fd5b83359250602084013567ffffffffffffffff8111156117b157600080fd5b6117bd8682870161155f565b9497909650939450505050565b6000806000606084860312156117df57600080fd5b6117e884611507565b92506117f660208501611507565b915061180460408501611507565b90509250925092565b60008060006060848603121561182257600080fd5b61182b84611507565b925061183960208501611507565b9150604084013590509250925092565b60005b8381101561186457818101518382015260200161184c565b50506000910152565b868152600073ffffffffffffffffffffffffffffffffffffffff808816602084015280871660408401525084606083015283608083015260c060a083015282518060c08401526118c48160e0850160208701611849565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160e001979650505050505050565b6000825161190d818460208701611849565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361197757611977611917565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808202811582820484141761061157610611611917565b8082018082111561061157610611611917565b600080858511156119e757600080fd5b838611156119f457600080fd5b5050820193919092039150565b8181038181111561061157610611611917565b600081611a2357611a23611917565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220f324b0700dbbbeaf57c064d165aa16d47fc4f52aac1b0e1017b0f81c78d579af64736f6c634300081100330000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000050000000000000000000000001989d93ec04037ca64e2af7e48ff5c8fc2cea7b80000000000000000000000009f33a4809aa708d7a399fedba514e0a0d15efa85000000000000000000000000b9a0cadd13c5d534b034d878b2fca9e5a6e1e3a4000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d000000000000000000000000fa5727be643dba6599fc7f812fe60da3264a8205"
        },
        {
          "actionType": 1,
          "create2Address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "initCodeWithArgs": "0x60a060405234801561001057600080fd5b5060405161113038038061113083398101604081905261002f91610076565b6001600160a01b03908116608052600080546001600160a01b031916929091169190911790556100a9565b80516001600160a01b038116811461007157600080fd5b919050565b6000806040838503121561008957600080fd5b6100928361005a565b91506100a06020840161005a565b90509250929050565b60805161105e6100d2600039600081816102a80152818161046701526104cd015261105e6000f3fe6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063a6f9dae111610059578063a6f9dae1146102ea578063af9e3a361461030a578063b6333d1614610337578063f3fef3a31461036757600080fd5b80638da5cb5b1461024457806391b9b82714610296578063a1dbf432146102ca57600080fd5b806354fd4d50116100bb57806354fd4d5014610162578063651b04a7146101ae578063673448dd146101de57806384cfb6801461022457600080fd5b80630a863e6c146100ed578063506146951461010f57806352f7c9881461014257600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004610b5d565b610387565b005b34801561011b57600080fd5b5061012f61012a366004610b98565b6104c9565b6040519081526020015b60405180910390f35b34801561014e57600080fd5b5061010d61015d366004610bcd565b6105e1565b34801561016e57600080fd5b50604080518082018252600581527f322e312e30000000000000000000000000000000000000000000000000000000602082015290516101399190610c53565b3480156101ba57600080fd5b506101ce6101c9366004610c66565b6106ab565b6040519015158152602001610139565b3480156101ea57600080fd5b506101ce6101f9366004610d06565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b34801561023057600080fd5b5061010d61023f366004610d21565b6106e6565b34801561025057600080fd5b506000546102719073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610139565b3480156102a257600080fd5b506102717f000000000000000000000000000000000000000000000000000000000000000081565b3480156102d657600080fd5b5061012f6102e5366004610d5d565b6107f5565b3480156102f657600080fd5b5061010d610305366004610d06565b610876565b34801561031657600080fd5b5061012f610325366004610d89565b60016020526000908152604090205481565b34801561034357600080fd5b506101ce610352366004610d06565b60026020526000908152604090205460ff1681565b34801561037357600080fd5b5061010d610382366004610da2565b61096c565b60005473ffffffffffffffffffffffffffffffffffffffff16331461040d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e6572000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6040517f5f3abe960000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f00000000000000000000000000000000000000000000000000000000000000001690635f3abe9690608401600060405180830381600087803b1580156104ab57600080fd5b505af11580156104bf573d6000803e3d6000fd5b5050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663559e7230308686866040516020016105449392919092835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b604051602081830303815290604052805190602001206040518363ffffffff1660e01b815260040161059892919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b602060405180830381865afa1580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d99190610dcc565b949350505050565b3360009081526002602052604090205460ff1661065a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21617070726f76650000000000000000000000000000000000000000000000006044820152606401610404565b600082815260016020526040908190208290555182907f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b59061069f9084815260200190565b60405180910390a25050565b60006106be6106b985610ee9565b610b04565b6106dd60408601356106d36020880188610d06565b87602001356104c9565b14949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e657200000000000000000000000000000000000000000000000000006044820152606401610404565b73ffffffffffffffffffffffffffffffffffffffff821660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168515159081179091558251938452908301527fd984ea421ae5d2a473199f85e03998a04a12f54d6f1fa183a955b3df1c0c546d910160405180910390a15050565b60008281526001602052604081205480820361086f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104049060208082526004908201527f2166656500000000000000000000000000000000000000000000000000000000604082015260600190565b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e657200000000000000000000000000000000000000000000000000006044820152606401610404565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3360009081526002602052604090205460ff166109e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21617070726f76650000000000000000000000000000000000000000000000006044820152606401610404565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610a3f576040519150601f19603f3d011682016040523d82523d6000602084013e610a44565b606091505b5050905080610aaf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f21776974686472617700000000000000000000000000000000000000000000006044820152606401610404565b8273ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6583604051610af791815260200190565b60405180910390a2505050565b600081604051602001610b179190610f8b565b604051602081830303815290604052805190602001209050919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b5857600080fd5b919050565b60008060008060808587031215610b7357600080fd5b84359350610b8360208601610b34565b93969395505050506040820135916060013590565b600080600060608486031215610bad57600080fd5b83359250610bbd60208501610b34565b9150604084013590509250925092565b60008060408385031215610be057600080fd5b50508035926020909101359150565b6000815180845260005b81811015610c1557602081850181015186830182015201610bf9565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600061086f6020830184610bef565b600080600060408486031215610c7b57600080fd5b833567ffffffffffffffff80821115610c9357600080fd5b908501906101008288031215610ca857600080fd5b90935060208501359080821115610cbe57600080fd5b818601915086601f830112610cd257600080fd5b813581811115610ce157600080fd5b876020828501011115610cf357600080fd5b6020830194508093505050509250925092565b600060208284031215610d1857600080fd5b61086f82610b34565b60008060408385031215610d3457600080fd5b610d3d83610b34565b915060208301358015158114610d5257600080fd5b809150509250929050565b60008060408385031215610d7057600080fd5b82359150610d8060208401610b34565b90509250929050565b600060208284031215610d9b57600080fd5b5035919050565b60008060408385031215610db557600080fd5b610dbe83610b34565b946020939093013593505050565b600060208284031215610dde57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715610e3857610e38610de5565b60405290565b600082601f830112610e4f57600080fd5b813567ffffffffffffffff80821115610e6a57610e6a610de5565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610eb057610eb0610de5565b81604052838152866020858801011115610ec957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006101008236031215610efc57600080fd5b610f04610e14565b610f0d83610b34565b81526020830135602082015260408301356040820152610f2f60608401610b34565b606082015260808301356080820152610f4a60a08401610b34565b60a082015260c083013560c082015260e083013567ffffffffffffffff811115610f7357600080fd5b610f7f36828601610e3e565b60e08301525092915050565b60208152600073ffffffffffffffffffffffffffffffffffffffff808451166020840152602084015160408401526040840151606084015280606085015116608084015250608083015160a083015260a083015161100160c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015160e083015260e08301516101008081850152506105d9610120840182610bef56fea26469706673582212204e15bd44f524a009ddb10dfab169b887e49170106f13f83c120155f154c3b9bc64736f6c63430008110033000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a500000000000000000000000013b2211a7ca45db2808f6db05557ce5347e3634e",
          "contracts": [
            {
              "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
              "initCodeWithArgs": "",
              "fullyQualifiedName": "lib/ORMP/src/eco/Oracle.sol:Oracle"
            }
          ],
          "index": "2",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "deploy",
            "variables": {
              "dao": "0x040f331774Ed6BB161412B4cEDb1358B382aF3A5",
              "ormp": "0x13b2211a7cA45Db2808F6dB05557ce5347e3634e"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "10500000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
          "txData": "0x000000000000000000000000000000000000000000000000000000000000000260a060405234801561001057600080fd5b5060405161113038038061113083398101604081905261002f91610076565b6001600160a01b03908116608052600080546001600160a01b031916929091169190911790556100a9565b80516001600160a01b038116811461007157600080fd5b919050565b6000806040838503121561008957600080fd5b6100928361005a565b91506100a06020840161005a565b90509250929050565b60805161105e6100d2600039600081816102a80152818161046701526104cd015261105e6000f3fe6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063a6f9dae111610059578063a6f9dae1146102ea578063af9e3a361461030a578063b6333d1614610337578063f3fef3a31461036757600080fd5b80638da5cb5b1461024457806391b9b82714610296578063a1dbf432146102ca57600080fd5b806354fd4d50116100bb57806354fd4d5014610162578063651b04a7146101ae578063673448dd146101de57806384cfb6801461022457600080fd5b80630a863e6c146100ed578063506146951461010f57806352f7c9881461014257600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004610b5d565b610387565b005b34801561011b57600080fd5b5061012f61012a366004610b98565b6104c9565b6040519081526020015b60405180910390f35b34801561014e57600080fd5b5061010d61015d366004610bcd565b6105e1565b34801561016e57600080fd5b50604080518082018252600581527f322e312e30000000000000000000000000000000000000000000000000000000602082015290516101399190610c53565b3480156101ba57600080fd5b506101ce6101c9366004610c66565b6106ab565b6040519015158152602001610139565b3480156101ea57600080fd5b506101ce6101f9366004610d06565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b34801561023057600080fd5b5061010d61023f366004610d21565b6106e6565b34801561025057600080fd5b506000546102719073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610139565b3480156102a257600080fd5b506102717f000000000000000000000000000000000000000000000000000000000000000081565b3480156102d657600080fd5b5061012f6102e5366004610d5d565b6107f5565b3480156102f657600080fd5b5061010d610305366004610d06565b610876565b34801561031657600080fd5b5061012f610325366004610d89565b60016020526000908152604090205481565b34801561034357600080fd5b506101ce610352366004610d06565b60026020526000908152604090205460ff1681565b34801561037357600080fd5b5061010d610382366004610da2565b61096c565b60005473ffffffffffffffffffffffffffffffffffffffff16331461040d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e6572000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6040517f5f3abe960000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f00000000000000000000000000000000000000000000000000000000000000001690635f3abe9690608401600060405180830381600087803b1580156104ab57600080fd5b505af11580156104bf573d6000803e3d6000fd5b5050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663559e7230308686866040516020016105449392919092835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b604051602081830303815290604052805190602001206040518363ffffffff1660e01b815260040161059892919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b602060405180830381865afa1580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d99190610dcc565b949350505050565b3360009081526002602052604090205460ff1661065a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21617070726f76650000000000000000000000000000000000000000000000006044820152606401610404565b600082815260016020526040908190208290555182907f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b59061069f9084815260200190565b60405180910390a25050565b60006106be6106b985610ee9565b610b04565b6106dd60408601356106d36020880188610d06565b87602001356104c9565b14949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e657200000000000000000000000000000000000000000000000000006044820152606401610404565b73ffffffffffffffffffffffffffffffffffffffff821660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168515159081179091558251938452908301527fd984ea421ae5d2a473199f85e03998a04a12f54d6f1fa183a955b3df1c0c546d910160405180910390a15050565b60008281526001602052604081205480820361086f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104049060208082526004908201527f2166656500000000000000000000000000000000000000000000000000000000604082015260600190565b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e657200000000000000000000000000000000000000000000000000006044820152606401610404565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3360009081526002602052604090205460ff166109e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21617070726f76650000000000000000000000000000000000000000000000006044820152606401610404565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610a3f576040519150601f19603f3d011682016040523d82523d6000602084013e610a44565b606091505b5050905080610aaf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f21776974686472617700000000000000000000000000000000000000000000006044820152606401610404565b8273ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6583604051610af791815260200190565b60405180910390a2505050565b600081604051602001610b179190610f8b565b604051602081830303815290604052805190602001209050919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b5857600080fd5b919050565b60008060008060808587031215610b7357600080fd5b84359350610b8360208601610b34565b93969395505050506040820135916060013590565b600080600060608486031215610bad57600080fd5b83359250610bbd60208501610b34565b9150604084013590509250925092565b60008060408385031215610be057600080fd5b50508035926020909101359150565b6000815180845260005b81811015610c1557602081850181015186830182015201610bf9565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600061086f6020830184610bef565b600080600060408486031215610c7b57600080fd5b833567ffffffffffffffff80821115610c9357600080fd5b908501906101008288031215610ca857600080fd5b90935060208501359080821115610cbe57600080fd5b818601915086601f830112610cd257600080fd5b813581811115610ce157600080fd5b876020828501011115610cf357600080fd5b6020830194508093505050509250925092565b600060208284031215610d1857600080fd5b61086f82610b34565b60008060408385031215610d3457600080fd5b610d3d83610b34565b915060208301358015158114610d5257600080fd5b809150509250929050565b60008060408385031215610d7057600080fd5b82359150610d8060208401610b34565b90509250929050565b600060208284031215610d9b57600080fd5b5035919050565b60008060408385031215610db557600080fd5b610dbe83610b34565b946020939093013593505050565b600060208284031215610dde57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715610e3857610e38610de5565b60405290565b600082601f830112610e4f57600080fd5b813567ffffffffffffffff80821115610e6a57610e6a610de5565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610eb057610eb0610de5565b81604052838152866020858801011115610ec957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006101008236031215610efc57600080fd5b610f04610e14565b610f0d83610b34565b81526020830135602082015260408301356040820152610f2f60608401610b34565b606082015260808301356080820152610f4a60a08401610b34565b60a082015260c083013560c082015260e083013567ffffffffffffffff811115610f7357600080fd5b610f7f36828601610e3e565b60e08301525092915050565b60208152600073ffffffffffffffffffffffffffffffffffffffff808451166020840152602084015160408401526040840151606084015280606085015116608084015250608083015160a083015260a083015161100160c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015160e083015260e08301516101008081850152506105d9610120840182610bef56fea26469706673582212204e15bd44f524a009ddb10dfab169b887e49170106f13f83c120155f154c3b9bc64736f6c63430008110033000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a500000000000000000000000013b2211a7ca45db2808f6db05557ce5347e3634e"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "3",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setApproved",
            "variables": {
              "operator": "0x040f331774Ed6BB161412B4cEDb1358B382aF3A5",
              "approve": true
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "10500000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x84cfb680000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a50000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "4",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setApproved",
            "variables": {
              "operator": "0x0f14341A7f464320319025540E8Fe48Ad0fe5aec",
              "approve": true
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "10500000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x84cfb6800000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec0000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "5",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setApproved",
            "variables": {
              "operator": "0xc1A3FEE4132e9285f41F5389570fD9Fbbcb10a1D",
              "approve": true
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "10500000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x84cfb680000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d0000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "6",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "changeOwner",
            "variables": {
              "newOwner": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "10500000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0xa6f9dae1000000000000000000000000855275ac7ea4cc4f324915b2eb48839e447e04bd"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "7",
          "decodedAction": {
            "referenceName": "0x114890eB7386F94eae410186F20968bFAf66142a",
            "functionName": "call",
            "variables": [
              "0x84cfb680000000000000000000000000912d7601569cbc2df8a7f0aae50bfd18e8c64d050000000000000000000000000000000000000000000000000000000000000000"
            ],
            "address": "",
            "value": "0"
          },
          "gas": "10500000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x114890eB7386F94eae410186F20968bFAf66142a",
          "txData": "0x84cfb680000000000000000000000000912d7601569cbc2df8a7f0aae50bfd18e8c64d050000000000000000000000000000000000000000000000000000000000000000"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "8",
          "decodedAction": {
            "referenceName": "0x114890eB7386F94eae410186F20968bFAf66142a",
            "functionName": "call",
            "variables": [
              "0x84cfb68000000000000000000000000040c168503b9758540e18a79907f3fd8678c13f030000000000000000000000000000000000000000000000000000000000000001"
            ],
            "address": "",
            "value": "0"
          },
          "gas": "10500000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x114890eB7386F94eae410186F20968bFAf66142a",
          "txData": "0x84cfb68000000000000000000000000040c168503b9758540e18a79907f3fd8678c13f030000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "9",
          "decodedAction": {
            "referenceName": "0x13b2211a7cA45Db2808F6dB05557ce5347e3634e",
            "functionName": "call",
            "variables": [
              "0x4ea59979000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a"
            ],
            "address": "",
            "value": "0"
          },
          "gas": "10500000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x13b2211a7cA45Db2808F6dB05557ce5347e3634e",
          "txData": "0x4ea59979000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "10",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setFee",
            "variables": {
              "chainId": "46",
              "fee_": "25000000000000000"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "10500000",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x52f7c988000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000058d15e17628000"
        }
      ],
      "unlabeledContracts": [],
      "arbitraryChain": false,
      "executorAddress": "0x7e16116661CA8d66C73612382833153911Fa03B1",
      "libraries": [],
      "gitCommit": "ec364d8a31f07d39a8f27b71bc4037675954fddd",
      "safeFundingRequest": {
        "fundsRequested": "0",
        "startingBalance": "0"
      }
    },
    {
      "safeAddress": "0x040f331774Ed6BB161412B4cEDb1358B382aF3A5",
      "moduleAddress": "0x3D75d338B4711F8a33d293a2008f07a712513402",
      "safeInitData": "0xb63e800d00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000a238cbeb142c10ef7ad8442c6d1f9e89e07e776100000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000f48f2b2d2a534e402487b3ee7c18c33aec0fe5e4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000e3993566b34e5367d1c602439997bd08c11ff70000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec00000000000000000000000052386be2397e8eac26298f733b390684203fb58000000000000000000000000053405fb4d71591e33fe07bfbc90bd82e65720ad00000000000000000000000009f33a4809aa708d7a399fedba514e0a0d15efa8500000000000000000000000000000000000000000000000000000000000001448d80ff0a000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000f2008f3301c9eada5642b5bb12fd047d3ebb2932e619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000248236d0b80000000000000000000000000000000000000000000000000000000000000000018f3301c9eada5642b5bb12fd047d3ebb2932e6190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002411ea37fc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "nonce": "1",
      "chainId": "2818",
      "blockGasLimit": "30000000",
      "blockNumber": "9643173",
      "newConfig": {
        "projectName": "RING-DAO",
        "orgId": "cluanacaw000111jik4xs4wkl",
        "owners": [
          "0x00E3993566b34e5367d1C602439997BD08c11FF7",
          "0x0f14341A7f464320319025540E8Fe48Ad0fe5aec",
          "0x52386BE2397e8EAc26298F733b390684203fB580",
          "0x53405FB4d71591E33fe07bFbC90bD82E65720ad0",
          "0x9F33a4809aA708d7a399fedBa514e0A0d15EfA85"
        ],
        "mainnets": [
          "arbitrum",
          "blast",
          "crab",
          "darwinia",
          "ethereum",
          "polygon",
          "moonbeam",
          "morph"
        ],
        "testnets": [
          "sepolia",
          "arbitrum_sepolia"
        ],
        "threshold": "3",
        "saltNonce": "0"
      },
      "executionMode": 2,
      "initialState": {
        "isExecuting": false,
        "isModuleDeployed": true,
        "isSafeDeployed": true
      },
      "isSystemDeployed": true,
      "actionInputs": [
        {
          "actionType": 1,
          "create2Address": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD",
          "initCodeWithArgs": "",
          "contracts": [
            {
              "address": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD",
              "initCodeWithArgs": "",
              "fullyQualifiedName": "lib/subapi/src/SubAPIMultiSig.sol:SubAPIMultiSig"
            }
          ],
          "index": "1",
          "decodedAction": {
            "referenceName": "SubAPIMultiSig",
            "functionName": "deploy",
            "variables": {
              "signers": [
                "0x1989D93Ec04037cA64e2af7e48FF5C8Fc2cEA7B8",
                "0x9F33a4809aA708d7a399fedBa514e0A0d15EfA85",
                "0xB9a0CaDD13C5d534b034d878b2fcA9E5a6e1e3A4",
                "0xc1A3FEE4132e9285f41F5389570fD9Fbbcb10a1D",
                "0xFa5727bE643dba6599fC7F812fE60dA3264A8205"
              ],
              "threshold": "3"
            },
            "address": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD",
            "value": "0"
          },
          "gas": "2072226",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
          "txData": "0x000000000000000000000000000000000000000000000000000000000000000160806040523480156200001157600080fd5b5060405162001ec738038062001ec78339810160408190526200003491620002e5565b62000049826001600160401b03831662000051565b505062000409565b600254156200008f5760405162461bcd60e51b8152602060048201526005602482015264047533230360dc1b60448201526064015b60405180910390fd5b8151811115620000ca5760405162461bcd60e51b8152602060048201526005602482015264475332303160d81b604482015260640162000086565b6001811015620001055760405162461bcd60e51b815260206004820152600560248201526423a999181960d91b604482015260640162000086565b600160005b8351811015620002645760008482815181106200012b576200012b620003cb565b6020026020010151905060006001600160a01b0316816001600160a01b0316141580156200016357506001600160a01b038116600114155b80156200017957506001600160a01b0381163014155b8015620001985750806001600160a01b0316836001600160a01b031614155b620001ce5760405162461bcd60e51b8152602060048201526005602482015264475332303360d81b604482015260640162000086565b6001600160a01b038181166000908152602081905260409020541615620002205760405162461bcd60e51b815260206004820152600560248201526411d4cc8c0d60da1b604482015260640162000086565b6001600160a01b03928316600090815260208190526040902080546001600160a01b03191693821693909317909255806200025b81620003e1565b9150506200010a565b506001600160a01b0316600090815260208190526040902080546001600160a01b03191660019081179091559151909155600255565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002c857600080fd5b919050565b80516001600160401b0381168114620002c857600080fd5b60008060408385031215620002f957600080fd5b82516001600160401b03808211156200031157600080fd5b818501915085601f8301126200032657600080fd5b81516020828211156200033d576200033d6200029a565b8160051b604051601f19603f830116810181811086821117156200036557620003656200029a565b6040529283528183019350848101820192898411156200038457600080fd5b948201945b83861015620003ad576200039d86620002b0565b8552948201949382019362000389565b9650620003be9050878201620002cd565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200040257634e487b7160e01b600052601160045260246000fd5b5060010190565b611aae80620004196000396000f3fe6080604052600436106100b55760003560e01c8063a0e67e2b11610069578063e318b52b1161004e578063e318b52b146101bd578063e75235b8146101dd578063f8dc5dd9146101fb57600080fd5b8063a0e67e2b1461017b578063c7a823e01461019d57600080fd5b80632f54bf6e1161009a5780632f54bf6e1461010b578063694e80c31461012b578063935f9ade1461014b57600080fd5b80630589105b146100c15780630d582f13146100e957600080fd5b366100bc57005b600080fd5b6100d46100cf3660046115a1565b61021b565b60405190151581526020015b60405180910390f35b3480156100f557600080fd5b506101096101043660046116bf565b61036b565b005b34801561011757600080fd5b506100d46101263660046116e9565b6105c2565b34801561013757600080fd5b5061010961014636600461170b565b610617565b34801561015757600080fd5b506100d461016636600461170b565b60036020526000908152604090205460ff1681565b34801561018757600080fd5b50610190610731565b6040516100e09190611724565b3480156101a957600080fd5b506101096101b836600461177e565b610848565b3480156101c957600080fd5b506101096101d83660046117ca565b610a80565b3480156101e957600080fd5b506002546040519081526020016100e0565b34801561020757600080fd5b5061010961021636600461180d565b610e0a565b6000804630898989896040516020016102399695949392919061186d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602082012090915061027d8782878761109b565b8873ffffffffffffffffffffffffffffffffffffffff1688876040516102a391906118fb565b60006040518083038185875af1925050503d80600081146102e0576040519150601f19603f3d011682016040523d82523d6000602084013e6102e5565b606091505b50506000828152600360205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555190935081907f0457ea5bc67881c59a30a626040dbff6e109920907a75dc61f3465475530336e9061035790861515815260200190565b60405180910390a250509695505050505050565b61037361118e565b73ffffffffffffffffffffffffffffffffffffffff8216158015906103af575073ffffffffffffffffffffffffffffffffffffffff8216600114155b80156103d1575073ffffffffffffffffffffffffffffffffffffffff82163014155b61043c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f475332303300000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82811660009081526020819052604090205416156104cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610433565b600060208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d805473ffffffffffffffffffffffffffffffffffffffff858116808552604085208054929093167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556001808552835490911690911790915580549161055e83611946565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a180600254146105be576105be81610617565b5050565b600073ffffffffffffffffffffffffffffffffffffffff8216600114801590610611575073ffffffffffffffffffffffffffffffffffffffff8281166000908152602081905260409020541615155b92915050565b61061f61118e565b60015481111561068b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610433565b60018110156106f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230320000000000000000000000000000000000000000000000000000006044820152606401610433565b60028190556040518181527f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c939060200160405180910390a150565b6060600060015467ffffffffffffffff81111561075057610750611530565b604051908082528060200260200182016040528015610779578160200160208202803683370190505b506001600090815260208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d549192509073ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff811660011461084057808383815181106107f4576107f461197e565b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201810191909152918116600090815291829052604090912054168161083881611946565b9250506107c3565b509092915050565b6002546108569060416119ad565b81146108be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606401610433565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c849052603c812090805b600254811015610a7857366000868661090a8560416119ad565b906109168660016119c4565b6109219060416119ad565b9261092e939291906119d7565b9150915060006109748684848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111f992505050565b90508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161180156109d7575073ffffffffffffffffffffffffffffffffffffffff8181166000908152602081905260409020541615155b80156109fa575073ffffffffffffffffffffffffffffffffffffffff8116600114155b610a60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610433565b9350829150610a70905081611946565b9150506108f0565b505050505050565b610a8861118e565b73ffffffffffffffffffffffffffffffffffffffff811615801590610ac4575073ffffffffffffffffffffffffffffffffffffffff8116600114155b8015610ae6575073ffffffffffffffffffffffffffffffffffffffff81163014155b610b4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff8181166000908152602081905260409020541615610bdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff821615801590610c17575073ffffffffffffffffffffffffffffffffffffffff8216600114155b610c7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260208190526040902054811690831614610d10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208181526040808320805487871680865283862080549289167fffffffffffffffffffffffff0000000000000000000000000000000000000000938416179055968a1685528285208054821690971790965592849052825490941690915591519081527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf910160405180910390a160405173ffffffffffffffffffffffffffffffffffffffff821681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a1505050565b610e1261118e565b8060018054610e219190611a01565b1015610e89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff821615801590610ec5575073ffffffffffffffffffffffffffffffffffffffff8216600114155b610f2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260208190526040902054811690831614610fbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208190526040808220805488861684529183208054929095167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179094559181528254909116909155600180549161103683611a14565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf9060200160405180910390a180600254146110965761109681610617565b505050565b834210611104576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6f7065726174696f6e20657870697265640000000000000000000000000000006044820152606401610433565b60008381526003602052604090205460ff161561117d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6861736820616c726561647920757365640000000000000000000000000000006044820152606401610433565b611188838383610848565b50505050565b3330146111f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533033310000000000000000000000000000000000000000000000000000006044820152606401610433565b565b6000806000611208858561121d565b9150915061121581611262565b509392505050565b60008082516041036112535760208301516040840151606085015160001a61124787828585611418565b9450945050505061125b565b506000905060025b9250929050565b600081600481111561127657611276611a49565b0361127e5750565b600181600481111561129257611292611a49565b036112f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610433565b600281600481111561130d5761130d611a49565b03611374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610433565b600381600481111561138857611388611a49565b03611415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610433565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561144f57506000905060036114fe565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156114a3573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166114f7576000600192509250506114fe565b9150600090505b94509492505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461152b57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083601f84011261157157600080fd5b50813567ffffffffffffffff81111561158957600080fd5b60208301915083602082850101111561125b57600080fd5b60008060008060008060a087890312156115ba57600080fd5b6115c387611507565b95506020870135945060408701359350606087013567ffffffffffffffff808211156115ee57600080fd5b818901915089601f83011261160257600080fd5b81358181111561161457611614611530565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561165a5761165a611530565b816040528281528c602084870101111561167357600080fd5b8260208601602083013760006020848301015280975050505060808901359150808211156116a057600080fd5b506116ad89828a0161155f565b979a9699509497509295939492505050565b600080604083850312156116d257600080fd5b6116db83611507565b946020939093013593505050565b6000602082840312156116fb57600080fd5b61170482611507565b9392505050565b60006020828403121561171d57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561177257835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611740565b50909695505050505050565b60008060006040848603121561179357600080fd5b83359250602084013567ffffffffffffffff8111156117b157600080fd5b6117bd8682870161155f565b9497909650939450505050565b6000806000606084860312156117df57600080fd5b6117e884611507565b92506117f660208501611507565b915061180460408501611507565b90509250925092565b60008060006060848603121561182257600080fd5b61182b84611507565b925061183960208501611507565b9150604084013590509250925092565b60005b8381101561186457818101518382015260200161184c565b50506000910152565b868152600073ffffffffffffffffffffffffffffffffffffffff808816602084015280871660408401525084606083015283608083015260c060a083015282518060c08401526118c48160e0850160208701611849565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160e001979650505050505050565b6000825161190d818460208701611849565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361197757611977611917565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808202811582820484141761061157610611611917565b8082018082111561061157610611611917565b600080858511156119e757600080fd5b838611156119f457600080fd5b5050820193919092039150565b8181038181111561061157610611611917565b600081611a2357611a23611917565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220f324b0700dbbbeaf57c064d165aa16d47fc4f52aac1b0e1017b0f81c78d579af64736f6c634300081100330000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000050000000000000000000000001989d93ec04037ca64e2af7e48ff5c8fc2cea7b80000000000000000000000009f33a4809aa708d7a399fedba514e0a0d15efa85000000000000000000000000b9a0cadd13c5d534b034d878b2fca9e5a6e1e3a4000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d000000000000000000000000fa5727be643dba6599fc7f812fe60da3264a8205"
        },
        {
          "actionType": 1,
          "create2Address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "initCodeWithArgs": "",
          "contracts": [
            {
              "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
              "initCodeWithArgs": "",
              "fullyQualifiedName": "lib/ORMP/src/eco/Oracle.sol:Oracle"
            }
          ],
          "index": "2",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "deploy",
            "variables": {
              "dao": "0x040f331774Ed6BB161412B4cEDb1358B382aF3A5",
              "ormp": "0x13b2211a7cA45Db2808F6dB05557ce5347e3634e"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "1209810",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
          "txData": "0x000000000000000000000000000000000000000000000000000000000000000260a060405234801561001057600080fd5b5060405161113038038061113083398101604081905261002f91610076565b6001600160a01b03908116608052600080546001600160a01b031916929091169190911790556100a9565b80516001600160a01b038116811461007157600080fd5b919050565b6000806040838503121561008957600080fd5b6100928361005a565b91506100a06020840161005a565b90509250929050565b60805161105e6100d2600039600081816102a80152818161046701526104cd015261105e6000f3fe6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063a6f9dae111610059578063a6f9dae1146102ea578063af9e3a361461030a578063b6333d1614610337578063f3fef3a31461036757600080fd5b80638da5cb5b1461024457806391b9b82714610296578063a1dbf432146102ca57600080fd5b806354fd4d50116100bb57806354fd4d5014610162578063651b04a7146101ae578063673448dd146101de57806384cfb6801461022457600080fd5b80630a863e6c146100ed578063506146951461010f57806352f7c9881461014257600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004610b5d565b610387565b005b34801561011b57600080fd5b5061012f61012a366004610b98565b6104c9565b6040519081526020015b60405180910390f35b34801561014e57600080fd5b5061010d61015d366004610bcd565b6105e1565b34801561016e57600080fd5b50604080518082018252600581527f322e312e30000000000000000000000000000000000000000000000000000000602082015290516101399190610c53565b3480156101ba57600080fd5b506101ce6101c9366004610c66565b6106ab565b6040519015158152602001610139565b3480156101ea57600080fd5b506101ce6101f9366004610d06565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b34801561023057600080fd5b5061010d61023f366004610d21565b6106e6565b34801561025057600080fd5b506000546102719073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610139565b3480156102a257600080fd5b506102717f000000000000000000000000000000000000000000000000000000000000000081565b3480156102d657600080fd5b5061012f6102e5366004610d5d565b6107f5565b3480156102f657600080fd5b5061010d610305366004610d06565b610876565b34801561031657600080fd5b5061012f610325366004610d89565b60016020526000908152604090205481565b34801561034357600080fd5b506101ce610352366004610d06565b60026020526000908152604090205460ff1681565b34801561037357600080fd5b5061010d610382366004610da2565b61096c565b60005473ffffffffffffffffffffffffffffffffffffffff16331461040d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e6572000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6040517f5f3abe960000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f00000000000000000000000000000000000000000000000000000000000000001690635f3abe9690608401600060405180830381600087803b1580156104ab57600080fd5b505af11580156104bf573d6000803e3d6000fd5b5050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663559e7230308686866040516020016105449392919092835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b604051602081830303815290604052805190602001206040518363ffffffff1660e01b815260040161059892919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b602060405180830381865afa1580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d99190610dcc565b949350505050565b3360009081526002602052604090205460ff1661065a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21617070726f76650000000000000000000000000000000000000000000000006044820152606401610404565b600082815260016020526040908190208290555182907f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b59061069f9084815260200190565b60405180910390a25050565b60006106be6106b985610ee9565b610b04565b6106dd60408601356106d36020880188610d06565b87602001356104c9565b14949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e657200000000000000000000000000000000000000000000000000006044820152606401610404565b73ffffffffffffffffffffffffffffffffffffffff821660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168515159081179091558251938452908301527fd984ea421ae5d2a473199f85e03998a04a12f54d6f1fa183a955b3df1c0c546d910160405180910390a15050565b60008281526001602052604081205480820361086f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104049060208082526004908201527f2166656500000000000000000000000000000000000000000000000000000000604082015260600190565b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e657200000000000000000000000000000000000000000000000000006044820152606401610404565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3360009081526002602052604090205460ff166109e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21617070726f76650000000000000000000000000000000000000000000000006044820152606401610404565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610a3f576040519150601f19603f3d011682016040523d82523d6000602084013e610a44565b606091505b5050905080610aaf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f21776974686472617700000000000000000000000000000000000000000000006044820152606401610404565b8273ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6583604051610af791815260200190565b60405180910390a2505050565b600081604051602001610b179190610f8b565b604051602081830303815290604052805190602001209050919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b5857600080fd5b919050565b60008060008060808587031215610b7357600080fd5b84359350610b8360208601610b34565b93969395505050506040820135916060013590565b600080600060608486031215610bad57600080fd5b83359250610bbd60208501610b34565b9150604084013590509250925092565b60008060408385031215610be057600080fd5b50508035926020909101359150565b6000815180845260005b81811015610c1557602081850181015186830182015201610bf9565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600061086f6020830184610bef565b600080600060408486031215610c7b57600080fd5b833567ffffffffffffffff80821115610c9357600080fd5b908501906101008288031215610ca857600080fd5b90935060208501359080821115610cbe57600080fd5b818601915086601f830112610cd257600080fd5b813581811115610ce157600080fd5b876020828501011115610cf357600080fd5b6020830194508093505050509250925092565b600060208284031215610d1857600080fd5b61086f82610b34565b60008060408385031215610d3457600080fd5b610d3d83610b34565b915060208301358015158114610d5257600080fd5b809150509250929050565b60008060408385031215610d7057600080fd5b82359150610d8060208401610b34565b90509250929050565b600060208284031215610d9b57600080fd5b5035919050565b60008060408385031215610db557600080fd5b610dbe83610b34565b946020939093013593505050565b600060208284031215610dde57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715610e3857610e38610de5565b60405290565b600082601f830112610e4f57600080fd5b813567ffffffffffffffff80821115610e6a57610e6a610de5565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610eb057610eb0610de5565b81604052838152866020858801011115610ec957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006101008236031215610efc57600080fd5b610f04610e14565b610f0d83610b34565b81526020830135602082015260408301356040820152610f2f60608401610b34565b606082015260808301356080820152610f4a60a08401610b34565b60a082015260c083013560c082015260e083013567ffffffffffffffff811115610f7357600080fd5b610f7f36828601610e3e565b60e08301525092915050565b60208152600073ffffffffffffffffffffffffffffffffffffffff808451166020840152602084015160408401526040840151606084015280606085015116608084015250608083015160a083015260a083015161100160c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015160e083015260e08301516101008081850152506105d9610120840182610bef56fea26469706673582212204e15bd44f524a009ddb10dfab169b887e49170106f13f83c120155f154c3b9bc64736f6c63430008110033000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a500000000000000000000000013b2211a7ca45db2808f6db05557ce5347e3634e"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "3",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setApproved",
            "variables": {
              "operator": "0x040f331774Ed6BB161412B4cEDb1358B382aF3A5",
              "approve": true
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "151304",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x84cfb680000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a50000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "4",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setApproved",
            "variables": {
              "operator": "0x0f14341A7f464320319025540E8Fe48Ad0fe5aec",
              "approve": true
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "151304",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x84cfb6800000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec0000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "5",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setApproved",
            "variables": {
              "operator": "0xc1A3FEE4132e9285f41F5389570fD9Fbbcb10a1D",
              "approve": true
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "151304",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x84cfb680000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d0000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "6",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "changeOwner",
            "variables": {
              "newOwner": "0x855275aC7Ea4cc4F324915b2Eb48839E447E04bD"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "127326",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0xa6f9dae1000000000000000000000000855275ac7ea4cc4f324915b2eb48839e447e04bd"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "7",
          "decodedAction": {
            "referenceName": "0x114890eB7386F94eae410186F20968bFAf66142a",
            "functionName": "call",
            "variables": [
              "0x84cfb680000000000000000000000000912d7601569cbc2df8a7f0aae50bfd18e8c64d050000000000000000000000000000000000000000000000000000000000000000"
            ],
            "address": "",
            "value": "0"
          },
          "gas": "133766",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x114890eB7386F94eae410186F20968bFAf66142a",
          "txData": "0x84cfb680000000000000000000000000912d7601569cbc2df8a7f0aae50bfd18e8c64d050000000000000000000000000000000000000000000000000000000000000000"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "8",
          "decodedAction": {
            "referenceName": "0x114890eB7386F94eae410186F20968bFAf66142a",
            "functionName": "call",
            "variables": [
              "0x84cfb68000000000000000000000000040c168503b9758540e18a79907f3fd8678c13f030000000000000000000000000000000000000000000000000000000000000001"
            ],
            "address": "",
            "value": "0"
          },
          "gas": "151286",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x114890eB7386F94eae410186F20968bFAf66142a",
          "txData": "0x84cfb68000000000000000000000000040c168503b9758540e18a79907f3fd8678c13f030000000000000000000000000000000000000000000000000000000000000001"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "9",
          "decodedAction": {
            "referenceName": "0x13b2211a7cA45Db2808F6dB05557ce5347e3634e",
            "functionName": "call",
            "variables": [
              "0x4ea59979000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a"
            ],
            "address": "",
            "value": "0"
          },
          "gas": "134085",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x13b2211a7cA45Db2808F6dB05557ce5347e3634e",
          "txData": "0x4ea59979000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a"
        },
        {
          "actionType": 2,
          "contracts": [],
          "index": "10",
          "decodedAction": {
            "referenceName": "Oracle",
            "functionName": "setFee",
            "variables": {
              "chainId": "42161",
              "fee_": "40000000000000"
            },
            "address": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
            "value": "0"
          },
          "gas": "151210",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0xB49E82067a54b3E8c5D9Db2f378FdB6892C04D2E",
          "txData": "0x52f7c988000000000000000000000000000000000000000000000000000000000000a4b10000000000000000000000000000000000000000000000000000246139ca8000"
        }
      ],
      "unlabeledContracts": [],
      "arbitraryChain": false,
      "executorAddress": "0x7e16116661CA8d66C73612382833153911Fa03B1",
      "libraries": [],
      "gitCommit": "ec364d8a31f07d39a8f27b71bc4037675954fddd",
      "safeFundingRequest": {
        "fundsRequested": "0",
        "startingBalance": "0"
      }
    }
  ],
  "buildInfos": {
    "b17fe8726b32698f99fd0b9f2554d6c2": {
      "id": "b17fe8726b32698f99fd0b9f2554d6c2",
      "solcVersion": "0.8.17",
      "solcLongVersion": "0.8.17+commit.8df45f5f",
      "input": {
        "language": "Solidity",
        "sources": {
          "lib/ORMP/src/Channel.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./UserConfig.sol\";\nimport \"./interfaces/IVerifier.sol\";\n\n/// @title Channel\n/// @notice A channel is a logical connection over cross-chain network.\n/// It used for cross-chain message transfer.\n/// - Accepts messages to be dispatched to destination chains,\n///   constructs a Merkle tree of the messages.\n/// - Dispatches verified messages from source chains.\ncontract Channel is UserConfig {\n    /// @dev msgHash => isDispathed.\n    mapping(bytes32 => bool) public dones;\n\n    /// @dev message count.\n    uint256 public count;\n\n    /// @dev Self contract address cache.\n    address private immutable __self = address(this);\n\n    /// @dev Notifies an observer that the message has been accepted.\n    /// @param msgHash Hash of the message.\n    /// @param message Accepted message info.\n    event MessageAccepted(bytes32 indexed msgHash, Message message);\n    /// @dev Notifies an observer that the message has been dispatched.\n    /// @param msgHash Hash of the message.\n    /// @param dispatchResult The message dispatch result.\n    event MessageDispatched(bytes32 indexed msgHash, bool dispatchResult);\n\n    /// @dev Init code.\n    constructor(address dao) UserConfig(dao) {}\n\n    /// @dev Fetch local chain id.\n    /// @return chainId Local chain id.\n    function LOCAL_CHAINID() public view returns (uint256) {\n        return block.chainid;\n    }\n\n    /// @dev Send message.\n    /// @param from User application contract address which send the message.\n    /// @param toChainId The Message destination chain id.\n    /// @param to User application contract address which receive the message.\n    /// @param gasLimit Gas limit for destination user application used.\n    /// @param encoded The calldata which encoded by ABI Encoding.\n    function _send(address from, uint256 toChainId, address to, uint256 gasLimit, bytes calldata encoded)\n        internal\n        returns (bytes32)\n    {\n        // only cross-chain message\n        require(toChainId != LOCAL_CHAINID(), \"!cross-chain\");\n        // constuct message object.\n        Message memory message = Message({\n            channel: __self,\n            index: count,\n            fromChainId: LOCAL_CHAINID(),\n            from: from,\n            toChainId: toChainId,\n            to: to,\n            gasLimit: gasLimit,\n            encoded: encoded\n        });\n        // hash the message.\n        bytes32 msgHash = hash(message);\n\n        // emit accepted message event.\n        emit MessageAccepted(msgHash, message);\n\n        // increase message count\n        count = count + 1;\n\n        // return this message hash.\n        return msgHash;\n    }\n\n    /// @dev Receive messages.\n    /// @notice Only message.to's config relayer could relay this message.\n    /// @param message Received message info.\n    /// @param proof Message proof of this message.\n    function _recv(Message calldata message, bytes calldata proof) internal returns (bytes32) {\n        // get message.to user config.\n        UC memory uc = getAppConfig(message.to);\n        // only the config relayer could relay this message.\n        require(uc.relayer == msg.sender, \"!auth\");\n        // verify message by the config oracle.\n        require(IVerifier(uc.oracle).verifyMessageProof(message, proof), \"!proof\");\n        // check destination chain id is correct.\n        require(LOCAL_CHAINID() == message.toChainId, \"!toChainId\");\n        // hash the message.\n        bytes32 msgHash = hash(message);\n        // check the message is not dispatched.\n        require(dones[msgHash] == false, \"done\");\n\n        // set the message is dispatched.\n        dones[msgHash] = true;\n\n        return msgHash;\n    }\n}\n"
          },
          "lib/ORMP/src/Common.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @dev The block of control information and data for comminicate\n/// between user applications. Messages are the exchange medium\n/// used by channels to send and receive data through cross-chain networks.\n/// A message is sent from a source chain to a destination chain.\n/// @param index The leaf index lives in channel's incremental mekle tree.\n/// @param fromChainId The message source chain id.\n/// @param from User application contract address which send the message.\n/// @param toChainId The message destination chain id.\n/// @param to User application contract address which receive the message.\n/// @param gasLimit Gas limit for destination UA used.\n/// @param encoded The calldata which encoded by ABI Encoding.\nstruct Message {\n    address channel;\n    uint256 index;\n    uint256 fromChainId;\n    address from;\n    uint256 toChainId;\n    address to;\n    uint256 gasLimit;\n    bytes encoded; /*(abi.encodePacked(SELECTOR, PARAMS))*/\n}\n\n/// @dev Hash of the message.\nfunction hash(Message memory message) pure returns (bytes32) {\n    return keccak256(abi.encode(message));\n}\n"
          },
          "lib/ORMP/src/ORMP.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./Channel.sol\";\nimport \"./interfaces/IOracle.sol\";\nimport \"./interfaces/IRelayer.sol\";\nimport \"./security/ReentrancyGuard.sol\";\nimport \"./security/ExcessivelySafeCall.sol\";\n\n/// @title ORMP\n/// @notice An endpoint is a type of network node for cross-chain communication.\n/// It is an interface exposed by a communication channel.\n/// @dev An endpoint is associated with an immutable channel and user configuration.\ncontract ORMP is ReentrancyGuard, Channel {\n    using ExcessivelySafeCall for address;\n\n    event MessageAssigned(\n        bytes32 indexed msgHash,\n        address indexed oracle,\n        address indexed relayer,\n        uint256 oracleFee,\n        uint256 relayerFee,\n        bytes params\n    );\n    event HashImported(address indexed oracle, uint256 chainId, address channel, uint256 msgIndex, bytes32 hash);\n\n    /// oracle => lookupKey => hash\n    mapping(address => mapping(bytes32 => bytes32)) public hashLookup;\n\n    constructor(address dao) Channel(dao) {}\n\n    function version() public pure returns (string memory) {\n        return \"2.1.0\";\n    }\n\n    /// @dev Send a cross-chain message over the endpoint.\n    /// @notice follow https://eips.ethereum.org/EIPS/eip-5750\n    /// @param toChainId The Message destination chain id.\n    /// @param to User application contract address which receive the message.\n    /// @param gasLimit Gas limit for destination user application used.\n    /// @param encoded The calldata which encoded by ABI Encoding.\n    /// @param refund Return extra fee to refund address.\n    /// @param params General extensibility for relayer to custom functionality.\n    function send(\n        uint256 toChainId,\n        address to,\n        uint256 gasLimit,\n        bytes calldata encoded,\n        address refund,\n        bytes calldata params\n    ) external payable sendNonReentrant returns (bytes32) {\n        // user application address.\n        address ua = msg.sender;\n        // send message by channel, return the hash of the message as id.\n        bytes32 msgHash = _send(ua, toChainId, to, gasLimit, encoded);\n\n        // handle fee\n        _handleFee(ua, refund, msgHash, toChainId, gasLimit, encoded, params);\n\n        return msgHash;\n    }\n\n    /// @dev Import hash by any oracle address.\n    /// @notice Hash is an abstract of the proof system, it can be a block hash or a message root hash,\n    ///  \t\tspecifically provided by oracles.\n    /// @param chainId The source chain id.\n    /// @param channel The message channel.\n    /// @param msgIndex The source chain message index.\n    /// @param hash_ The hash to import.\n    function importHash(uint256 chainId, address channel, uint256 msgIndex, bytes32 hash_) external {\n        bytes32 lookupKey = keccak256(abi.encode(chainId, channel, msgIndex));\n        hashLookup[msg.sender][lookupKey] = hash_;\n        emit HashImported(msg.sender, chainId, channel, msgIndex, hash_);\n    }\n\n    function _handleFee(\n        address ua,\n        address refund,\n        bytes32 msgHash,\n        uint256 toChainId,\n        uint256 gasLimit,\n        bytes calldata encoded,\n        bytes calldata params\n    ) internal {\n        // fetch user application's config.\n        UC memory uc = getAppConfig(ua);\n        // handle relayer fee\n        uint256 relayerFee = _handleRelayer(uc.relayer, toChainId, ua, gasLimit, encoded, params);\n        // handle oracle fee\n        uint256 oracleFee = _handleOracle(uc.oracle, toChainId, ua);\n\n        emit MessageAssigned(msgHash, uc.oracle, uc.relayer, oracleFee, relayerFee, params);\n\n        // refund\n        require(msg.value >= relayerFee + oracleFee, \"!fee\");\n        if (msg.value > relayerFee + oracleFee) {\n            uint256 refundFee = msg.value - (relayerFee + oracleFee);\n            _sendValue(refund, refundFee);\n        }\n    }\n\n    /// @notice Get a quote in source native gas, for the amount that send() requires to pay for message delivery.\n    /// @param toChainId The Message destination chain id.\n    //  @param ua User application contract address which send the message.\n    /// @param gasLimit Gas limit for destination user application used.\n    /// @param encoded The calldata which encoded by ABI Encoding.\n    /// @param params General extensibility for relayer to custom functionality.\n    function fee(uint256 toChainId, address ua, uint256 gasLimit, bytes calldata encoded, bytes calldata params)\n        external\n        view\n        returns (uint256)\n    {\n        UC memory uc = getAppConfig(ua);\n        uint256 relayerFee = IRelayer(uc.relayer).fee(toChainId, ua, gasLimit, encoded, params);\n        uint256 oracleFee = IOracle(uc.oracle).fee(toChainId, ua);\n        return relayerFee + oracleFee;\n    }\n\n    function _handleRelayer(\n        address relayer,\n        uint256 toChainId,\n        address ua,\n        uint256 gasLimit,\n        bytes calldata encoded,\n        bytes calldata params\n    ) internal returns (uint256) {\n        uint256 relayerFee = IRelayer(relayer).fee(toChainId, ua, gasLimit, encoded, params);\n        _sendValue(relayer, relayerFee);\n        return relayerFee;\n    }\n\n    function _handleOracle(address oracle, uint256 toChainId, address ua) internal returns (uint256) {\n        uint256 oracleFee = IOracle(oracle).fee(toChainId, ua);\n        _sendValue(oracle, oracleFee);\n        return oracleFee;\n    }\n\n    /// @dev Recv verified message from Channel and dispatch to destination user application address.\n    /// @notice Only channel could call this function.\n    /// @param message Verified receive message info.\n    /// @param proof Message proof of this message.\n    /// @return dispatchResult Result of the message dispatch.\n    function recv(Message calldata message, bytes calldata proof)\n        external\n        recvNonReentrant\n        returns (bool dispatchResult)\n    {\n        bytes32 msgHash = _recv(message, proof);\n        dispatchResult = _dispatch(message, msgHash);\n        // emit dispatched message event.\n        emit MessageDispatched(msgHash, dispatchResult);\n    }\n\n    /// @dev Dispatch the cross chain message.\n    function _dispatch(Message memory message, bytes32 msgHash) private returns (bool dispatchResult) {\n        // where 5000 is the gas required for the operation between the call to gasleft()\n        uint256 gasAvailable = gasleft() - 5000;\n        require(gasAvailable - gasAvailable / 64 > message.gasLimit, \"!gas\");\n        // Deliver the message to user application contract address.\n        (dispatchResult,) = message.to.excessivelySafeCall(\n            message.gasLimit, 0, 0, abi.encodePacked(message.encoded, msgHash, message.fromChainId, message.from)\n        );\n    }\n\n    /// @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n    /// `recipient`, forwarding all available gas and reverting on errors.\n    function _sendValue(address recipient, uint256 amount) internal {\n        (bool success,) = recipient.call{value: amount}(\"\");\n        require(success, \"!send\");\n    }\n}\n"
          },
          "lib/ORMP/src/UserConfig.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @dev User application custom configuration.\n/// @param oracle Oracle contract address.\n/// @param relayer Relayer contract address.\nstruct UC {\n    address oracle;\n    address relayer;\n}\n\n/// @title UserConfig\n/// @notice User config could select their own relayer and oracle.\n/// The default configuration is used by default.\n/// @dev Only setter could set default user config.\ncontract UserConfig {\n    /// @dev Setter address.\n    address public setter;\n    /// @dev Default user config.\n    UC public defaultUC;\n    /// @dev ua => uc.\n    mapping(address => UC) public ucOf;\n\n    /// @dev Notifies an observer that the default user config has updated.\n    /// @param oracle Default oracle.\n    /// @param relayer Default relayer.\n    event DefaultConfigUpdated(address oracle, address relayer);\n    /// @dev Notifies an observer that the user application config has updated.\n    /// @param ua User application contract address.\n    /// @param oracle Oracle which the user application choose.\n    /// @param relayer Relayer which the user application choose.\n    event AppConfigUpdated(address indexed ua, address oracle, address relayer);\n    /// @dev Notifies an observer that the setter is changed.\n    /// @param oldSetter Old setter address.\n    /// @param newSetter New setter address.\n    event SetterChanged(address indexed oldSetter, address indexed newSetter);\n\n    modifier onlySetter() {\n        require(msg.sender == setter, \"!auth\");\n        _;\n    }\n\n    constructor(address dao) {\n        setter = dao;\n    }\n\n    /// @dev Change setter.\n    /// @notice Only current setter could call.\n    /// @param newSetter New setter.\n    function changeSetter(address newSetter) external onlySetter {\n        address oldSetter = setter;\n        setter = newSetter;\n        emit SetterChanged(oldSetter, newSetter);\n    }\n\n    /// @dev Set default user config for all user application.\n    /// @notice Only setter could call.\n    /// @param oracle Default oracle.\n    /// @param relayer Default relayer.\n    function setDefaultConfig(address oracle, address relayer) external onlySetter {\n        defaultUC = UC(oracle, relayer);\n        emit DefaultConfigUpdated(oracle, relayer);\n    }\n\n    /// @notice Set user application config.\n    /// @param oracle Oracle which user application.\n    /// @param relayer Relayer which user application choose.\n    function setAppConfig(address oracle, address relayer) external {\n        ucOf[msg.sender] = UC(oracle, relayer);\n        emit AppConfigUpdated(msg.sender, oracle, relayer);\n    }\n\n    /// @dev Fetch user application config.\n    /// @notice If user application has not configured, then the default user config is used.\n    /// @param ua User application contract address.\n    /// @return user application config.\n    function getAppConfig(address ua) public view returns (UC memory) {\n        UC memory c = ucOf[ua];\n\n        if (c.relayer == address(0x0)) {\n            c.relayer = defaultUC.relayer;\n        }\n\n        if (c.oracle == address(0x0)) {\n            c.oracle = defaultUC.oracle;\n        }\n\n        return c;\n    }\n}\n"
          },
          "lib/ORMP/src/Verifier.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./interfaces/IVerifier.sol\";\n\nabstract contract Verifier is IVerifier {\n    /// @notice Fetch message hash.\n    /// @param chainId The source chain id.\n    /// @param channel The message channel.\n    /// @param msgIndex The Message index.\n    /// @return Message hash in source chain.\n    function hashOf(uint256 chainId, address channel, uint256 msgIndex) public view virtual returns (bytes32);\n\n    /// @inheritdoc IVerifier\n    function verifyMessageProof(Message calldata message, bytes calldata) external view returns (bool) {\n        // check oracle's message hash equal relayer's message hash\n        return hashOf(message.fromChainId, message.channel, message.index) == hash(message);\n    }\n}\n"
          },
          "lib/ORMP/src/eco/Oracle.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../Verifier.sol\";\nimport \"../interfaces/IORMP.sol\";\n\ncontract Oracle is Verifier {\n    event SetFee(uint256 indexed chainId, uint256 fee);\n    event SetApproved(address operator, bool approve);\n    event Withdrawal(address indexed to, uint256 amt);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    address public immutable PROTOCOL;\n\n    address public owner;\n    // chainId => price\n    mapping(uint256 => uint256) public feeOf;\n    // operator => isApproved\n    mapping(address => bool) public approvedOf;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"!owner\");\n        _;\n    }\n\n    modifier onlyApproved() {\n        require(isApproved(msg.sender), \"!approve\");\n        _;\n    }\n\n    constructor(address dao, address ormp) {\n        PROTOCOL = ormp;\n        owner = dao;\n    }\n\n    receive() external payable {}\n\n    function version() public pure returns (string memory) {\n        return \"2.1.0\";\n    }\n\n    /// @dev Only could be called by owner.\n    /// @param chainId The source chain id.\n    /// @param channel The message channel.\n    /// @param msgIndex The source chain message index.\n    /// @param msgHash The source chain message hash corresponding to the channel.\n    function importMessageHash(uint256 chainId, address channel, uint256 msgIndex, bytes32 msgHash)\n        external\n        onlyOwner\n    {\n        IORMP(PROTOCOL).importHash(chainId, channel, msgIndex, msgHash);\n    }\n\n    function hashOf(uint256 chainId, address channel, uint256 msgIndex) public view override returns (bytes32) {\n        return IORMP(PROTOCOL).hashLookup(address(this), keccak256(abi.encode(chainId, channel, msgIndex)));\n    }\n\n    function changeOwner(address newOwner) external onlyOwner {\n        address oldOwner = owner;\n        owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    function setApproved(address operator, bool approve) external onlyOwner {\n        approvedOf[operator] = approve;\n        emit SetApproved(operator, approve);\n    }\n\n    function isApproved(address operator) public view returns (bool) {\n        return approvedOf[operator];\n    }\n\n    function withdraw(address to, uint256 amount) external onlyApproved {\n        (bool success,) = to.call{value: amount}(\"\");\n        require(success, \"!withdraw\");\n        emit Withdrawal(to, amount);\n    }\n\n    function setFee(uint256 chainId, uint256 fee_) external onlyApproved {\n        feeOf[chainId] = fee_;\n        emit SetFee(chainId, fee_);\n    }\n\n    function fee(uint256 toChainId, address /*ua*/ ) public view returns (uint256) {\n        uint256 f = feeOf[toChainId];\n        require(f != 0, \"!fee\");\n        return f;\n    }\n}\n"
          },
          "lib/ORMP/src/eco/Relayer.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../interfaces/IORMP.sol\";\n\ncontract Relayer {\n    event SetDstPrice(uint256 indexed chainId, uint128 dstPriceRatio, uint128 dstGasPriceInWei);\n    event SetDstConfig(uint256 indexed chainId, uint64 baseGas, uint64 gasPerByte);\n    event SetApproved(address operator, bool approve);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    struct DstPrice {\n        uint128 dstPriceRatio; // dstPrice / localPrice * 10^10\n        uint128 dstGasPriceInWei;\n    }\n\n    struct DstConfig {\n        uint64 baseGas;\n        uint64 gasPerByte;\n    }\n\n    address public immutable PROTOCOL;\n\n    address public owner;\n    // chainId => price\n    mapping(uint256 => DstPrice) public priceOf;\n    mapping(uint256 => DstConfig) public configOf;\n    mapping(address => bool) public approvedOf;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"!owner\");\n        _;\n    }\n\n    modifier onlyApproved() {\n        require(isApproved(msg.sender), \"!approve\");\n        _;\n    }\n\n    constructor(address dao, address ormp) {\n        PROTOCOL = ormp;\n        owner = dao;\n    }\n\n    function version() public pure returns (string memory) {\n        return \"2.1.0\";\n    }\n\n    receive() external payable {}\n\n    function withdraw(address to, uint256 amount) external onlyApproved {\n        (bool success,) = to.call{value: amount}(\"\");\n        require(success, \"!withdraw\");\n    }\n\n    function isApproved(address operator) public view returns (bool) {\n        return approvedOf[operator];\n    }\n\n    function changeOwner(address newOwner) external onlyOwner {\n        address oldOwner = owner;\n        owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    function setApproved(address operator, bool approve) public onlyOwner {\n        approvedOf[operator] = approve;\n        emit SetApproved(operator, approve);\n    }\n\n    function setDstPrice(uint256 chainId, uint128 dstPriceRatio, uint128 dstGasPriceInWei) external onlyApproved {\n        priceOf[chainId] = DstPrice(dstPriceRatio, dstGasPriceInWei);\n        emit SetDstPrice(chainId, dstPriceRatio, dstGasPriceInWei);\n    }\n\n    function setDstConfig(uint256 chainId, uint64 baseGas, uint64 gasPerByte) external onlyApproved {\n        configOf[chainId] = DstConfig(baseGas, gasPerByte);\n        emit SetDstConfig(chainId, baseGas, gasPerByte);\n    }\n\n    // extraGas = gasLimit\n    function fee(\n        uint256 toChainId,\n        address, /*ua*/\n        uint256 gasLimit,\n        bytes calldata encoded,\n        bytes calldata /*params*/\n    ) public view returns (uint256) {\n        uint256 size = encoded.length;\n        uint256 extraGas = gasLimit;\n        DstPrice memory p = priceOf[toChainId];\n        DstConfig memory c = configOf[toChainId];\n\n        require(c.baseGas != 0, \"!baseGas\");\n        // remoteToken = dstGasPriceInWei * (baseGas + extraGas)\n        uint256 remoteToken = p.dstGasPriceInWei * (c.baseGas + extraGas);\n        // dstPriceRatio = dstPrice / localPrice * 10^10\n        // sourceToken = RemoteToken * dstPriceRatio\n        uint256 sourceToken = remoteToken * p.dstPriceRatio / (10 ** 10);\n        uint256 payloadToken = c.gasPerByte * size * p.dstGasPriceInWei * p.dstPriceRatio / (10 ** 10);\n        return sourceToken + payloadToken;\n    }\n\n    function relay(Message calldata message) external onlyApproved {\n        IORMP(PROTOCOL).recv(message, \"\");\n    }\n}\n"
          },
          "lib/ORMP/src/interfaces/IORMP.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../Common.sol\";\n\ninterface IORMP {\n    /// @dev Send a cross-chain message over the endpoint.\n    /// @notice follow https://eips.ethereum.org/EIPS/eip-5750\n    /// @param toChainId The Message destination chain id.\n    /// @param to User application contract address which receive the message.\n    /// @param gasLimit Gas limit for destination user application used.\n    /// @param encoded The calldata which encoded by ABI Encoding.\n    /// @param refund Return extra fee to refund address.\n    /// @return Return the hash of the message as message id.\n    /// @param params General extensibility for relayer to custom functionality.\n    function send(\n        uint256 toChainId,\n        address to,\n        uint256 gasLimit,\n        bytes calldata encoded,\n        address refund,\n        bytes calldata params\n    ) external payable returns (bytes32);\n\n    /// @notice Get a quote in source native gas, for the amount that send() requires to pay for message delivery.\n    /// @param toChainId The Message destination chain id.\n    //  @param ua User application contract address which send the message.\n    /// @param gasLimit Gas limit for destination user application used.\n    /// @param encoded The calldata which encoded by ABI Encoding.\n    /// @param params General extensibility for relayer to custom functionality.\n    function fee(uint256 toChainId, address ua, uint256 gasLimit, bytes calldata encoded, bytes calldata params)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Recv verified message and dispatch to destination user application address.\n    /// @param message Verified receive message info.\n    /// @param proof Message proof of this message.\n    /// @return dispatchResult Result of the message dispatch.\n    function recv(Message calldata message, bytes calldata proof) external payable returns (bool dispatchResult);\n\n    /// @dev Fetch user application config.\n    /// @notice If user application has not configured, then the default config is used.\n    /// @param ua User application contract address.\n    function getAppConfig(address ua) external view returns (address oracle, address relayer);\n\n    /// @notice Set user application config.\n    /// @param oracle Oracle which user application choose.\n    /// @param relayer Relayer which user application choose.\n    function setAppConfig(address oracle, address relayer) external;\n\n    function defaultUC() external view returns (address oracle, address relayer);\n\n    /// @dev Check the msg if it is dispatched.\n    /// @param msgHash Hash of the checked message.\n    /// @return Return the dispatched result of the checked message.\n    function dones(bytes32 msgHash) external view returns (bool);\n\n    /// @dev Import hash by any oracle address.\n    /// @notice Hash is an abstract of the proof system, it can be a block hash or a message root hash,\n    ///  \t\tspecifically provided by oracles.\n    /// @param chainId The source chain id.\n    /// @param channel The message channel.\n    /// @param msgIndex The source chain message index.\n    /// @param hash_ The hash to import.\n    function importHash(uint256 chainId, address channel, uint256 msgIndex, bytes32 hash_) external;\n\n    /// @dev Fetch hash.\n    /// @param oracle The oracle address.\n    /// @param lookupKey The key for loop up hash.\n    /// @return Return the hash imported by the oracle.\n    function hashLookup(address oracle, bytes32 lookupKey) external view returns (bytes32);\n}\n"
          },
          "lib/ORMP/src/interfaces/IOracle.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./IVerifier.sol\";\n\ninterface IOracle is IVerifier {\n    /// @notice Fetch oracle price to relay message root to the destination chain.\n    /// @param toChainId The destination chain id.\n    /// @param ua The user application which send the message.\n    /// @return Oracle price in source native gas.\n    function fee(uint256 toChainId, address ua) external view returns (uint256);\n}\n"
          },
          "lib/ORMP/src/interfaces/IRelayer.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface IRelayer {\n    /// @notice Fetch relayer price to relay message to the destination chain.\n    /// @param toChainId The destination chain id.\n    /// @param ua The user application which send the message.\n    /// @param gasLimit Gas limit for destination user application used.\n    /// @param encoded The calldata which encoded by ABI Encoding.\n    /// @param params General extensibility for relayer to custom functionality.\n    /// @return Relayer price in source native gas.\n    function fee(uint256 toChainId, address ua, uint256 gasLimit, bytes calldata encoded, bytes calldata params)\n        external\n        view\n        returns (uint256);\n}\n"
          },
          "lib/ORMP/src/interfaces/IVerifier.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../Common.sol\";\n\ninterface IVerifier {\n    /// @notice Verify message proof\n    /// @dev Message proof provided by relayer. Oracle should provide message root of\n    ///      source chain, and verify the merkle proof of the message hash.\n    /// @param message The message info.\n    /// @param proof Proof of the message\n    /// @return Result of the message verify.\n    function verifyMessageProof(Message calldata message, bytes calldata proof) external view returns (bool);\n}\n"
          },
          "lib/ORMP/src/security/ExcessivelySafeCall.sol": {
            "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity 0.8.17;\n\n// Inspired: https://github.com/LayerZero-Labs/solidity-examples/blob/main/contracts/util/ExcessivelySafeCall.sol\n\nlibrary ExcessivelySafeCall {\n    /// @notice Use when you _really_ really _really_ don't trust the called\n    /// contract. This prevents the called contract from causing reversion of\n    /// the caller in as many ways as we can.\n    /// @dev The main difference between this and a solidity low-level call is\n    /// that we limit the number of bytes that the callee can cause to be\n    /// copied to caller memory. This prevents stupid things like malicious\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\n    /// to memory.\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _value Value in wei to send to the account\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function excessivelySafeCall(address _target, uint256 _gas, uint256 _value, uint16 _maxCopy, bytes memory _calldata)\n        internal\n        returns (bool, bytes memory)\n    {\n        // set up for assembly call\n        uint256 _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly (\"memory-safe\") {\n            _success :=\n                call(\n                    _gas, // gas\n                    _target, // recipient\n                    _value, // ether value\n                    add(_calldata, 0x20), // inloc\n                    mload(_calldata), // inlen\n                    0, // outloc\n                    0 // outlen\n                )\n            // limit our copy to 256 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) { _toCopy := _maxCopy }\n            // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n            // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n\n    /// @notice Use when you _really_ really _really_ don't trust the called\n    /// contract. This prevents the called contract from causing reversion of\n    /// the caller in as many ways as we can.\n    /// @dev The main difference between this and a solidity low-level call is\n    /// that we limit the number of bytes that the callee can cause to be\n    /// copied to caller memory. This prevents stupid things like malicious\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\n    /// to memory.\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function excessivelySafeStaticCall(address _target, uint256 _gas, uint16 _maxCopy, bytes memory _calldata)\n        internal\n        view\n        returns (bool, bytes memory)\n    {\n        // set up for assembly call\n        uint256 _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly (\"memory-safe\") {\n            _success :=\n                staticcall(\n                    _gas, // gas\n                    _target, // recipient\n                    add(_calldata, 0x20), // inloc\n                    mload(_calldata), // inlen\n                    0, // outloc\n                    0 // outlen\n                )\n            // limit our copy to 256 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) { _toCopy := _maxCopy }\n            // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n            // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n}\n"
          },
          "lib/ORMP/src/security/ReentrancyGuard.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nabstract contract ReentrancyGuard {\n    // send and receive nonreentrant lock\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n    uint256 private _send_state = 1;\n    uint256 private _receive_state = 1;\n\n    modifier sendNonReentrant() {\n        require(_send_state == _NOT_ENTERED, \"!send-reentrancy\");\n        _send_state = _ENTERED;\n        _;\n        _send_state = _NOT_ENTERED;\n    }\n\n    modifier recvNonReentrant() {\n        require(_receive_state == _NOT_ENTERED, \"!recv-reentrancy\");\n        _receive_state = _ENTERED;\n        _;\n        _receive_state = _NOT_ENTERED;\n    }\n}\n"
          },
          "lib/ORMP/src/user/AppBase.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"../interfaces/IORMP.sol\";\n\n// https://eips.ethereum.org/EIPS/eip-5164\nabstract contract AppBase {\n    modifier onlyORMP() virtual {\n        _;\n    }\n\n    function _messageId() internal pure returns (bytes32 _msgDataMessageId) {\n        require(msg.data.length >= 84, \"!messageId\");\n        assembly {\n            _msgDataMessageId := calldataload(sub(calldatasize(), 84))\n        }\n    }\n\n    function _fromChainId() internal pure returns (uint256 _msgDataFromChainId) {\n        require(msg.data.length >= 52, \"!fromChainId\");\n        assembly {\n            _msgDataFromChainId := calldataload(sub(calldatasize(), 52))\n        }\n    }\n\n    function _xmsgSender() internal pure returns (address payable _from) {\n        require(msg.data.length >= 20, \"!xmsgSender\");\n        assembly {\n            _from := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n}\n"
          },
          "lib/create3-deploy/src/CREATE3Factory.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {CREATE3} from \"solmate/utils/CREATE3.sol\";\n\nimport {ICREATE3Factory} from \"./ICREATE3Factory.sol\";\n\n/// @title Factory for deploying contracts to deterministic addresses via CREATE3\n/// @author echo77\n/// @author Inspired from https://github.com/ZeframLou/create3-factory\n/// @notice Enables deploying contracts using CREATE3. Each deployer (msg.sender) has\n/// its own namespace for deployed addresses.\ncontract CREATE3Factory is ICREATE3Factory {\n    /// @inheritdoc\tICREATE3Factory\n    function deploy(bytes32 salt, bytes memory creationCode) external payable override returns (address deployed) {\n        // hash salt with the deployer address to give each deployer its own namespace\n        salt = keccak256(abi.encodePacked(msg.sender, salt));\n        return CREATE3.deploy(salt, creationCode, msg.value);\n    }\n\n    /// @inheritdoc\tICREATE3Factory\n    function getDeployed(address deployer, bytes32 salt) external view override returns (address deployed) {\n        // hash salt with the deployer address to give each deployer its own namespace\n        salt = keccak256(abi.encodePacked(deployer, salt));\n        return CREATE3.getDeployed(salt);\n    }\n}\n"
          },
          "lib/create3-deploy/src/ICREATE3Factory.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\n/// @title Factory for deploying contracts to deterministic addresses via CREATE3\n/// @author echo77\n/// @author Inspired from https://github.com/ZeframLou/create3-factory\n/// @notice Enables deploying contracts using CREATE3. Each deployer (msg.sender) has\n/// its own namespace for deployed addresses.\ninterface ICREATE3Factory {\n    /// @notice Deploys a contract using CREATE3\n    /// @dev The provided salt is hashed together with msg.sender to generate the final salt\n    /// @param salt The deployer-specific salt for determining the deployed contract's address\n    /// @param creationCode The creation code of the contract to deploy\n    /// @return deployed The address of the deployed contract\n    function deploy(bytes32 salt, bytes memory creationCode) external payable returns (address deployed);\n\n    /// @notice Predicts the address of a deployed contract\n    /// @dev The provided salt is hashed together with the deployer address to generate the final salt\n    /// @param deployer The deployer account that will call deploy()\n    /// @param salt The deployer-specific salt for determining the deployed contract's address\n    /// @return deployed The address of the contract that will be deployed\n    function getDeployed(address deployer, bytes32 salt) external view returns (address deployed);\n}\n"
          },
          "lib/darwinia-msgport/lib/solmate/src/utils/Bytes32AddressLib.sol": {
            "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Library for converting between addresses and bytes32 values.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/Bytes32AddressLib.sol)\nlibrary Bytes32AddressLib {\n    function fromLast20Bytes(bytes32 bytesValue) internal pure returns (address) {\n        return address(uint160(uint256(bytesValue)));\n    }\n\n    function fillLast12Bytes(address addressValue) internal pure returns (bytes32) {\n        return bytes32(bytes20(addressValue));\n    }\n}\n"
          },
          "lib/darwinia-msgport/lib/solmate/src/utils/CREATE3.sol": {
            "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {Bytes32AddressLib} from \"./Bytes32AddressLib.sol\";\n\n/// @notice Deploy to deterministic addresses without an initcode factor.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/CREATE3.sol)\n/// @author Modified from 0xSequence (https://github.com/0xSequence/create3/blob/master/contracts/Create3.sol)\nlibrary CREATE3 {\n    using Bytes32AddressLib for bytes32;\n\n    //--------------------------------------------------------------------------------//\n    // Opcode     | Opcode + Arguments    | Description      | Stack View             //\n    //--------------------------------------------------------------------------------//\n    // 0x36       |  0x36                 | CALLDATASIZE     | size                   //\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 size                 //\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 0 size               //\n    // 0x37       |  0x37                 | CALLDATACOPY     |                        //\n    // 0x36       |  0x36                 | CALLDATASIZE     | size                   //\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 size                 //\n    // 0x34       |  0x34                 | CALLVALUE        | value 0 size           //\n    // 0xf0       |  0xf0                 | CREATE           | newContract            //\n    //--------------------------------------------------------------------------------//\n    // Opcode     | Opcode + Arguments    | Description      | Stack View             //\n    //--------------------------------------------------------------------------------//\n    // 0x67       |  0x67XXXXXXXXXXXXXXXX | PUSH8 bytecode   | bytecode               //\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 bytecode             //\n    // 0x52       |  0x52                 | MSTORE           |                        //\n    // 0x60       |  0x6008               | PUSH1 08         | 8                      //\n    // 0x60       |  0x6018               | PUSH1 18         | 24 8                   //\n    // 0xf3       |  0xf3                 | RETURN           |                        //\n    //--------------------------------------------------------------------------------//\n    bytes internal constant PROXY_BYTECODE = hex\"67_36_3d_3d_37_36_3d_34_f0_3d_52_60_08_60_18_f3\";\n\n    bytes32 internal constant PROXY_BYTECODE_HASH = keccak256(PROXY_BYTECODE);\n\n    function deploy(\n        bytes32 salt,\n        bytes memory creationCode,\n        uint256 value\n    ) internal returns (address deployed) {\n        bytes memory proxyChildBytecode = PROXY_BYTECODE;\n\n        address proxy;\n        assembly {\n            // Deploy a new contract with our pre-made bytecode via CREATE2.\n            // We start 32 bytes into the code to avoid copying the byte length.\n            proxy := create2(0, add(proxyChildBytecode, 32), mload(proxyChildBytecode), salt)\n        }\n        require(proxy != address(0), \"DEPLOYMENT_FAILED\");\n\n        deployed = getDeployed(salt);\n        (bool success, ) = proxy.call{value: value}(creationCode);\n        require(success && deployed.code.length != 0, \"INITIALIZATION_FAILED\");\n    }\n\n    function getDeployed(bytes32 salt) internal view returns (address) {\n        address proxy = keccak256(\n            abi.encodePacked(\n                // Prefix:\n                bytes1(0xFF),\n                // Creator:\n                address(this),\n                // Salt:\n                salt,\n                // Bytecode hash:\n                PROXY_BYTECODE_HASH\n            )\n        ).fromLast20Bytes();\n\n        return\n            keccak256(\n                abi.encodePacked(\n                    // 0xd6 = 0xc0 (short RLP prefix) + 0x16 (length of: 0x94 ++ proxy ++ 0x01)\n                    // 0x94 = 0x80 + 0x14 (0x14 = the length of an address, 20 bytes, in hex)\n                    hex\"d6_94\",\n                    proxy,\n                    hex\"01\" // Nonce of the proxy contract (1)\n                )\n            ).fromLast20Bytes();\n    }\n}\n"
          },
          "lib/darwinia-msgport/src/PortRegistry.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\";\n\n/// @title PortRegistry\n/// @notice PortRegistry will be deployed on each chain.\n/// - Could be used to verify whether the port has been registered.\n/// - Ports that be audited by MsgDAO is marked as `trusted`.\ncontract PortRegistry is Initializable, Ownable2Step, UUPSUpgradeable {\n    event SetPort(uint256 chainId, string name, address port);\n    event DeletePort(uint256 chainId, string name, address port);\n\n    // chainId => name => port\n    mapping(uint256 => mapping(string => address)) private _portLookup;\n    // chainId => port => name\n    mapping(uint256 => mapping(address => string)) private _nameLookup;\n\n    function initialize(address dao) public initializer {\n        _transferOwnership(dao);\n    }\n\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    /// @dev Fetch port address by chainId and name.\n    function get(uint256 chainId, string calldata name) external view returns (address) {\n        return _portLookup[chainId][name];\n    }\n\n    /// @dev Fetch port name by chainId and port address.\n    function get(uint256 chainId, address port) external view returns (string memory) {\n        return _nameLookup[chainId][port];\n    }\n\n    /// @dev Set a port.\n    function set(uint256 chainId, string calldata name, address port) external onlyOwner {\n        require(bytes(name).length > 0, \"!name\");\n        require(port != address(0), \"!port\");\n        _portLookup[chainId][name] = port;\n        _nameLookup[chainId][port] = name;\n        emit SetPort(chainId, name, port);\n    }\n\n    /// @dev Delete a port.\n    function del(uint256 chainId, string calldata name, address port) external onlyOwner {\n        delete _portLookup[chainId][name];\n        delete _nameLookup[chainId][port];\n        emit DeletePort(chainId, name, port);\n    }\n}\n"
          },
          "lib/darwinia-msgport/src/PortRegistryProxy.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\ncontract PortRegistryProxy is ERC1967Proxy {\n    constructor(address logic, bytes memory data) ERC1967Proxy(logic, data) {}\n}\n"
          },
          "lib/darwinia-msgport/src/interfaces/IMessagePort.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IMessagePort {\n    event MessageSent(\n        bytes32 indexed msgId, address fromDapp, uint256 toChainId, address toDapp, bytes message, bytes params\n    );\n    event MessageRecv(bytes32 indexed msgId, bool result, bytes returnData);\n\n    /// @dev Send a cross-chain message over the MessagePort.\n    /// @notice Send a cross-chain message over the MessagePort.\n    /// @param toChainId The message destination chain id. <https://eips.ethereum.org/EIPS/eip-155>\n    /// @param toDapp The user application contract address which receive the message.\n    /// @param message The calldata which encoded by ABI Encoding.\n    /// @param params Extend parameters to adapt to different message protocols.\n    /// @return msgId Return the ID of message.\n    function send(uint256 toChainId, address toDapp, bytes calldata message, bytes calldata params)\n        external\n        payable\n        returns (bytes32 msgId);\n\n    /// @notice Get a quote in source native gas, for the amount that send() requires to pay for message delivery.\n    ///         It should be noted that not all ports will implement this interface.\n    /// @dev If the messaging protocol does not support on-chain fetch fee, then revert with \"Unimplemented!\".\n    /// @param toChainId The message destination chain id. <https://eips.ethereum.org/EIPS/eip-155>\n    /// @param fromDapp The user application contract address which send the message.\n    /// @param toDapp The user application contract address which receive the message.\n    /// @param message The calldata which encoded by ABI Encoding.\n    /// @param params Extend parameters to adapt to different message protocols.\n    function fee(uint256 toChainId, address fromDapp, address toDapp, bytes calldata message, bytes calldata params)\n        external\n        view\n        returns (uint256);\n}\n"
          },
          "lib/darwinia-msgport/src/interfaces/IPortMetadata.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IPortMetadata {\n    event URI(string uri);\n\n    /// @notice Get the port name, it's globally unique and immutable.\n    /// @return The MessagePort name.\n    function name() external view returns (string memory);\n\n    /// @return The port metadata uri.\n    function uri() external view returns (string memory);\n}\n"
          },
          "lib/darwinia-msgport/src/interfaces/IPortRegistry.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IPortRegistry {\n    function get(uint256 chainId, address port) external view returns (string memory);\n    function get(uint256 chainId, string calldata name) external view returns (address);\n}\n"
          },
          "lib/darwinia-msgport/src/interfaces/ISafe.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nenum Operation {\n    Call,\n    DelegateCall\n}\n\ninterface ISafe {\n    function setup(\n        address[] calldata _owners,\n        uint256 _threshold,\n        address to,\n        bytes calldata data,\n        address fallbackHandler,\n        address paymentToken,\n        uint256 payment,\n        address payable paymentReceiver\n    ) external;\n    function enableModule(address module) external;\n    function execTransactionFromModuleReturnData(address to, uint256 value, bytes memory data, Operation operation)\n        external\n        returns (bool success, bytes memory returnData);\n}\n"
          },
          "lib/darwinia-msgport/src/interfaces/ISafeMsgportModule.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface ISafeMsgportModule {\n    function setup(address xAccount, uint256 chainId, address owner, address port_) external;\n}\n"
          },
          "lib/darwinia-msgport/src/interfaces/ISafeProxyFactory.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface ISafeProxyFactory {\n    function proxyCreationCode() external pure returns (bytes memory);\n}\n"
          },
          "lib/darwinia-msgport/src/ports/MultiPort.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"./base/BaseMessagePort.sol\";\nimport \"./base/PeerLookup.sol\";\nimport \"../interfaces/IPortRegistry.sol\";\nimport \"../interfaces/IPortMetadata.sol\";\nimport \"../interfaces/IMessagePort.sol\";\nimport \"../user/Application.sol\";\n\n/// @title MultiPort\n/// @notice Send message by multi message port.\ncontract MultiPort is Ownable2Step, Application, BaseMessagePort, PeerLookup {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @dev RemoteCallArgs\n    /// @param ports Message ports selected for send the message.\n    /// @param nonce Nonce for portMsgId uniqueness.\n    /// @param expiration The message considered be stale after the expiration in the number seconds.\n    /// @param params Params correspond with the selected ports.\n    /// @param fees Fees correspond with the selected ports.\n    struct RemoteCallArgs {\n        address[] ports;\n        uint256 nonce;\n        uint256 expiration;\n        bytes[] params;\n        uint256[] fees;\n    }\n\n    struct PortMsg {\n        uint256 fromChainId;\n        uint256 toChainId;\n        address fromDapp;\n        address toDapp;\n        uint256 nonce;\n        uint256 expiration;\n        bytes message;\n    }\n\n    /// @dev Threshold for multi port confirmation to execute msg.\n    uint256 public threshold;\n    /// @dev Trusted ports managed by dao.\n    EnumerableSet.AddressSet private _trustedPorts;\n\n    /// @dev portMsgId => done\n    mapping(bytes32 => bool) public doneOf;\n    /// @dev portMsgId => deliveryCount\n    mapping(bytes32 => uint256) public countOf;\n    /// @dev portMsgId => port => isDeliveried\n    /// @notice protect msg repeat by msgport\n    mapping(bytes32 => mapping(address => bool)) public deliverifyOf;\n\n    /// @dev The maximum duration that a message's expiration parameter can be set to\n    uint256 public constant MAX_MESSAGE_EXPIRATION = 30 days;\n\n    event SetThreshold(uint256 threshold);\n    event PortMessageSent(bytes32 indexed portMsgId, PortMsg portMsg);\n    event PortMessageConfirmation(bytes32 indexed portMsgId, address port);\n    event PortMessageExpired(bytes32 indexed portMsgId);\n    event PortMessageExecution(bytes32 indexed portMsgId);\n\n    modifier checkToDapp(address toDapp) override {\n        require(!_trustedPorts.contains(toDapp), \"!toDapp\");\n        _;\n    }\n\n    constructor(address dao, uint256 threshold_, string memory name) BaseMessagePort(name) {\n        _transferOwnership(dao);\n        _setThreshold(threshold_);\n    }\n\n    function setURI(string calldata uri) external onlyOwner {\n        _setURI(uri);\n    }\n\n    function setThreshold(uint256 threshold_) external onlyOwner {\n        _setThreshold(threshold_);\n    }\n\n    function _setThreshold(uint256 threshold_) internal {\n        require(threshold_ > 0, \"!threshold\");\n        threshold = threshold_;\n        emit SetThreshold(threshold_);\n    }\n\n    function addTrustedPort(address port) external onlyOwner {\n        require(_trustedPorts.add(port), \"!add\");\n    }\n\n    function rmTrustedPort(address port) external onlyOwner {\n        require(_trustedPorts.remove(port), \"!rm\");\n    }\n\n    function trustedPorts() public view returns (address[] memory) {\n        return _trustedPorts.values();\n    }\n\n    function trustedPortCount() public view returns (uint256) {\n        return _trustedPorts.length();\n    }\n\n    function isTrustedPort(address port) public view returns (bool) {\n        return _trustedPorts.contains(port);\n    }\n\n    function setPeer(uint256 chainId, address peer) external onlyOwner {\n        _setPeer(chainId, peer);\n    }\n\n    function _send(address fromDapp, uint256 toChainId, address toDapp, bytes calldata message, bytes calldata params)\n        internal\n        override\n        returns (bytes32)\n    {\n        RemoteCallArgs memory args = abi.decode(params, (RemoteCallArgs));\n\n        uint256 len = args.ports.length;\n        require(toChainId != LOCAL_CHAINID(), \"!toChainId\");\n        require(len == args.params.length, \"!len\");\n        require(len == args.fees.length, \"!len\");\n        if (block.timestamp > args.expiration || block.timestamp + MAX_MESSAGE_EXPIRATION < args.expiration) {\n            revert(\"!expiration\");\n        }\n\n        PortMsg memory portMsg = PortMsg({\n            fromChainId: LOCAL_CHAINID(),\n            toChainId: toChainId,\n            fromDapp: fromDapp,\n            toDapp: toDapp,\n            nonce: args.nonce,\n            expiration: args.expiration,\n            message: message\n        });\n        bytes memory encoded = abi.encodeWithSelector(MultiPort.multiRecv.selector, portMsg);\n        bytes32 portMsgId = hash(portMsg);\n        _multiSend(args, toChainId, encoded);\n        emit PortMessageSent(portMsgId, portMsg);\n        return portMsgId;\n    }\n\n    function _multiSend(RemoteCallArgs memory args, uint256 toChainId, bytes memory encoded) internal {\n        uint256 len = args.ports.length;\n        uint256 totalFee = 0;\n        for (uint256 i = 0; i < len; i++) {\n            uint256 fee = args.fees[i];\n            address port = args.ports[i];\n            require(isTrustedPort(port), \"!trusted\");\n            IMessagePort(port).send{value: fee}(toChainId, _checkedPeerOf(toChainId), encoded, args.params[i]);\n            totalFee += fee;\n        }\n\n        require(totalFee == msg.value, \"!fees\");\n    }\n\n    function multiRecv(PortMsg calldata portMsg) external payable {\n        address port = _msgPort();\n        require(isTrustedPort(port), \"!trusted\");\n        uint256 fromChainId = _fromChainId();\n        require(LOCAL_CHAINID() == portMsg.toChainId, \"!toChainId\");\n        require(fromChainId == portMsg.fromChainId, \"!fromChainId\");\n        require(fromChainId != LOCAL_CHAINID(), \"!fromChainId\");\n        require(_xmsgSender() == _checkedPeerOf(fromChainId), \"!xmsgSender\");\n        bytes32 portMsgId = hash(portMsg);\n        require(deliverifyOf[portMsgId][port] == false, \"deliveried\");\n        deliverifyOf[portMsgId][port] = true;\n        ++countOf[portMsgId];\n\n        emit PortMessageConfirmation(portMsgId, port);\n\n        if (block.timestamp > portMsg.expiration || block.timestamp + MAX_MESSAGE_EXPIRATION < portMsg.expiration) {\n            emit PortMessageExpired(portMsgId);\n            return;\n        }\n\n        require(doneOf[portMsgId] == false, \"done\");\n        if (countOf[portMsgId] >= threshold) {\n            doneOf[portMsgId] = true;\n            _recv(portMsgId, portMsg.fromChainId, portMsg.fromDapp, portMsg.toDapp, portMsg.message);\n            emit PortMessageExecution(portMsgId);\n        }\n    }\n\n    function hash(PortMsg memory portMsg) public pure returns (bytes32) {\n        return keccak256(abi.encode(portMsg));\n    }\n}\n"
          },
          "lib/darwinia-msgport/src/ports/ORMPUpgradeablePort.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./base/BaseMessagePort.sol\";\nimport \"./base/PeerLookup.sol\";\nimport \"ORMP/src/interfaces/IORMP.sol\";\nimport \"ORMP/src/user/AppBase.sol\";\nimport \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\ncontract ORMPUpgradeablePort is Ownable2Step, AppBase, BaseMessagePort, PeerLookup {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    address public ormp;\n\n    EnumerableSet.AddressSet internal historyORMPSet;\n\n    event SetORMP(address previousORMP, address currentORMP);\n    event HistoryORMPAdded(address ormp);\n    event HistoryORMPDeleted(address ormp);\n\n    modifier onlyORMP() override {\n        require(historyORMPSet.contains(msg.sender), \"!ormps\");\n        _;\n    }\n\n    modifier checkToDapp(address toDapp) override {\n        require(!historyORMPSet.contains(toDapp), \"!toDapp\");\n        _;\n    }\n\n    constructor(address dao, address ormp_, string memory name) BaseMessagePort(name) {\n        _transferOwnership(dao);\n        ormp = ormp_;\n        historyORMPSet.add(ormp_);\n    }\n\n    /// @notice How to migrate to new ORMP contract.\n    /// 1. setORMP to new ORMP contract.\n    /// 2. delete previousORMP after relay on-flight message.\n    function setORMP(address ormp_) external onlyOwner {\n        address previousORMP = ormp;\n        ormp = ormp_;\n        require(historyORMPSet.add(ormp_), \"!add\");\n        emit SetORMP(previousORMP, ormp_);\n        emit HistoryORMPAdded(ormp_);\n    }\n\n    function delORMP(address ormp_) external onlyOwner {\n        require(ormp != ormp_, \"sender\");\n        require(historyORMPSet.remove(ormp_), \"!del\");\n        emit HistoryORMPDeleted(ormp_);\n    }\n\n    function setAppConfig(address ormp_, address oracle, address relayer) external onlyOwner {\n        require(historyORMPSet.contains(ormp_), \"!exist\");\n        IORMP(ormp_).setAppConfig(oracle, relayer);\n    }\n\n    function setURI(string calldata uri) external onlyOwner {\n        _setURI(uri);\n    }\n\n    function setPeer(uint256 chainId, address peer) external onlyOwner {\n        _setPeer(chainId, peer);\n    }\n\n    function historyORMPLength() public view returns (uint256) {\n        return historyORMPSet.length();\n    }\n\n    function historyORMPs() public view returns (address[] memory) {\n        return historyORMPSet.values();\n    }\n\n    function historyORMPAt(uint256 index) public view returns (address) {\n        return historyORMPSet.at(index);\n    }\n\n    function historyORMPContains(address ormp_) public view returns (bool) {\n        return historyORMPSet.contains(ormp_);\n    }\n\n    function _send(address fromDapp, uint256 toChainId, address toDapp, bytes calldata message, bytes calldata params)\n        internal\n        override\n        returns (bytes32)\n    {\n        (uint256 gasLimit, address refund, bytes memory ormpParams) = abi.decode(params, (uint256, address, bytes));\n        bytes memory encoded = abi.encodeWithSelector(this.recv.selector, fromDapp, toDapp, message);\n        return IORMP(ormp).send{value: msg.value}(\n            toChainId, _checkedPeerOf(toChainId), gasLimit, encoded, refund, ormpParams\n        );\n    }\n\n    function recv(address fromDapp, address toDapp, bytes calldata message) public payable virtual onlyORMP {\n        uint256 fromChainId = _fromChainId();\n        require(_xmsgSender() == _checkedPeerOf(fromChainId), \"!auth\");\n        _recv(_messageId(), fromChainId, fromDapp, toDapp, message);\n    }\n\n    function fee(uint256 toChainId, address fromDapp, address toDapp, bytes calldata message, bytes calldata params)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        (uint256 gasLimit,, bytes memory ormpParams) = abi.decode(params, (uint256, address, bytes));\n        bytes memory encoded = abi.encodeWithSelector(this.recv.selector, fromDapp, toDapp, message);\n        return IORMP(ormp).fee(toChainId, address(this), gasLimit, encoded, ormpParams);\n    }\n}\n"
          },
          "lib/darwinia-msgport/src/ports/base/BaseMessagePort.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IMessagePort.sol\";\nimport \"./PortMetadata.sol\";\n\nabstract contract BaseMessagePort is IMessagePort, PortMetadata {\n    modifier checkToDapp(address) virtual {\n        _;\n    }\n\n    constructor(string memory name) PortMetadata(name) {}\n\n    function LOCAL_CHAINID() public view returns (uint256) {\n        return block.chainid;\n    }\n\n    /// @dev Send a cross-chain message over the MessagePort.\n    ///      Port developer should implement this, then it will be called by `send`.\n    /// @param fromDapp The real sender account who send the message.\n    /// @param toChainId The message destination chain id. <https://eips.ethereum.org/EIPS/eip-155>\n    /// @param toDapp The user application contract address which receive the message.\n    /// @param message The calldata which encoded by ABI Encoding.\n    /// @param params Extend parameters to adapt to different message protocols.\n    /// @return msgId Return the ID of message.\n    function _send(address fromDapp, uint256 toChainId, address toDapp, bytes calldata message, bytes calldata params)\n        internal\n        virtual\n        returns (bytes32 msgId);\n\n    function send(uint256 toChainId, address toDapp, bytes calldata message, bytes calldata params)\n        external\n        payable\n        returns (bytes32 msgId)\n    {\n        msgId = _send(msg.sender, toChainId, toDapp, message, params);\n        emit MessageSent(msgId, msg.sender, toChainId, toDapp, message, params);\n    }\n\n    /// @dev Make toDapp accept messages.\n    ///      This should be called by message port when a message is received.\n    /// @param msgId The ID of message.\n    /// @param fromChainId The source chainId, standard evm chainId.\n    /// @param fromDapp The message sender in source chain.\n    /// @param toDapp The message receiver in dest chain.\n    /// @param message The message body.\n    function _recv(bytes32 msgId, uint256 fromChainId, address fromDapp, address toDapp, bytes memory message)\n        internal\n        checkToDapp(toDapp)\n    {\n        (bool success, bytes memory returndata) =\n            toDapp.call{value: msg.value}(abi.encodePacked(message, msgId, fromChainId, fromDapp));\n        emit MessageRecv(msgId, success, returndata);\n    }\n\n    function fee(uint256, address, address, bytes calldata, bytes calldata) external view virtual returns (uint256) {\n        revert(\"Unimplemented!\");\n    }\n}\n"
          },
          "lib/darwinia-msgport/src/ports/base/PeerLookup.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract PeerLookup {\n    // chainId => peer\n    mapping(uint256 => address) internal _peers;\n\n    event PeerSet(uint256 chainId, address peer);\n\n    function peerOf(uint256 chainId) public view virtual returns (address) {\n        return _peers[chainId];\n    }\n\n    function _setPeer(uint256 chainId, address peer) internal virtual {\n        _peers[chainId] = peer;\n        emit PeerSet(chainId, peer);\n    }\n\n    function _checkedPeerOf(uint256 chainId) internal view virtual returns (address p) {\n        p = _peers[chainId];\n        require(p != address(0), \"!peer\");\n    }\n}\n"
          },
          "lib/darwinia-msgport/src/ports/base/PortMetadata.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IPortMetadata.sol\";\n\ncontract PortMetadata is IPortMetadata {\n    string internal _name;\n    string internal _uri;\n\n    constructor(string memory name_) {\n        _name = name_;\n    }\n\n    function _setURI(string memory uri_) internal virtual {\n        _uri = uri_;\n        emit URI(uri_);\n    }\n\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    function uri() public view virtual returns (string memory) {\n        return _uri;\n    }\n}\n"
          },
          "lib/darwinia-msgport/src/user/Application.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nabstract contract Application {\n    function _msgPort() internal view returns (address _port) {\n        _port = msg.sender;\n    }\n\n    function _messageId() internal pure returns (bytes32 _msgDataMessageId) {\n        require(msg.data.length >= 84, \"!messageId\");\n        assembly {\n            _msgDataMessageId := calldataload(sub(calldatasize(), 84))\n        }\n    }\n\n    /// @notice The cross-chain message source chainId\n    function _fromChainId() internal pure returns (uint256 _msgDataFromChainId) {\n        require(msg.data.length >= 52, \"!fromChainId\");\n        assembly {\n            _msgDataFromChainId := calldataload(sub(calldatasize(), 52))\n        }\n    }\n\n    /// @notice Get the source chain fromDapp address.\n    function _xmsgSender() internal pure returns (address payable _from) {\n        require(msg.data.length >= 20, \"!fromDapp\");\n        assembly {\n            _from := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n}\n"
          },
          "lib/darwinia-msgport/src/user/xAuth.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"./Application.sol\";\nimport \"../interfaces/IPortRegistry.sol\";\n\nabstract contract xAuth is Application {\n    function xOwner() public virtual returns (uint256, address);\n    function checkPort(address port) public virtual returns (bool);\n\n    function _checkXAuth() internal virtual {\n        address port = _msgPort();\n        uint256 fromChainId = _fromChainId();\n        (uint256 chainId, address owner) = xOwner();\n        require(fromChainId != block.chainid, \"!fromChainId\");\n        require(checkPort(port), \"!trusted\");\n        require(fromChainId == chainId, \"!xOwner.chainId\");\n        require(_xmsgSender() == owner, \"!xOwner.owner\");\n    }\n}\n"
          },
          "lib/darwinia-msgport/src/utils/CREATE3.sol": {
            "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {Bytes32AddressLib} from \"solmate/utils/Bytes32AddressLib.sol\";\n\n/// @notice Deploy to deterministic addresses without an initcode factor.\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/CREATE3.sol)\nlibrary CREATE3 {\n    using Bytes32AddressLib for bytes32;\n\n    //--------------------------------------------------------------------------------//\n    // Opcode     | Opcode + Arguments    | Description      | Stack View             //\n    //--------------------------------------------------------------------------------//\n    // 0x36       |  0x36                 | CALLDATASIZE     | size                   //\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 size                 //\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 0 size               //\n    // 0x37       |  0x37                 | CALLDATACOPY     |                        //\n    // 0x36       |  0x36                 | CALLDATASIZE     | size                   //\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 size                 //\n    // 0x34       |  0x34                 | CALLVALUE        | value 0 size           //\n    // 0xf0       |  0xf0                 | CREATE           | newContract            //\n    //--------------------------------------------------------------------------------//\n    // Opcode     | Opcode + Arguments    | Description      | Stack View             //\n    //--------------------------------------------------------------------------------//\n    // 0x67       |  0x67XXXXXXXXXXXXXXXX | PUSH8 bytecode   | bytecode               //\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 bytecode             //\n    // 0x52       |  0x52                 | MSTORE           |                        //\n    // 0x60       |  0x6008               | PUSH1 08         | 8                      //\n    // 0x60       |  0x6018               | PUSH1 18         | 24 8                   //\n    // 0xf3       |  0xf3                 | RETURN           |                        //\n    //--------------------------------------------------------------------------------//\n    bytes internal constant PROXY_BYTECODE = hex\"67363d3d37363d34f03d5260086018f3\";\n\n    bytes32 internal constant PROXY_BYTECODE_HASH = keccak256(PROXY_BYTECODE);\n\n    function deploy(bytes32 salt, bytes memory creationCode1, address implementation)\n        internal\n        returns (address deployed1, address deployed2)\n    {\n        bytes memory proxyChildBytecode = PROXY_BYTECODE;\n\n        address proxy;\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Deploy a new contract with our pre-made bytecode via CREATE2.\n            // We start 32 bytes into the code to avoid copying the byte length.\n            proxy := create2(0, add(proxyChildBytecode, 32), mload(proxyChildBytecode), salt)\n        }\n        require(proxy != address(0), \"DEPLOYMENT_FAILED\");\n\n        (deployed1, deployed2) = getDeployed(salt, address(this));\n        (bool success,) = proxy.call(creationCode1);\n        require(success && deployed1.code.length != 0, \"INITIALIZATION_FAILED1\");\n        bytes memory creationCode2 = clone(implementation);\n        (success,) = proxy.call(creationCode2);\n        require(success && deployed2.code.length != 0, \"INITIALIZATION_FAILED2\");\n    }\n\n    function clone(address target) internal pure returns (bytes memory) {\n        bytes20 targetBytes = bytes20(target);\n        bytes memory code = new bytes(0x37);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(add(code, 0x20), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(code, 0x34), targetBytes)\n            mstore(add(code, 0x48), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n        }\n        return code;\n    }\n\n    function getDeployed(bytes32 salt, address factory) internal pure returns (address, address) {\n        address proxy = keccak256(abi.encodePacked(bytes1(0xFF), factory, salt, PROXY_BYTECODE_HASH))\n            // Prefix:\n            // Creator:\n            // Salt:\n            // Bytecode hash:\n            .fromLast20Bytes();\n\n        address deployed1 = keccak256(abi.encodePacked(hex\"d694\", proxy, hex\"01\")) // Nonce of the proxy contract (1)\n            // 0xd6 = 0xc0 (short RLP prefix) + 0x16 (length of: 0x94 ++ proxy ++ 0x01)\n            // 0x94 = 0x80 + 0x14 (0x14 = the length of an address, 20 bytes, in hex)\n            .fromLast20Bytes();\n\n        address deployed2 = keccak256(abi.encodePacked(hex\"d694\", proxy, hex\"02\")) // Nonce of the proxy contract (2)\n            // 0xd6 = 0xc0 (short RLP prefix) + 0x16 (length of: 0x94 ++ proxy ++ 0x02)\n            // 0x94 = 0x80 + 0x14 (0x14 = the length of an address, 20 bytes, in hex)\n            .fromLast20Bytes();\n        return (deployed1, deployed2);\n    }\n}\n"
          },
          "lib/darwinia-msgport/src/xAccount/SafeMsgportModule.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../interfaces/ISafe.sol\";\nimport \"../user/xAuth.sol\";\n\ncontract SafeMsgportModule is xAuth {\n    address public port;\n\n    address public childXAccount;\n    uint256 public rootChainid;\n    address public rootOwner;\n\n    event SetPort(address port);\n    event ModuleTransactionExecuted(address target, uint256 value, bytes data, Operation operation, bool result);\n\n    error AlreadySetup();\n    error ZeroChainId();\n    error SendEtherFailed(bytes reason);\n\n    constructor() {\n        rootChainid = 1;\n    }\n\n    function setup(address xAccount, uint256 chainId, address owner, address port_) external {\n        if (rootChainid > 0) {\n            revert AlreadySetup();\n        }\n        if (chainId == 0) {\n            revert ZeroChainId();\n        }\n        port = port_;\n        childXAccount = xAccount;\n        rootChainid = chainId;\n        rootOwner = owner;\n        emit SetPort(port_);\n    }\n\n    /// @dev Fetch the xAccount xOwner.\n    /// @return (chainId, owner)\n    ///   - chainId Chain id that xAccount belongs in.\n    ///   - owner Owner that xAccount belongs to.\n    function xOwner() public view override returns (uint256, address) {\n        return (rootChainid, rootOwner);\n    }\n\n    /// @dev Check that the xCall originates from the port.\n    /// @return Check result.\n    function checkPort(address port_) public view override returns (bool) {\n        return port == port_;\n    }\n\n    /// @dev Set port.\n    /// @param port_ New port.\n    function setPort(address port_) external {\n        _checkXAuth();\n        port = port_;\n        emit SetPort(port_);\n    }\n\n    /// @dev Receive xCall from root chain xOwner.\n    /// @param target Target of the transaction that should be executed\n    /// @param value Wei value of the transaction that should be executed\n    /// @param data Data of the transaction that should be executed\n    /// @param operation Operation (Call or Delegatecall) of the transaction that should be executed\n    /// @return xExecute return data Return data after xCall.\n    function xExecute(address target, uint256 value, bytes calldata data, Operation operation)\n        external\n        payable\n        returns (bytes memory)\n    {\n        _checkXAuth();\n        if (msg.value > 0) {\n            (bool s, bytes memory r) = childXAccount.call{value: msg.value}(\"\");\n            if (!s) revert SendEtherFailed(r);\n        }\n        (bool success, bytes memory returnData) =\n            ISafe(childXAccount).execTransactionFromModuleReturnData(target, value, data, operation);\n        emit ModuleTransactionExecuted(target, value, data, operation, success);\n        return returnData;\n    }\n}\n"
          },
          "lib/darwinia-msgport/src/xAccount/XAccountFactory.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport \"../interfaces/ISafeMsgportModule.sol\";\nimport \"../interfaces/ISafeProxyFactory.sol\";\nimport \"../interfaces/ISafe.sol\";\nimport \"../interfaces/IPortRegistry.sol\";\nimport \"../interfaces/IMessagePort.sol\";\nimport \"../ports/base/PortMetadata.sol\";\nimport \"../user/Application.sol\";\nimport \"../utils/CREATE3.sol\";\n\n/// @title XAccountFactory\n/// @dev XAccountFactory is a factory contract for create xAccount.\n///   - 1 account only have 1 xAccount on target chain for each factory.\ncontract XAccountFactory is Ownable2Step, Application, PortMetadata {\n    address public safeMsgportModule;\n    address public safeFallbackHandler;\n    address public safeSingleton;\n    ISafeProxyFactory public safeFactory;\n\n    IPortRegistry public immutable REGISTRY;\n\n    address internal constant DEAD_OWNER = 0xDDdDddDdDdddDDddDDddDDDDdDdDDdDDdDDDDDDd;\n\n    event XAccountCreated(uint256 fromChainId, address deployer, address xAccount, address module, address port);\n\n    constructor(\n        address dao,\n        address module,\n        address sfactory,\n        address singleton,\n        address fallbackHandler,\n        address registry,\n        string memory name\n    ) PortMetadata(name) {\n        _transferOwnership(dao);\n        safeMsgportModule = module;\n        safeSingleton = singleton;\n        safeFallbackHandler = fallbackHandler;\n        safeFactory = ISafeProxyFactory(sfactory);\n        REGISTRY = IPortRegistry(registry);\n    }\n\n    function LOCAL_CHAINID() public view returns (uint256) {\n        return block.chainid;\n    }\n\n    function setSafeFactory(address factory) external onlyOwner {\n        safeFactory = ISafeProxyFactory(factory);\n    }\n\n    function setSafeSingleton(address singleton) external onlyOwner {\n        safeSingleton = singleton;\n    }\n\n    function setSafeFallbackHandler(address fallbackHandler) external onlyOwner {\n        safeFallbackHandler = fallbackHandler;\n    }\n\n    function setSafeMsgportModule(address module) external onlyOwner {\n        safeMsgportModule = module;\n    }\n\n    function setURI(string calldata uri) external onlyOwner {\n        _setURI(uri);\n    }\n\n    function isRegistred(address port) public view returns (bool) {\n        return bytes(REGISTRY.get(LOCAL_CHAINID(), port)).length > 0;\n    }\n\n    function _toFactory(uint256 toChainId) internal view returns (address l) {\n        l = REGISTRY.get(toChainId, name());\n        require(l != address(0), \"!to\");\n    }\n\n    function _fromFactory(uint256 fromChainId) internal view returns (address) {\n        return REGISTRY.get(fromChainId, name());\n    }\n\n    /// @dev Cross chian function for create xAccount on target chain.\n    /// @notice If recovery address is `address(0)`, do not enabale recovery module.\n    /// @param name Port name that used for create xAccount.\n    /// @param toChainId Target chain id.\n    /// @param params Port params correspond with the port.\n    /// @param recovery The default safe recovery module address on target chain for xAccount.\n    function xCreate(string calldata name, uint256 toChainId, bytes calldata params, address recovery)\n        external\n        payable\n    {\n        uint256 fee = msg.value;\n        require(toChainId != LOCAL_CHAINID(), \"!toChainId\");\n\n        address deployer = msg.sender;\n        bytes memory encoded = abi.encodeWithSelector(XAccountFactory.xDeploy.selector, deployer, recovery);\n        address port = REGISTRY.get(LOCAL_CHAINID(), name);\n        IMessagePort(port).send{value: fee}(toChainId, _toFactory(toChainId), encoded, params);\n    }\n\n    /// @dev Create xAccount on target chain.\n    /// @notice Only could be called by source chain.\n    /// @param deployer Deployer on source chain.\n    /// @param recovery The default safe recovery module address for xAccount.\n    /// @return Deployed xAccount address.\n    function xDeploy(address deployer, address recovery) external returns (address, address) {\n        address port = _msgPort();\n        uint256 fromChainId = _fromChainId();\n        require(isRegistred(port), \"!port\");\n        require(_xmsgSender() == _fromFactory(fromChainId), \"!xmsgSender\");\n\n        return _deploy(fromChainId, deployer, port, recovery);\n    }\n\n    function _deploy(uint256 chainId, address deployer, address port, address recovery)\n        internal\n        returns (address proxy, address module)\n    {\n        require(chainId != LOCAL_CHAINID(), \"!chainId\");\n\n        bytes32 salt = keccak256(abi.encodePacked(chainId, deployer));\n        (proxy, module) = _deployXAccount(salt);\n        _setupProxy(proxy, module, recovery);\n        _setupModule(module, proxy, chainId, deployer, port);\n\n        emit XAccountCreated(chainId, deployer, proxy, module, port);\n    }\n\n    function setupModules(address module, address recovery) external {\n        ISafe safe = ISafe(address(this));\n        safe.enableModule(module);\n        if (recovery != address(0)) safe.enableModule(recovery);\n    }\n\n    function _setupProxy(address proxy, address module, address recovery) internal {\n        bytes memory setupModulesData = abi.encodeWithSelector(XAccountFactory.setupModules.selector, module, recovery);\n        uint256 threshold = 1;\n        address[] memory owners = new address[](1);\n        owners[0] = DEAD_OWNER;\n        ISafe(proxy).setup(\n            owners,\n            threshold,\n            address(this),\n            setupModulesData,\n            safeFallbackHandler,\n            address(0x0),\n            0,\n            payable(address(0x0))\n        );\n    }\n\n    function _setupModule(address module, address proxy, uint256 chainId, address deployer, address port) internal {\n        ISafeMsgportModule(module).setup(proxy, chainId, deployer, port);\n    }\n\n    function _deployXAccount(bytes32 salt) internal returns (address proxy, address module) {\n        (proxy, module) = CREATE3.getDeployed(salt, address(this));\n        bytes memory creationCode1 = safeFactory.proxyCreationCode();\n        bytes memory deploymentCode1 = abi.encodePacked(creationCode1, uint256(uint160(safeSingleton)));\n\n        (proxy, module) = CREATE3.deploy(salt, deploymentCode1, safeMsgportModule);\n    }\n\n    /// @dev Calculate xAccount address on target chain.\n    /// @notice The module address is only effective during its creation and may be replaced by the xAccount in the future.\n    /// @param fromChainId Chain id that xAccount belongs in.\n    /// @param toChainId Chain id that xAccount lives in.\n    /// @param deployer Owner that xAccount belongs to.\n    /// @return (xAccount address, module address).\n    function xAccountOf(uint256 fromChainId, uint256 toChainId, address deployer)\n        public\n        view\n        returns (address, address)\n    {\n        return xAccountOf(fromChainId, deployer, _toFactory(toChainId));\n    }\n\n    /// @dev Calculate xAccount address.\n    /// @notice The module address is only effective during its creation and may be replaced by the xAccount in the future.\n    /// @param fromChainId Chain id that xAccount belongs in.\n    /// @param deployer Owner that xAccount belongs to.\n    /// @param factory Factory that create xAccount.\n    /// @return (xAccount address, module address).\n    function xAccountOf(uint256 fromChainId, address deployer, address factory)\n        public\n        pure\n        returns (address, address)\n    {\n        bytes32 salt = keccak256(abi.encodePacked(fromChainId, deployer));\n        return CREATE3.getDeployed(salt, factory);\n    }\n}\n"
          },
          "lib/forge-std/src/Base.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {StdStorage} from \"./StdStorage.sol\";\nimport {Vm, VmSafe} from \"./Vm.sol\";\n\nabstract contract CommonBase {\n    // Cheat code address, 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D.\n    address internal constant VM_ADDRESS = address(uint160(uint256(keccak256(\"hevm cheat code\"))));\n    // console.sol and console2.sol work by executing a staticcall to this address.\n    address internal constant CONSOLE = 0x000000000000000000636F6e736F6c652e6c6f67;\n    // Used when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.\n    address internal constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;\n    // Default address for tx.origin and msg.sender, 0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38.\n    address internal constant DEFAULT_SENDER = address(uint160(uint256(keccak256(\"foundry default caller\"))));\n    // Address of the test contract, deployed by the DEFAULT_SENDER.\n    address internal constant DEFAULT_TEST_CONTRACT = 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f;\n    // Deterministic deployment address of the Multicall3 contract.\n    address internal constant MULTICALL3_ADDRESS = 0xcA11bde05977b3631167028862bE2a173976CA11;\n    // The order of the secp256k1 curve.\n    uint256 internal constant SECP256K1_ORDER =\n        115792089237316195423570985008687907852837564279074904382605163141518161494337;\n\n    uint256 internal constant UINT256_MAX =\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    Vm internal constant vm = Vm(VM_ADDRESS);\n    StdStorage internal stdstore;\n}\n\nabstract contract TestBase is CommonBase {}\n\nabstract contract ScriptBase is CommonBase {\n    VmSafe internal constant vmSafe = VmSafe(VM_ADDRESS);\n}\n"
          },
          "lib/forge-std/src/Script.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\n// 💬 ABOUT\n// Forge Std's default Script.\n\n// 🧩 MODULES\nimport {console} from \"./console.sol\";\nimport {console2} from \"./console2.sol\";\nimport {safeconsole} from \"./safeconsole.sol\";\nimport {StdChains} from \"./StdChains.sol\";\nimport {StdCheatsSafe} from \"./StdCheats.sol\";\nimport {stdJson} from \"./StdJson.sol\";\nimport {stdMath} from \"./StdMath.sol\";\nimport {StdStorage, stdStorageSafe} from \"./StdStorage.sol\";\nimport {StdStyle} from \"./StdStyle.sol\";\nimport {StdUtils} from \"./StdUtils.sol\";\nimport {VmSafe} from \"./Vm.sol\";\n\n// 📦 BOILERPLATE\nimport {ScriptBase} from \"./Base.sol\";\n\n// ⭐️ SCRIPT\nabstract contract Script is ScriptBase, StdChains, StdCheatsSafe, StdUtils {\n    // Note: IS_SCRIPT() must return true.\n    bool public IS_SCRIPT = true;\n}\n"
          },
          "lib/forge-std/src/StdChains.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {VmSafe} from \"./Vm.sol\";\n\n/**\n * StdChains provides information about EVM compatible chains that can be used in scripts/tests.\n * For each chain, the chain's name, chain ID, and a default RPC URL are provided. Chains are\n * identified by their alias, which is the same as the alias in the `[rpc_endpoints]` section of\n * the `foundry.toml` file. For best UX, ensure the alias in the `foundry.toml` file match the\n * alias used in this contract, which can be found as the first argument to the\n * `setChainWithDefaultRpcUrl` call in the `initializeStdChains` function.\n *\n * There are two main ways to use this contract:\n *   1. Set a chain with `setChain(string memory chainAlias, ChainData memory chain)` or\n *      `setChain(string memory chainAlias, Chain memory chain)`\n *   2. Get a chain with `getChain(string memory chainAlias)` or `getChain(uint256 chainId)`.\n *\n * The first time either of those are used, chains are initialized with the default set of RPC URLs.\n * This is done in `initializeStdChains`, which uses `setChainWithDefaultRpcUrl`. Defaults are recorded in\n * `defaultRpcUrls`.\n *\n * The `setChain` function is straightforward, and it simply saves off the given chain data.\n *\n * The `getChain` methods use `getChainWithUpdatedRpcUrl` to return a chain. For example, let's say\n * we want to retrieve the RPC URL for `mainnet`:\n *   - If you have specified data with `setChain`, it will return that.\n *   - If you have configured a mainnet RPC URL in `foundry.toml`, it will return the URL, provided it\n *     is valid (e.g. a URL is specified, or an environment variable is given and exists).\n *   - If neither of the above conditions is met, the default data is returned.\n *\n * Summarizing the above, the prioritization hierarchy is `setChain` -> `foundry.toml` -> environment variable -> defaults.\n */\nabstract contract StdChains {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    bool private stdChainsInitialized;\n\n    struct ChainData {\n        string name;\n        uint256 chainId;\n        string rpcUrl;\n    }\n\n    struct Chain {\n        // The chain name.\n        string name;\n        // The chain's Chain ID.\n        uint256 chainId;\n        // The chain's alias. (i.e. what gets specified in `foundry.toml`).\n        string chainAlias;\n        // A default RPC endpoint for this chain.\n        // NOTE: This default RPC URL is included for convenience to facilitate quick tests and\n        // experimentation. Do not use this RPC URL for production test suites, CI, or other heavy\n        // usage as you will be throttled and this is a disservice to others who need this endpoint.\n        string rpcUrl;\n    }\n\n    // Maps from the chain's alias (matching the alias in the `foundry.toml` file) to chain data.\n    mapping(string => Chain) private chains;\n    // Maps from the chain's alias to it's default RPC URL.\n    mapping(string => string) private defaultRpcUrls;\n    // Maps from a chain ID to it's alias.\n    mapping(uint256 => string) private idToAlias;\n\n    bool private fallbackToDefaultRpcUrls = true;\n\n    // The RPC URL will be fetched from config or defaultRpcUrls if possible.\n    function getChain(string memory chainAlias) internal virtual returns (Chain memory chain) {\n        require(bytes(chainAlias).length != 0, \"StdChains getChain(string): Chain alias cannot be the empty string.\");\n\n        initializeStdChains();\n        chain = chains[chainAlias];\n        require(\n            chain.chainId != 0,\n            string(abi.encodePacked(\"StdChains getChain(string): Chain with alias \\\"\", chainAlias, \"\\\" not found.\"))\n        );\n\n        chain = getChainWithUpdatedRpcUrl(chainAlias, chain);\n    }\n\n    function getChain(uint256 chainId) internal virtual returns (Chain memory chain) {\n        require(chainId != 0, \"StdChains getChain(uint256): Chain ID cannot be 0.\");\n        initializeStdChains();\n        string memory chainAlias = idToAlias[chainId];\n\n        chain = chains[chainAlias];\n\n        require(\n            chain.chainId != 0,\n            string(abi.encodePacked(\"StdChains getChain(uint256): Chain with ID \", vm.toString(chainId), \" not found.\"))\n        );\n\n        chain = getChainWithUpdatedRpcUrl(chainAlias, chain);\n    }\n\n    // set chain info, with priority to argument's rpcUrl field.\n    function setChain(string memory chainAlias, ChainData memory chain) internal virtual {\n        require(\n            bytes(chainAlias).length != 0,\n            \"StdChains setChain(string,ChainData): Chain alias cannot be the empty string.\"\n        );\n\n        require(chain.chainId != 0, \"StdChains setChain(string,ChainData): Chain ID cannot be 0.\");\n\n        initializeStdChains();\n        string memory foundAlias = idToAlias[chain.chainId];\n\n        require(\n            bytes(foundAlias).length == 0 || keccak256(bytes(foundAlias)) == keccak256(bytes(chainAlias)),\n            string(\n                abi.encodePacked(\n                    \"StdChains setChain(string,ChainData): Chain ID \",\n                    vm.toString(chain.chainId),\n                    \" already used by \\\"\",\n                    foundAlias,\n                    \"\\\".\"\n                )\n            )\n        );\n\n        uint256 oldChainId = chains[chainAlias].chainId;\n        delete idToAlias[oldChainId];\n\n        chains[chainAlias] =\n            Chain({name: chain.name, chainId: chain.chainId, chainAlias: chainAlias, rpcUrl: chain.rpcUrl});\n        idToAlias[chain.chainId] = chainAlias;\n    }\n\n    // set chain info, with priority to argument's rpcUrl field.\n    function setChain(string memory chainAlias, Chain memory chain) internal virtual {\n        setChain(chainAlias, ChainData({name: chain.name, chainId: chain.chainId, rpcUrl: chain.rpcUrl}));\n    }\n\n    function _toUpper(string memory str) private pure returns (string memory) {\n        bytes memory strb = bytes(str);\n        bytes memory copy = new bytes(strb.length);\n        for (uint256 i = 0; i < strb.length; i++) {\n            bytes1 b = strb[i];\n            if (b >= 0x61 && b <= 0x7A) {\n                copy[i] = bytes1(uint8(b) - 32);\n            } else {\n                copy[i] = b;\n            }\n        }\n        return string(copy);\n    }\n\n    // lookup rpcUrl, in descending order of priority:\n    // current -> config (foundry.toml) -> environment variable -> default\n    function getChainWithUpdatedRpcUrl(string memory chainAlias, Chain memory chain)\n        private\n        view\n        returns (Chain memory)\n    {\n        if (bytes(chain.rpcUrl).length == 0) {\n            try vm.rpcUrl(chainAlias) returns (string memory configRpcUrl) {\n                chain.rpcUrl = configRpcUrl;\n            } catch (bytes memory err) {\n                string memory envName = string(abi.encodePacked(_toUpper(chainAlias), \"_RPC_URL\"));\n                if (fallbackToDefaultRpcUrls) {\n                    chain.rpcUrl = vm.envOr(envName, defaultRpcUrls[chainAlias]);\n                } else {\n                    chain.rpcUrl = vm.envString(envName);\n                }\n                // Distinguish 'not found' from 'cannot read'\n                // The upstream error thrown by forge for failing cheats changed so we check both the old and new versions\n                bytes memory oldNotFoundError =\n                    abi.encodeWithSignature(\"CheatCodeError\", string(abi.encodePacked(\"invalid rpc url \", chainAlias)));\n                bytes memory newNotFoundError = abi.encodeWithSignature(\n                    \"CheatcodeError(string)\", string(abi.encodePacked(\"invalid rpc url: \", chainAlias))\n                );\n                bytes32 errHash = keccak256(err);\n                if (\n                    (errHash != keccak256(oldNotFoundError) && errHash != keccak256(newNotFoundError))\n                        || bytes(chain.rpcUrl).length == 0\n                ) {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, err), mload(err))\n                    }\n                }\n            }\n        }\n        return chain;\n    }\n\n    function setFallbackToDefaultRpcUrls(bool useDefault) internal {\n        fallbackToDefaultRpcUrls = useDefault;\n    }\n\n    function initializeStdChains() private {\n        if (stdChainsInitialized) return;\n\n        stdChainsInitialized = true;\n\n        // If adding an RPC here, make sure to test the default RPC URL in `testRpcs`\n        setChainWithDefaultRpcUrl(\"anvil\", ChainData(\"Anvil\", 31337, \"http://127.0.0.1:8545\"));\n        setChainWithDefaultRpcUrl(\n            \"mainnet\", ChainData(\"Mainnet\", 1, \"https://eth-mainnet.alchemyapi.io/v2/pwc5rmJhrdoaSEfimoKEmsvOjKSmPDrP\")\n        );\n        setChainWithDefaultRpcUrl(\n            \"goerli\", ChainData(\"Goerli\", 5, \"https://goerli.infura.io/v3/b9794ad1ddf84dfb8c34d6bb5dca2001\")\n        );\n        setChainWithDefaultRpcUrl(\n            \"sepolia\", ChainData(\"Sepolia\", 11155111, \"https://sepolia.infura.io/v3/b9794ad1ddf84dfb8c34d6bb5dca2001\")\n        );\n        setChainWithDefaultRpcUrl(\"optimism\", ChainData(\"Optimism\", 10, \"https://mainnet.optimism.io\"));\n        setChainWithDefaultRpcUrl(\"optimism_goerli\", ChainData(\"Optimism Goerli\", 420, \"https://goerli.optimism.io\"));\n        setChainWithDefaultRpcUrl(\"arbitrum_one\", ChainData(\"Arbitrum One\", 42161, \"https://arb1.arbitrum.io/rpc\"));\n        setChainWithDefaultRpcUrl(\n            \"arbitrum_one_goerli\", ChainData(\"Arbitrum One Goerli\", 421613, \"https://goerli-rollup.arbitrum.io/rpc\")\n        );\n        setChainWithDefaultRpcUrl(\"arbitrum_nova\", ChainData(\"Arbitrum Nova\", 42170, \"https://nova.arbitrum.io/rpc\"));\n        setChainWithDefaultRpcUrl(\"polygon\", ChainData(\"Polygon\", 137, \"https://polygon-rpc.com\"));\n        setChainWithDefaultRpcUrl(\n            \"polygon_mumbai\", ChainData(\"Polygon Mumbai\", 80001, \"https://rpc-mumbai.maticvigil.com\")\n        );\n        setChainWithDefaultRpcUrl(\"avalanche\", ChainData(\"Avalanche\", 43114, \"https://api.avax.network/ext/bc/C/rpc\"));\n        setChainWithDefaultRpcUrl(\n            \"avalanche_fuji\", ChainData(\"Avalanche Fuji\", 43113, \"https://api.avax-test.network/ext/bc/C/rpc\")\n        );\n        setChainWithDefaultRpcUrl(\n            \"bnb_smart_chain\", ChainData(\"BNB Smart Chain\", 56, \"https://bsc-dataseed1.binance.org\")\n        );\n        setChainWithDefaultRpcUrl(\n            \"bnb_smart_chain_testnet\",\n            ChainData(\"BNB Smart Chain Testnet\", 97, \"https://rpc.ankr.com/bsc_testnet_chapel\")\n        );\n        setChainWithDefaultRpcUrl(\"gnosis_chain\", ChainData(\"Gnosis Chain\", 100, \"https://rpc.gnosischain.com\"));\n        setChainWithDefaultRpcUrl(\"moonbeam\", ChainData(\"Moonbeam\", 1284, \"https://rpc.api.moonbeam.network\"));\n        setChainWithDefaultRpcUrl(\n            \"moonriver\", ChainData(\"Moonriver\", 1285, \"https://rpc.api.moonriver.moonbeam.network\")\n        );\n        setChainWithDefaultRpcUrl(\"moonbase\", ChainData(\"Moonbase\", 1287, \"https://rpc.testnet.moonbeam.network\"));\n        setChainWithDefaultRpcUrl(\"base_goerli\", ChainData(\"Base Goerli\", 84531, \"https://goerli.base.org\"));\n        setChainWithDefaultRpcUrl(\"base\", ChainData(\"Base\", 8453, \"https://mainnet.base.org\"));\n        setChainWithDefaultRpcUrl(\"fraxtal\", ChainData(\"Fraxtal\", 252, \"https://rpc.frax.com\"));\n        setChainWithDefaultRpcUrl(\"fraxtal_testnet\", ChainData(\"Fraxtal Testnet\", 2522, \"https://rpc.testnet.frax.com\"));\n    }\n\n    // set chain info, with priority to chainAlias' rpc url in foundry.toml\n    function setChainWithDefaultRpcUrl(string memory chainAlias, ChainData memory chain) private {\n        string memory rpcUrl = chain.rpcUrl;\n        defaultRpcUrls[chainAlias] = rpcUrl;\n        chain.rpcUrl = \"\";\n        setChain(chainAlias, chain);\n        chain.rpcUrl = rpcUrl; // restore argument\n    }\n}\n"
          },
          "lib/forge-std/src/StdCheats.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {StdStorage, stdStorage} from \"./StdStorage.sol\";\nimport {console2} from \"./console2.sol\";\nimport {Vm} from \"./Vm.sol\";\n\nabstract contract StdCheatsSafe {\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    uint256 private constant UINT256_MAX =\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    bool private gasMeteringOff;\n\n    // Data structures to parse Transaction objects from the broadcast artifact\n    // that conform to EIP1559. The Raw structs is what is parsed from the JSON\n    // and then converted to the one that is used by the user for better UX.\n\n    struct RawTx1559 {\n        string[] arguments;\n        address contractAddress;\n        string contractName;\n        // json value name = function\n        string functionSig;\n        bytes32 hash;\n        // json value name = tx\n        RawTx1559Detail txDetail;\n        // json value name = type\n        string opcode;\n    }\n\n    struct RawTx1559Detail {\n        AccessList[] accessList;\n        bytes data;\n        address from;\n        bytes gas;\n        bytes nonce;\n        address to;\n        bytes txType;\n        bytes value;\n    }\n\n    struct Tx1559 {\n        string[] arguments;\n        address contractAddress;\n        string contractName;\n        string functionSig;\n        bytes32 hash;\n        Tx1559Detail txDetail;\n        string opcode;\n    }\n\n    struct Tx1559Detail {\n        AccessList[] accessList;\n        bytes data;\n        address from;\n        uint256 gas;\n        uint256 nonce;\n        address to;\n        uint256 txType;\n        uint256 value;\n    }\n\n    // Data structures to parse Transaction objects from the broadcast artifact\n    // that DO NOT conform to EIP1559. The Raw structs is what is parsed from the JSON\n    // and then converted to the one that is used by the user for better UX.\n\n    struct TxLegacy {\n        string[] arguments;\n        address contractAddress;\n        string contractName;\n        string functionSig;\n        string hash;\n        string opcode;\n        TxDetailLegacy transaction;\n    }\n\n    struct TxDetailLegacy {\n        AccessList[] accessList;\n        uint256 chainId;\n        bytes data;\n        address from;\n        uint256 gas;\n        uint256 gasPrice;\n        bytes32 hash;\n        uint256 nonce;\n        bytes1 opcode;\n        bytes32 r;\n        bytes32 s;\n        uint256 txType;\n        address to;\n        uint8 v;\n        uint256 value;\n    }\n\n    struct AccessList {\n        address accessAddress;\n        bytes32[] storageKeys;\n    }\n\n    // Data structures to parse Receipt objects from the broadcast artifact.\n    // The Raw structs is what is parsed from the JSON\n    // and then converted to the one that is used by the user for better UX.\n\n    struct RawReceipt {\n        bytes32 blockHash;\n        bytes blockNumber;\n        address contractAddress;\n        bytes cumulativeGasUsed;\n        bytes effectiveGasPrice;\n        address from;\n        bytes gasUsed;\n        RawReceiptLog[] logs;\n        bytes logsBloom;\n        bytes status;\n        address to;\n        bytes32 transactionHash;\n        bytes transactionIndex;\n    }\n\n    struct Receipt {\n        bytes32 blockHash;\n        uint256 blockNumber;\n        address contractAddress;\n        uint256 cumulativeGasUsed;\n        uint256 effectiveGasPrice;\n        address from;\n        uint256 gasUsed;\n        ReceiptLog[] logs;\n        bytes logsBloom;\n        uint256 status;\n        address to;\n        bytes32 transactionHash;\n        uint256 transactionIndex;\n    }\n\n    // Data structures to parse the entire broadcast artifact, assuming the\n    // transactions conform to EIP1559.\n\n    struct EIP1559ScriptArtifact {\n        string[] libraries;\n        string path;\n        string[] pending;\n        Receipt[] receipts;\n        uint256 timestamp;\n        Tx1559[] transactions;\n        TxReturn[] txReturns;\n    }\n\n    struct RawEIP1559ScriptArtifact {\n        string[] libraries;\n        string path;\n        string[] pending;\n        RawReceipt[] receipts;\n        TxReturn[] txReturns;\n        uint256 timestamp;\n        RawTx1559[] transactions;\n    }\n\n    struct RawReceiptLog {\n        // json value = address\n        address logAddress;\n        bytes32 blockHash;\n        bytes blockNumber;\n        bytes data;\n        bytes logIndex;\n        bool removed;\n        bytes32[] topics;\n        bytes32 transactionHash;\n        bytes transactionIndex;\n        bytes transactionLogIndex;\n    }\n\n    struct ReceiptLog {\n        // json value = address\n        address logAddress;\n        bytes32 blockHash;\n        uint256 blockNumber;\n        bytes data;\n        uint256 logIndex;\n        bytes32[] topics;\n        uint256 transactionIndex;\n        uint256 transactionLogIndex;\n        bool removed;\n    }\n\n    struct TxReturn {\n        string internalType;\n        string value;\n    }\n\n    struct Account {\n        address addr;\n        uint256 key;\n    }\n\n    enum AddressType {\n        Payable,\n        NonPayable,\n        ZeroAddress,\n        Precompile,\n        ForgeAddress\n    }\n\n    // Checks that `addr` is not blacklisted by token contracts that have a blacklist.\n    function assumeNotBlacklisted(address token, address addr) internal view virtual {\n        // Nothing to check if `token` is not a contract.\n        uint256 tokenCodeSize;\n        assembly {\n            tokenCodeSize := extcodesize(token)\n        }\n        require(tokenCodeSize > 0, \"StdCheats assumeNotBlacklisted(address,address): Token address is not a contract.\");\n\n        bool success;\n        bytes memory returnData;\n\n        // 4-byte selector for `isBlacklisted(address)`, used by USDC.\n        (success, returnData) = token.staticcall(abi.encodeWithSelector(0xfe575a87, addr));\n        vm.assume(!success || abi.decode(returnData, (bool)) == false);\n\n        // 4-byte selector for `isBlackListed(address)`, used by USDT.\n        (success, returnData) = token.staticcall(abi.encodeWithSelector(0xe47d6060, addr));\n        vm.assume(!success || abi.decode(returnData, (bool)) == false);\n    }\n\n    // Checks that `addr` is not blacklisted by token contracts that have a blacklist.\n    // This is identical to `assumeNotBlacklisted(address,address)` but with a different name, for\n    // backwards compatibility, since this name was used in the original PR which has already has\n    // a release. This function can be removed in a future release once we want a breaking change.\n    function assumeNoBlacklisted(address token, address addr) internal view virtual {\n        assumeNotBlacklisted(token, addr);\n    }\n\n    function assumeAddressIsNot(address addr, AddressType addressType) internal virtual {\n        if (addressType == AddressType.Payable) {\n            assumeNotPayable(addr);\n        } else if (addressType == AddressType.NonPayable) {\n            assumePayable(addr);\n        } else if (addressType == AddressType.ZeroAddress) {\n            assumeNotZeroAddress(addr);\n        } else if (addressType == AddressType.Precompile) {\n            assumeNotPrecompile(addr);\n        } else if (addressType == AddressType.ForgeAddress) {\n            assumeNotForgeAddress(addr);\n        }\n    }\n\n    function assumeAddressIsNot(address addr, AddressType addressType1, AddressType addressType2) internal virtual {\n        assumeAddressIsNot(addr, addressType1);\n        assumeAddressIsNot(addr, addressType2);\n    }\n\n    function assumeAddressIsNot(\n        address addr,\n        AddressType addressType1,\n        AddressType addressType2,\n        AddressType addressType3\n    ) internal virtual {\n        assumeAddressIsNot(addr, addressType1);\n        assumeAddressIsNot(addr, addressType2);\n        assumeAddressIsNot(addr, addressType3);\n    }\n\n    function assumeAddressIsNot(\n        address addr,\n        AddressType addressType1,\n        AddressType addressType2,\n        AddressType addressType3,\n        AddressType addressType4\n    ) internal virtual {\n        assumeAddressIsNot(addr, addressType1);\n        assumeAddressIsNot(addr, addressType2);\n        assumeAddressIsNot(addr, addressType3);\n        assumeAddressIsNot(addr, addressType4);\n    }\n\n    // This function checks whether an address, `addr`, is payable. It works by sending 1 wei to\n    // `addr` and checking the `success` return value.\n    // NOTE: This function may result in state changes depending on the fallback/receive logic\n    // implemented by `addr`, which should be taken into account when this function is used.\n    function _isPayable(address addr) private returns (bool) {\n        require(\n            addr.balance < UINT256_MAX,\n            \"StdCheats _isPayable(address): Balance equals max uint256, so it cannot receive any more funds\"\n        );\n        uint256 origBalanceTest = address(this).balance;\n        uint256 origBalanceAddr = address(addr).balance;\n\n        vm.deal(address(this), 1);\n        (bool success,) = payable(addr).call{value: 1}(\"\");\n\n        // reset balances\n        vm.deal(address(this), origBalanceTest);\n        vm.deal(addr, origBalanceAddr);\n\n        return success;\n    }\n\n    // NOTE: This function may result in state changes depending on the fallback/receive logic\n    // implemented by `addr`, which should be taken into account when this function is used. See the\n    // `_isPayable` method for more information.\n    function assumePayable(address addr) internal virtual {\n        vm.assume(_isPayable(addr));\n    }\n\n    function assumeNotPayable(address addr) internal virtual {\n        vm.assume(!_isPayable(addr));\n    }\n\n    function assumeNotZeroAddress(address addr) internal pure virtual {\n        vm.assume(addr != address(0));\n    }\n\n    function assumeNotPrecompile(address addr) internal pure virtual {\n        assumeNotPrecompile(addr, _pureChainId());\n    }\n\n    function assumeNotPrecompile(address addr, uint256 chainId) internal pure virtual {\n        // Note: For some chains like Optimism these are technically predeploys (i.e. bytecode placed at a specific\n        // address), but the same rationale for excluding them applies so we include those too.\n\n        // These should be present on all EVM-compatible chains.\n        vm.assume(addr < address(0x1) || addr > address(0x9));\n\n        // forgefmt: disable-start\n        if (chainId == 10 || chainId == 420) {\n            // https://github.com/ethereum-optimism/optimism/blob/eaa371a0184b56b7ca6d9eb9cb0a2b78b2ccd864/op-bindings/predeploys/addresses.go#L6-L21\n            vm.assume(addr < address(0x4200000000000000000000000000000000000000) || addr > address(0x4200000000000000000000000000000000000800));\n        } else if (chainId == 42161 || chainId == 421613) {\n            // https://developer.arbitrum.io/useful-addresses#arbitrum-precompiles-l2-same-on-all-arb-chains\n            vm.assume(addr < address(0x0000000000000000000000000000000000000064) || addr > address(0x0000000000000000000000000000000000000068));\n        } else if (chainId == 43114 || chainId == 43113) {\n            // https://github.com/ava-labs/subnet-evm/blob/47c03fd007ecaa6de2c52ea081596e0a88401f58/precompile/params.go#L18-L59\n            vm.assume(addr < address(0x0100000000000000000000000000000000000000) || addr > address(0x01000000000000000000000000000000000000ff));\n            vm.assume(addr < address(0x0200000000000000000000000000000000000000) || addr > address(0x02000000000000000000000000000000000000FF));\n            vm.assume(addr < address(0x0300000000000000000000000000000000000000) || addr > address(0x03000000000000000000000000000000000000Ff));\n        }\n        // forgefmt: disable-end\n    }\n\n    function assumeNotForgeAddress(address addr) internal pure virtual {\n        // vm, console, and Create2Deployer addresses\n        vm.assume(\n            addr != address(vm) && addr != 0x000000000000000000636F6e736F6c652e6c6f67\n                && addr != 0x4e59b44847b379578588920cA78FbF26c0B4956C\n        );\n    }\n\n    function readEIP1559ScriptArtifact(string memory path)\n        internal\n        view\n        virtual\n        returns (EIP1559ScriptArtifact memory)\n    {\n        string memory data = vm.readFile(path);\n        bytes memory parsedData = vm.parseJson(data);\n        RawEIP1559ScriptArtifact memory rawArtifact = abi.decode(parsedData, (RawEIP1559ScriptArtifact));\n        EIP1559ScriptArtifact memory artifact;\n        artifact.libraries = rawArtifact.libraries;\n        artifact.path = rawArtifact.path;\n        artifact.timestamp = rawArtifact.timestamp;\n        artifact.pending = rawArtifact.pending;\n        artifact.txReturns = rawArtifact.txReturns;\n        artifact.receipts = rawToConvertedReceipts(rawArtifact.receipts);\n        artifact.transactions = rawToConvertedEIPTx1559s(rawArtifact.transactions);\n        return artifact;\n    }\n\n    function rawToConvertedEIPTx1559s(RawTx1559[] memory rawTxs) internal pure virtual returns (Tx1559[] memory) {\n        Tx1559[] memory txs = new Tx1559[](rawTxs.length);\n        for (uint256 i; i < rawTxs.length; i++) {\n            txs[i] = rawToConvertedEIPTx1559(rawTxs[i]);\n        }\n        return txs;\n    }\n\n    function rawToConvertedEIPTx1559(RawTx1559 memory rawTx) internal pure virtual returns (Tx1559 memory) {\n        Tx1559 memory transaction;\n        transaction.arguments = rawTx.arguments;\n        transaction.contractName = rawTx.contractName;\n        transaction.functionSig = rawTx.functionSig;\n        transaction.hash = rawTx.hash;\n        transaction.txDetail = rawToConvertedEIP1559Detail(rawTx.txDetail);\n        transaction.opcode = rawTx.opcode;\n        return transaction;\n    }\n\n    function rawToConvertedEIP1559Detail(RawTx1559Detail memory rawDetail)\n        internal\n        pure\n        virtual\n        returns (Tx1559Detail memory)\n    {\n        Tx1559Detail memory txDetail;\n        txDetail.data = rawDetail.data;\n        txDetail.from = rawDetail.from;\n        txDetail.to = rawDetail.to;\n        txDetail.nonce = _bytesToUint(rawDetail.nonce);\n        txDetail.txType = _bytesToUint(rawDetail.txType);\n        txDetail.value = _bytesToUint(rawDetail.value);\n        txDetail.gas = _bytesToUint(rawDetail.gas);\n        txDetail.accessList = rawDetail.accessList;\n        return txDetail;\n    }\n\n    function readTx1559s(string memory path) internal view virtual returns (Tx1559[] memory) {\n        string memory deployData = vm.readFile(path);\n        bytes memory parsedDeployData = vm.parseJson(deployData, \".transactions\");\n        RawTx1559[] memory rawTxs = abi.decode(parsedDeployData, (RawTx1559[]));\n        return rawToConvertedEIPTx1559s(rawTxs);\n    }\n\n    function readTx1559(string memory path, uint256 index) internal view virtual returns (Tx1559 memory) {\n        string memory deployData = vm.readFile(path);\n        string memory key = string(abi.encodePacked(\".transactions[\", vm.toString(index), \"]\"));\n        bytes memory parsedDeployData = vm.parseJson(deployData, key);\n        RawTx1559 memory rawTx = abi.decode(parsedDeployData, (RawTx1559));\n        return rawToConvertedEIPTx1559(rawTx);\n    }\n\n    // Analogous to readTransactions, but for receipts.\n    function readReceipts(string memory path) internal view virtual returns (Receipt[] memory) {\n        string memory deployData = vm.readFile(path);\n        bytes memory parsedDeployData = vm.parseJson(deployData, \".receipts\");\n        RawReceipt[] memory rawReceipts = abi.decode(parsedDeployData, (RawReceipt[]));\n        return rawToConvertedReceipts(rawReceipts);\n    }\n\n    function readReceipt(string memory path, uint256 index) internal view virtual returns (Receipt memory) {\n        string memory deployData = vm.readFile(path);\n        string memory key = string(abi.encodePacked(\".receipts[\", vm.toString(index), \"]\"));\n        bytes memory parsedDeployData = vm.parseJson(deployData, key);\n        RawReceipt memory rawReceipt = abi.decode(parsedDeployData, (RawReceipt));\n        return rawToConvertedReceipt(rawReceipt);\n    }\n\n    function rawToConvertedReceipts(RawReceipt[] memory rawReceipts) internal pure virtual returns (Receipt[] memory) {\n        Receipt[] memory receipts = new Receipt[](rawReceipts.length);\n        for (uint256 i; i < rawReceipts.length; i++) {\n            receipts[i] = rawToConvertedReceipt(rawReceipts[i]);\n        }\n        return receipts;\n    }\n\n    function rawToConvertedReceipt(RawReceipt memory rawReceipt) internal pure virtual returns (Receipt memory) {\n        Receipt memory receipt;\n        receipt.blockHash = rawReceipt.blockHash;\n        receipt.to = rawReceipt.to;\n        receipt.from = rawReceipt.from;\n        receipt.contractAddress = rawReceipt.contractAddress;\n        receipt.effectiveGasPrice = _bytesToUint(rawReceipt.effectiveGasPrice);\n        receipt.cumulativeGasUsed = _bytesToUint(rawReceipt.cumulativeGasUsed);\n        receipt.gasUsed = _bytesToUint(rawReceipt.gasUsed);\n        receipt.status = _bytesToUint(rawReceipt.status);\n        receipt.transactionIndex = _bytesToUint(rawReceipt.transactionIndex);\n        receipt.blockNumber = _bytesToUint(rawReceipt.blockNumber);\n        receipt.logs = rawToConvertedReceiptLogs(rawReceipt.logs);\n        receipt.logsBloom = rawReceipt.logsBloom;\n        receipt.transactionHash = rawReceipt.transactionHash;\n        return receipt;\n    }\n\n    function rawToConvertedReceiptLogs(RawReceiptLog[] memory rawLogs)\n        internal\n        pure\n        virtual\n        returns (ReceiptLog[] memory)\n    {\n        ReceiptLog[] memory logs = new ReceiptLog[](rawLogs.length);\n        for (uint256 i; i < rawLogs.length; i++) {\n            logs[i].logAddress = rawLogs[i].logAddress;\n            logs[i].blockHash = rawLogs[i].blockHash;\n            logs[i].blockNumber = _bytesToUint(rawLogs[i].blockNumber);\n            logs[i].data = rawLogs[i].data;\n            logs[i].logIndex = _bytesToUint(rawLogs[i].logIndex);\n            logs[i].topics = rawLogs[i].topics;\n            logs[i].transactionIndex = _bytesToUint(rawLogs[i].transactionIndex);\n            logs[i].transactionLogIndex = _bytesToUint(rawLogs[i].transactionLogIndex);\n            logs[i].removed = rawLogs[i].removed;\n        }\n        return logs;\n    }\n\n    // Deploy a contract by fetching the contract bytecode from\n    // the artifacts directory\n    // e.g. `deployCode(code, abi.encode(arg1,arg2,arg3))`\n    function deployCode(string memory what, bytes memory args) internal virtual returns (address addr) {\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,bytes): Deployment failed.\");\n    }\n\n    function deployCode(string memory what) internal virtual returns (address addr) {\n        bytes memory bytecode = vm.getCode(what);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string): Deployment failed.\");\n    }\n\n    /// @dev deploy contract with value on construction\n    function deployCode(string memory what, bytes memory args, uint256 val) internal virtual returns (address addr) {\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(val, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,bytes,uint256): Deployment failed.\");\n    }\n\n    function deployCode(string memory what, uint256 val) internal virtual returns (address addr) {\n        bytes memory bytecode = vm.getCode(what);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(val, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,uint256): Deployment failed.\");\n    }\n\n    // creates a labeled address and the corresponding private key\n    function makeAddrAndKey(string memory name) internal virtual returns (address addr, uint256 privateKey) {\n        privateKey = uint256(keccak256(abi.encodePacked(name)));\n        addr = vm.addr(privateKey);\n        vm.label(addr, name);\n    }\n\n    // creates a labeled address\n    function makeAddr(string memory name) internal virtual returns (address addr) {\n        (addr,) = makeAddrAndKey(name);\n    }\n\n    // Destroys an account immediately, sending the balance to beneficiary.\n    // Destroying means: balance will be zero, code will be empty, and nonce will be 0\n    // This is similar to selfdestruct but not identical: selfdestruct destroys code and nonce\n    // only after tx ends, this will run immediately.\n    function destroyAccount(address who, address beneficiary) internal virtual {\n        uint256 currBalance = who.balance;\n        vm.etch(who, abi.encode());\n        vm.deal(who, 0);\n        vm.resetNonce(who);\n\n        uint256 beneficiaryBalance = beneficiary.balance;\n        vm.deal(beneficiary, currBalance + beneficiaryBalance);\n    }\n\n    // creates a struct containing both a labeled address and the corresponding private key\n    function makeAccount(string memory name) internal virtual returns (Account memory account) {\n        (account.addr, account.key) = makeAddrAndKey(name);\n    }\n\n    function deriveRememberKey(string memory mnemonic, uint32 index)\n        internal\n        virtual\n        returns (address who, uint256 privateKey)\n    {\n        privateKey = vm.deriveKey(mnemonic, index);\n        who = vm.rememberKey(privateKey);\n    }\n\n    function _bytesToUint(bytes memory b) private pure returns (uint256) {\n        require(b.length <= 32, \"StdCheats _bytesToUint(bytes): Bytes length exceeds 32.\");\n        return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));\n    }\n\n    function isFork() internal view virtual returns (bool status) {\n        try vm.activeFork() {\n            status = true;\n        } catch (bytes memory) {}\n    }\n\n    modifier skipWhenForking() {\n        if (!isFork()) {\n            _;\n        }\n    }\n\n    modifier skipWhenNotForking() {\n        if (isFork()) {\n            _;\n        }\n    }\n\n    modifier noGasMetering() {\n        vm.pauseGasMetering();\n        // To prevent turning gas monitoring back on with nested functions that use this modifier,\n        // we check if gasMetering started in the off position. If it did, we don't want to turn\n        // it back on until we exit the top level function that used the modifier\n        //\n        // i.e. funcA() noGasMetering { funcB() }, where funcB has noGasMetering as well.\n        // funcA will have `gasStartedOff` as false, funcB will have it as true,\n        // so we only turn metering back on at the end of the funcA\n        bool gasStartedOff = gasMeteringOff;\n        gasMeteringOff = true;\n\n        _;\n\n        // if gas metering was on when this modifier was called, turn it back on at the end\n        if (!gasStartedOff) {\n            gasMeteringOff = false;\n            vm.resumeGasMetering();\n        }\n    }\n\n    // We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no\n    // compiler warnings when accessing chain ID in any solidity version supported by forge-std. We\n    // can't simply access the chain ID in a normal view or pure function because the solc View Pure\n    // Checker changed `chainid` from pure to view in 0.8.0.\n    function _viewChainId() private view returns (uint256 chainId) {\n        // Assembly required since `block.chainid` was introduced in 0.8.0.\n        assembly {\n            chainId := chainid()\n        }\n\n        address(this); // Silence warnings in older Solc versions.\n    }\n\n    function _pureChainId() private pure returns (uint256 chainId) {\n        function() internal view returns (uint256) fnIn = _viewChainId;\n        function() internal pure returns (uint256) pureChainId;\n        assembly {\n            pureChainId := fnIn\n        }\n        chainId = pureChainId();\n    }\n}\n\n// Wrappers around cheatcodes to avoid footguns\nabstract contract StdCheats is StdCheatsSafe {\n    using stdStorage for StdStorage;\n\n    StdStorage private stdstore;\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n    address private constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\n\n    // Skip forward or rewind time by the specified number of seconds\n    function skip(uint256 time) internal virtual {\n        vm.warp(block.timestamp + time);\n    }\n\n    function rewind(uint256 time) internal virtual {\n        vm.warp(block.timestamp - time);\n    }\n\n    // Setup a prank from an address that has some ether\n    function hoax(address msgSender) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.prank(msgSender);\n    }\n\n    function hoax(address msgSender, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.prank(msgSender);\n    }\n\n    function hoax(address msgSender, address origin) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.prank(msgSender, origin);\n    }\n\n    function hoax(address msgSender, address origin, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.prank(msgSender, origin);\n    }\n\n    // Start perpetual prank from an address that has some ether\n    function startHoax(address msgSender) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.startPrank(msgSender);\n    }\n\n    function startHoax(address msgSender, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.startPrank(msgSender);\n    }\n\n    // Start perpetual prank from an address that has some ether\n    // tx.origin is set to the origin parameter\n    function startHoax(address msgSender, address origin) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.startPrank(msgSender, origin);\n    }\n\n    function startHoax(address msgSender, address origin, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.startPrank(msgSender, origin);\n    }\n\n    function changePrank(address msgSender) internal virtual {\n        console2_log_StdCheats(\"changePrank is deprecated. Please use vm.startPrank instead.\");\n        vm.stopPrank();\n        vm.startPrank(msgSender);\n    }\n\n    function changePrank(address msgSender, address txOrigin) internal virtual {\n        vm.stopPrank();\n        vm.startPrank(msgSender, txOrigin);\n    }\n\n    // The same as Vm's `deal`\n    // Use the alternative signature for ERC20 tokens\n    function deal(address to, uint256 give) internal virtual {\n        vm.deal(to, give);\n    }\n\n    // Set the balance of an account for any ERC20 token\n    // Use the alternative signature to update `totalSupply`\n    function deal(address token, address to, uint256 give) internal virtual {\n        deal(token, to, give, false);\n    }\n\n    // Set the balance of an account for any ERC1155 token\n    // Use the alternative signature to update `totalSupply`\n    function dealERC1155(address token, address to, uint256 id, uint256 give) internal virtual {\n        dealERC1155(token, to, id, give, false);\n    }\n\n    function deal(address token, address to, uint256 give, bool adjust) internal virtual {\n        // get current balance\n        (, bytes memory balData) = token.staticcall(abi.encodeWithSelector(0x70a08231, to));\n        uint256 prevBal = abi.decode(balData, (uint256));\n\n        // update balance\n        stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(give);\n\n        // update total supply\n        if (adjust) {\n            (, bytes memory totSupData) = token.staticcall(abi.encodeWithSelector(0x18160ddd));\n            uint256 totSup = abi.decode(totSupData, (uint256));\n            if (give < prevBal) {\n                totSup -= (prevBal - give);\n            } else {\n                totSup += (give - prevBal);\n            }\n            stdstore.target(token).sig(0x18160ddd).checked_write(totSup);\n        }\n    }\n\n    function dealERC1155(address token, address to, uint256 id, uint256 give, bool adjust) internal virtual {\n        // get current balance\n        (, bytes memory balData) = token.staticcall(abi.encodeWithSelector(0x00fdd58e, to, id));\n        uint256 prevBal = abi.decode(balData, (uint256));\n\n        // update balance\n        stdstore.target(token).sig(0x00fdd58e).with_key(to).with_key(id).checked_write(give);\n\n        // update total supply\n        if (adjust) {\n            (, bytes memory totSupData) = token.staticcall(abi.encodeWithSelector(0xbd85b039, id));\n            require(\n                totSupData.length != 0,\n                \"StdCheats deal(address,address,uint,uint,bool): target contract is not ERC1155Supply.\"\n            );\n            uint256 totSup = abi.decode(totSupData, (uint256));\n            if (give < prevBal) {\n                totSup -= (prevBal - give);\n            } else {\n                totSup += (give - prevBal);\n            }\n            stdstore.target(token).sig(0xbd85b039).with_key(id).checked_write(totSup);\n        }\n    }\n\n    function dealERC721(address token, address to, uint256 id) internal virtual {\n        // check if token id is already minted and the actual owner.\n        (bool successMinted, bytes memory ownerData) = token.staticcall(abi.encodeWithSelector(0x6352211e, id));\n        require(successMinted, \"StdCheats deal(address,address,uint,bool): id not minted.\");\n\n        // get owner current balance\n        (, bytes memory fromBalData) =\n            token.staticcall(abi.encodeWithSelector(0x70a08231, abi.decode(ownerData, (address))));\n        uint256 fromPrevBal = abi.decode(fromBalData, (uint256));\n\n        // get new user current balance\n        (, bytes memory toBalData) = token.staticcall(abi.encodeWithSelector(0x70a08231, to));\n        uint256 toPrevBal = abi.decode(toBalData, (uint256));\n\n        // update balances\n        stdstore.target(token).sig(0x70a08231).with_key(abi.decode(ownerData, (address))).checked_write(--fromPrevBal);\n        stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(++toPrevBal);\n\n        // update owner\n        stdstore.target(token).sig(0x6352211e).with_key(id).checked_write(to);\n    }\n\n    function deployCodeTo(string memory what, address where) internal virtual {\n        deployCodeTo(what, \"\", 0, where);\n    }\n\n    function deployCodeTo(string memory what, bytes memory args, address where) internal virtual {\n        deployCodeTo(what, args, 0, where);\n    }\n\n    function deployCodeTo(string memory what, bytes memory args, uint256 value, address where) internal virtual {\n        bytes memory creationCode = vm.getCode(what);\n        vm.etch(where, abi.encodePacked(creationCode, args));\n        (bool success, bytes memory runtimeBytecode) = where.call{value: value}(\"\");\n        require(success, \"StdCheats deployCodeTo(string,bytes,uint256,address): Failed to create runtime bytecode.\");\n        vm.etch(where, runtimeBytecode);\n    }\n\n    // Used to prevent the compilation of console, which shortens the compilation time when console is not used elsewhere.\n    function console2_log_StdCheats(string memory p0) private view {\n        (bool status,) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature(\"log(string)\", p0));\n        status;\n    }\n}\n"
          },
          "lib/forge-std/src/StdJson.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {VmSafe} from \"./Vm.sol\";\n\n// Helpers for parsing and writing JSON files\n// To parse:\n// ```\n// using stdJson for string;\n// string memory json = vm.readFile(\"<some_path>\");\n// json.readUint(\"<json_path>\");\n// ```\n// To write:\n// ```\n// using stdJson for string;\n// string memory json = \"json\";\n// json.serialize(\"a\", uint256(123));\n// string memory semiFinal = json.serialize(\"b\", string(\"test\"));\n// string memory finalJson = json.serialize(\"c\", semiFinal);\n// finalJson.write(\"<some_path>\");\n// ```\n\nlibrary stdJson {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function parseRaw(string memory json, string memory key) internal pure returns (bytes memory) {\n        return vm.parseJson(json, key);\n    }\n\n    function readUint(string memory json, string memory key) internal pure returns (uint256) {\n        return vm.parseJsonUint(json, key);\n    }\n\n    function readUintArray(string memory json, string memory key) internal pure returns (uint256[] memory) {\n        return vm.parseJsonUintArray(json, key);\n    }\n\n    function readInt(string memory json, string memory key) internal pure returns (int256) {\n        return vm.parseJsonInt(json, key);\n    }\n\n    function readIntArray(string memory json, string memory key) internal pure returns (int256[] memory) {\n        return vm.parseJsonIntArray(json, key);\n    }\n\n    function readBytes32(string memory json, string memory key) internal pure returns (bytes32) {\n        return vm.parseJsonBytes32(json, key);\n    }\n\n    function readBytes32Array(string memory json, string memory key) internal pure returns (bytes32[] memory) {\n        return vm.parseJsonBytes32Array(json, key);\n    }\n\n    function readString(string memory json, string memory key) internal pure returns (string memory) {\n        return vm.parseJsonString(json, key);\n    }\n\n    function readStringArray(string memory json, string memory key) internal pure returns (string[] memory) {\n        return vm.parseJsonStringArray(json, key);\n    }\n\n    function readAddress(string memory json, string memory key) internal pure returns (address) {\n        return vm.parseJsonAddress(json, key);\n    }\n\n    function readAddressArray(string memory json, string memory key) internal pure returns (address[] memory) {\n        return vm.parseJsonAddressArray(json, key);\n    }\n\n    function readBool(string memory json, string memory key) internal pure returns (bool) {\n        return vm.parseJsonBool(json, key);\n    }\n\n    function readBoolArray(string memory json, string memory key) internal pure returns (bool[] memory) {\n        return vm.parseJsonBoolArray(json, key);\n    }\n\n    function readBytes(string memory json, string memory key) internal pure returns (bytes memory) {\n        return vm.parseJsonBytes(json, key);\n    }\n\n    function readBytesArray(string memory json, string memory key) internal pure returns (bytes[] memory) {\n        return vm.parseJsonBytesArray(json, key);\n    }\n\n    function serialize(string memory jsonKey, string memory rootObject) internal returns (string memory) {\n        return vm.serializeJson(jsonKey, rootObject);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bool value) internal returns (string memory) {\n        return vm.serializeBool(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bool[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBool(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, uint256 value) internal returns (string memory) {\n        return vm.serializeUint(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, uint256[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeUint(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, int256 value) internal returns (string memory) {\n        return vm.serializeInt(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, int256[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeInt(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, address value) internal returns (string memory) {\n        return vm.serializeAddress(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, address[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeAddress(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes32 value) internal returns (string memory) {\n        return vm.serializeBytes32(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes32[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBytes32(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes memory value) internal returns (string memory) {\n        return vm.serializeBytes(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBytes(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, string memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeString(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, string[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeString(jsonKey, key, value);\n    }\n\n    function write(string memory jsonKey, string memory path) internal {\n        vm.writeJson(jsonKey, path);\n    }\n\n    function write(string memory jsonKey, string memory path, string memory valueKey) internal {\n        vm.writeJson(jsonKey, path, valueKey);\n    }\n}\n"
          },
          "lib/forge-std/src/StdMath.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nlibrary stdMath {\n    int256 private constant INT256_MIN = -57896044618658097711785492504343953926634992332820282019728792003956564819968;\n\n    function abs(int256 a) internal pure returns (uint256) {\n        // Required or it will fail when `a = type(int256).min`\n        if (a == INT256_MIN) {\n            return 57896044618658097711785492504343953926634992332820282019728792003956564819968;\n        }\n\n        return uint256(a > 0 ? a : -a);\n    }\n\n    function delta(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a - b : b - a;\n    }\n\n    function delta(int256 a, int256 b) internal pure returns (uint256) {\n        // a and b are of the same sign\n        // this works thanks to two's complement, the left-most bit is the sign bit\n        if ((a ^ b) > -1) {\n            return delta(abs(a), abs(b));\n        }\n\n        // a and b are of opposite signs\n        return abs(a) + abs(b);\n    }\n\n    function percentDelta(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 absDelta = delta(a, b);\n\n        return absDelta * 1e18 / b;\n    }\n\n    function percentDelta(int256 a, int256 b) internal pure returns (uint256) {\n        uint256 absDelta = delta(a, b);\n        uint256 absB = abs(b);\n\n        return absDelta * 1e18 / absB;\n    }\n}\n"
          },
          "lib/forge-std/src/StdStorage.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {Vm} from \"./Vm.sol\";\n\nstruct FindData {\n    uint256 slot;\n    uint256 offsetLeft;\n    uint256 offsetRight;\n    bool found;\n}\n\nstruct StdStorage {\n    mapping(address => mapping(bytes4 => mapping(bytes32 => FindData))) finds;\n    bytes32[] _keys;\n    bytes4 _sig;\n    uint256 _depth;\n    address _target;\n    bytes32 _set;\n    bool _enable_packed_slots;\n    bytes _calldata;\n}\n\nlibrary stdStorageSafe {\n    event SlotFound(address who, bytes4 fsig, bytes32 keysHash, uint256 slot);\n    event WARNING_UninitedSlot(address who, uint256 slot);\n\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n    uint256 constant UINT256_MAX = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    function sigs(string memory sigStr) internal pure returns (bytes4) {\n        return bytes4(keccak256(bytes(sigStr)));\n    }\n\n    function getCallParams(StdStorage storage self) internal view returns (bytes memory) {\n        if (self._calldata.length == 0) {\n            return flatten(self._keys);\n        } else {\n            return self._calldata;\n        }\n    }\n\n    // Calls target contract with configured parameters\n    function callTarget(StdStorage storage self) internal view returns (bool, bytes32) {\n        bytes memory cald = abi.encodePacked(self._sig, getCallParams(self));\n        (bool success, bytes memory rdat) = self._target.staticcall(cald);\n        bytes32 result = bytesToBytes32(rdat, 32 * self._depth);\n\n        return (success, result);\n    }\n\n    // Tries mutating slot value to determine if the targeted value is stored in it.\n    // If current value is 0, then we are setting slot value to type(uint256).max\n    // Otherwise, we set it to 0. That way, return value should always be affected.\n    function checkSlotMutatesCall(StdStorage storage self, bytes32 slot) internal returns (bool) {\n        bytes32 prevSlotValue = vm.load(self._target, slot);\n        (bool success, bytes32 prevReturnValue) = callTarget(self);\n\n        bytes32 testVal = prevReturnValue == bytes32(0) ? bytes32(UINT256_MAX) : bytes32(0);\n        vm.store(self._target, slot, testVal);\n\n        (, bytes32 newReturnValue) = callTarget(self);\n\n        vm.store(self._target, slot, prevSlotValue);\n\n        return (success && (prevReturnValue != newReturnValue));\n    }\n\n    // Tries setting one of the bits in slot to 1 until return value changes.\n    // Index of resulted bit is an offset packed slot has from left/right side\n    function findOffset(StdStorage storage self, bytes32 slot, bool left) internal returns (bool, uint256) {\n        for (uint256 offset = 0; offset < 256; offset++) {\n            uint256 valueToPut = left ? (1 << (255 - offset)) : (1 << offset);\n            vm.store(self._target, slot, bytes32(valueToPut));\n\n            (bool success, bytes32 data) = callTarget(self);\n\n            if (success && (uint256(data) > 0)) {\n                return (true, offset);\n            }\n        }\n        return (false, 0);\n    }\n\n    function findOffsets(StdStorage storage self, bytes32 slot) internal returns (bool, uint256, uint256) {\n        bytes32 prevSlotValue = vm.load(self._target, slot);\n\n        (bool foundLeft, uint256 offsetLeft) = findOffset(self, slot, true);\n        (bool foundRight, uint256 offsetRight) = findOffset(self, slot, false);\n\n        // `findOffset` may mutate slot value, so we are setting it to initial value\n        vm.store(self._target, slot, prevSlotValue);\n        return (foundLeft && foundRight, offsetLeft, offsetRight);\n    }\n\n    function find(StdStorage storage self) internal returns (FindData storage) {\n        return find(self, true);\n    }\n\n    /// @notice find an arbitrary storage slot given a function sig, input data, address of the contract and a value to check against\n    // slot complexity:\n    //  if flat, will be bytes32(uint256(uint));\n    //  if map, will be keccak256(abi.encode(key, uint(slot)));\n    //  if deep map, will be keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))));\n    //  if map struct, will be bytes32(uint256(keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))))) + structFieldDepth);\n    function find(StdStorage storage self, bool _clear) internal returns (FindData storage) {\n        address who = self._target;\n        bytes4 fsig = self._sig;\n        uint256 field_depth = self._depth;\n        bytes memory params = getCallParams(self);\n\n        // calldata to test against\n        if (self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found) {\n            if (_clear) {\n                clear(self);\n            }\n            return self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];\n        }\n        vm.record();\n        (, bytes32 callResult) = callTarget(self);\n        (bytes32[] memory reads,) = vm.accesses(address(who));\n\n        if (reads.length == 0) {\n            revert(\"stdStorage find(StdStorage): No storage use detected for target.\");\n        } else {\n            for (uint256 i = 0; i < reads.length; i++) {\n                bytes32 prev = vm.load(who, reads[i]);\n                if (prev == bytes32(0)) {\n                    emit WARNING_UninitedSlot(who, uint256(reads[i]));\n                }\n\n                if (!checkSlotMutatesCall(self, reads[i])) {\n                    continue;\n                }\n\n                (uint256 offsetLeft, uint256 offsetRight) = (0, 0);\n\n                if (self._enable_packed_slots) {\n                    bool found;\n                    (found, offsetLeft, offsetRight) = findOffsets(self, reads[i]);\n                    if (!found) {\n                        continue;\n                    }\n                }\n\n                // Check that value between found offsets is equal to the current call result\n                uint256 curVal = (uint256(prev) & getMaskByOffsets(offsetLeft, offsetRight)) >> offsetRight;\n\n                if (uint256(callResult) != curVal) {\n                    continue;\n                }\n\n                emit SlotFound(who, fsig, keccak256(abi.encodePacked(params, field_depth)), uint256(reads[i]));\n                self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))] =\n                    FindData(uint256(reads[i]), offsetLeft, offsetRight, true);\n                break;\n            }\n        }\n\n        require(\n            self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found,\n            \"stdStorage find(StdStorage): Slot(s) not found.\"\n        );\n\n        if (_clear) {\n            clear(self);\n        }\n        return self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];\n    }\n\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\n        self._target = _target;\n        return self;\n    }\n\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\n        self._sig = _sig;\n        return self;\n    }\n\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\n        self._sig = sigs(_sig);\n        return self;\n    }\n\n    function with_calldata(StdStorage storage self, bytes memory _calldata) internal returns (StdStorage storage) {\n        self._calldata = _calldata;\n        return self;\n    }\n\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\n        self._keys.push(bytes32(uint256(uint160(who))));\n        return self;\n    }\n\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\n        self._keys.push(bytes32(amt));\n        return self;\n    }\n\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\n        self._keys.push(key);\n        return self;\n    }\n\n    function enable_packed_slots(StdStorage storage self) internal returns (StdStorage storage) {\n        self._enable_packed_slots = true;\n        return self;\n    }\n\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\n        self._depth = _depth;\n        return self;\n    }\n\n    function read(StdStorage storage self) private returns (bytes memory) {\n        FindData storage data = find(self, false);\n        uint256 mask = getMaskByOffsets(data.offsetLeft, data.offsetRight);\n        uint256 value = (uint256(vm.load(self._target, bytes32(data.slot))) & mask) >> data.offsetRight;\n        clear(self);\n        return abi.encode(value);\n    }\n\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\n        return abi.decode(read(self), (bytes32));\n    }\n\n    function read_bool(StdStorage storage self) internal returns (bool) {\n        int256 v = read_int(self);\n        if (v == 0) return false;\n        if (v == 1) return true;\n        revert(\"stdStorage read_bool(StdStorage): Cannot decode. Make sure you are reading a bool.\");\n    }\n\n    function read_address(StdStorage storage self) internal returns (address) {\n        return abi.decode(read(self), (address));\n    }\n\n    function read_uint(StdStorage storage self) internal returns (uint256) {\n        return abi.decode(read(self), (uint256));\n    }\n\n    function read_int(StdStorage storage self) internal returns (int256) {\n        return abi.decode(read(self), (int256));\n    }\n\n    function parent(StdStorage storage self) internal returns (uint256, bytes32) {\n        address who = self._target;\n        uint256 field_depth = self._depth;\n        vm.startMappingRecording();\n        uint256 child = find(self, true).slot - field_depth;\n        (bool found, bytes32 key, bytes32 parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(child));\n        if (!found) {\n            revert(\n                \"stdStorage read_bool(StdStorage): Cannot find parent. Make sure you give a slot and startMappingRecording() has been called.\"\n            );\n        }\n        return (uint256(parent_slot), key);\n    }\n\n    function root(StdStorage storage self) internal returns (uint256) {\n        address who = self._target;\n        uint256 field_depth = self._depth;\n        vm.startMappingRecording();\n        uint256 child = find(self, true).slot - field_depth;\n        bool found;\n        bytes32 root_slot;\n        bytes32 parent_slot;\n        (found,, parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(child));\n        if (!found) {\n            revert(\n                \"stdStorage read_bool(StdStorage): Cannot find parent. Make sure you give a slot and startMappingRecording() has been called.\"\n            );\n        }\n        while (found) {\n            root_slot = parent_slot;\n            (found,, parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(root_slot));\n        }\n        return uint256(root_slot);\n    }\n\n    function bytesToBytes32(bytes memory b, uint256 offset) private pure returns (bytes32) {\n        bytes32 out;\n\n        uint256 max = b.length > 32 ? 32 : b.length;\n        for (uint256 i = 0; i < max; i++) {\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\n        }\n        return out;\n    }\n\n    function flatten(bytes32[] memory b) private pure returns (bytes memory) {\n        bytes memory result = new bytes(b.length * 32);\n        for (uint256 i = 0; i < b.length; i++) {\n            bytes32 k = b[i];\n            /// @solidity memory-safe-assembly\n            assembly {\n                mstore(add(result, add(32, mul(32, i))), k)\n            }\n        }\n\n        return result;\n    }\n\n    function clear(StdStorage storage self) internal {\n        delete self._target;\n        delete self._sig;\n        delete self._keys;\n        delete self._depth;\n        delete self._enable_packed_slots;\n        delete self._calldata;\n    }\n\n    // Returns mask which contains non-zero bits for values between `offsetLeft` and `offsetRight`\n    // (slotValue & mask) >> offsetRight will be the value of the given packed variable\n    function getMaskByOffsets(uint256 offsetLeft, uint256 offsetRight) internal pure returns (uint256 mask) {\n        // mask = ((1 << (256 - (offsetRight + offsetLeft))) - 1) << offsetRight;\n        // using assembly because (1 << 256) causes overflow\n        assembly {\n            mask := shl(offsetRight, sub(shl(sub(256, add(offsetRight, offsetLeft)), 1), 1))\n        }\n    }\n\n    // Returns slot value with updated packed variable.\n    function getUpdatedSlotValue(bytes32 curValue, uint256 varValue, uint256 offsetLeft, uint256 offsetRight)\n        internal\n        pure\n        returns (bytes32 newValue)\n    {\n        return bytes32((uint256(curValue) & ~getMaskByOffsets(offsetLeft, offsetRight)) | (varValue << offsetRight));\n    }\n}\n\nlibrary stdStorage {\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function sigs(string memory sigStr) internal pure returns (bytes4) {\n        return stdStorageSafe.sigs(sigStr);\n    }\n\n    function find(StdStorage storage self) internal returns (uint256) {\n        return find(self, true);\n    }\n\n    function find(StdStorage storage self, bool _clear) internal returns (uint256) {\n        return stdStorageSafe.find(self, _clear).slot;\n    }\n\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\n        return stdStorageSafe.target(self, _target);\n    }\n\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\n        return stdStorageSafe.sig(self, _sig);\n    }\n\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\n        return stdStorageSafe.sig(self, _sig);\n    }\n\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, who);\n    }\n\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, amt);\n    }\n\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, key);\n    }\n\n    function with_calldata(StdStorage storage self, bytes memory _calldata) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_calldata(self, _calldata);\n    }\n\n    function enable_packed_slots(StdStorage storage self) internal returns (StdStorage storage) {\n        return stdStorageSafe.enable_packed_slots(self);\n    }\n\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\n        return stdStorageSafe.depth(self, _depth);\n    }\n\n    function clear(StdStorage storage self) internal {\n        stdStorageSafe.clear(self);\n    }\n\n    function checked_write(StdStorage storage self, address who) internal {\n        checked_write(self, bytes32(uint256(uint160(who))));\n    }\n\n    function checked_write(StdStorage storage self, uint256 amt) internal {\n        checked_write(self, bytes32(amt));\n    }\n\n    function checked_write_int(StdStorage storage self, int256 val) internal {\n        checked_write(self, bytes32(uint256(val)));\n    }\n\n    function checked_write(StdStorage storage self, bool write) internal {\n        bytes32 t;\n        /// @solidity memory-safe-assembly\n        assembly {\n            t := write\n        }\n        checked_write(self, t);\n    }\n\n    function checked_write(StdStorage storage self, bytes32 set) internal {\n        address who = self._target;\n        bytes4 fsig = self._sig;\n        uint256 field_depth = self._depth;\n        bytes memory params = stdStorageSafe.getCallParams(self);\n\n        if (!self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found) {\n            find(self, false);\n        }\n        FindData storage data = self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];\n        if ((data.offsetLeft + data.offsetRight) > 0) {\n            uint256 maxVal = 2 ** (256 - (data.offsetLeft + data.offsetRight));\n            require(\n                uint256(set) < maxVal,\n                string(\n                    abi.encodePacked(\n                        \"stdStorage find(StdStorage): Packed slot. We can't fit value greater than \",\n                        vm.toString(maxVal)\n                    )\n                )\n            );\n        }\n        bytes32 curVal = vm.load(who, bytes32(data.slot));\n        bytes32 valToSet = stdStorageSafe.getUpdatedSlotValue(curVal, uint256(set), data.offsetLeft, data.offsetRight);\n\n        vm.store(who, bytes32(data.slot), valToSet);\n\n        (bool success, bytes32 callResult) = stdStorageSafe.callTarget(self);\n\n        if (!success || callResult != set) {\n            vm.store(who, bytes32(data.slot), curVal);\n            revert(\"stdStorage find(StdStorage): Failed to write value.\");\n        }\n        clear(self);\n    }\n\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\n        return stdStorageSafe.read_bytes32(self);\n    }\n\n    function read_bool(StdStorage storage self) internal returns (bool) {\n        return stdStorageSafe.read_bool(self);\n    }\n\n    function read_address(StdStorage storage self) internal returns (address) {\n        return stdStorageSafe.read_address(self);\n    }\n\n    function read_uint(StdStorage storage self) internal returns (uint256) {\n        return stdStorageSafe.read_uint(self);\n    }\n\n    function read_int(StdStorage storage self) internal returns (int256) {\n        return stdStorageSafe.read_int(self);\n    }\n\n    function parent(StdStorage storage self) internal returns (uint256, bytes32) {\n        return stdStorageSafe.parent(self);\n    }\n\n    function root(StdStorage storage self) internal returns (uint256) {\n        return stdStorageSafe.root(self);\n    }\n}\n"
          },
          "lib/forge-std/src/StdStyle.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nimport {VmSafe} from \"./Vm.sol\";\n\nlibrary StdStyle {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    string constant RED = \"\\u001b[91m\";\n    string constant GREEN = \"\\u001b[92m\";\n    string constant YELLOW = \"\\u001b[93m\";\n    string constant BLUE = \"\\u001b[94m\";\n    string constant MAGENTA = \"\\u001b[95m\";\n    string constant CYAN = \"\\u001b[96m\";\n    string constant BOLD = \"\\u001b[1m\";\n    string constant DIM = \"\\u001b[2m\";\n    string constant ITALIC = \"\\u001b[3m\";\n    string constant UNDERLINE = \"\\u001b[4m\";\n    string constant INVERSE = \"\\u001b[7m\";\n    string constant RESET = \"\\u001b[0m\";\n\n    function styleConcat(string memory style, string memory self) private pure returns (string memory) {\n        return string(abi.encodePacked(style, self, RESET));\n    }\n\n    function red(string memory self) internal pure returns (string memory) {\n        return styleConcat(RED, self);\n    }\n\n    function red(uint256 self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function red(int256 self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function red(address self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function red(bool self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function redBytes(bytes memory self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function redBytes32(bytes32 self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function green(string memory self) internal pure returns (string memory) {\n        return styleConcat(GREEN, self);\n    }\n\n    function green(uint256 self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function green(int256 self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function green(address self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function green(bool self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function greenBytes(bytes memory self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function greenBytes32(bytes32 self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function yellow(string memory self) internal pure returns (string memory) {\n        return styleConcat(YELLOW, self);\n    }\n\n    function yellow(uint256 self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellow(int256 self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellow(address self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellow(bool self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellowBytes(bytes memory self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellowBytes32(bytes32 self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function blue(string memory self) internal pure returns (string memory) {\n        return styleConcat(BLUE, self);\n    }\n\n    function blue(uint256 self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blue(int256 self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blue(address self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blue(bool self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blueBytes(bytes memory self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blueBytes32(bytes32 self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function magenta(string memory self) internal pure returns (string memory) {\n        return styleConcat(MAGENTA, self);\n    }\n\n    function magenta(uint256 self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magenta(int256 self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magenta(address self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magenta(bool self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magentaBytes(bytes memory self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magentaBytes32(bytes32 self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function cyan(string memory self) internal pure returns (string memory) {\n        return styleConcat(CYAN, self);\n    }\n\n    function cyan(uint256 self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyan(int256 self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyan(address self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyan(bool self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyanBytes(bytes memory self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyanBytes32(bytes32 self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function bold(string memory self) internal pure returns (string memory) {\n        return styleConcat(BOLD, self);\n    }\n\n    function bold(uint256 self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function bold(int256 self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function bold(address self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function bold(bool self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function boldBytes(bytes memory self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function boldBytes32(bytes32 self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function dim(string memory self) internal pure returns (string memory) {\n        return styleConcat(DIM, self);\n    }\n\n    function dim(uint256 self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dim(int256 self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dim(address self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dim(bool self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dimBytes(bytes memory self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dimBytes32(bytes32 self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function italic(string memory self) internal pure returns (string memory) {\n        return styleConcat(ITALIC, self);\n    }\n\n    function italic(uint256 self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italic(int256 self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italic(address self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italic(bool self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italicBytes(bytes memory self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italicBytes32(bytes32 self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function underline(string memory self) internal pure returns (string memory) {\n        return styleConcat(UNDERLINE, self);\n    }\n\n    function underline(uint256 self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underline(int256 self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underline(address self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underline(bool self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underlineBytes(bytes memory self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underlineBytes32(bytes32 self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function inverse(string memory self) internal pure returns (string memory) {\n        return styleConcat(INVERSE, self);\n    }\n\n    function inverse(uint256 self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverse(int256 self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverse(address self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverse(bool self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverseBytes(bytes memory self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverseBytes32(bytes32 self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n}\n"
          },
          "lib/forge-std/src/StdToml.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {VmSafe} from \"./Vm.sol\";\n\n// Helpers for parsing and writing TOML files\n// To parse:\n// ```\n// using stdToml for string;\n// string memory toml = vm.readFile(\"<some_path>\");\n// toml.readUint(\"<json_path>\");\n// ```\n// To write:\n// ```\n// using stdToml for string;\n// string memory json = \"json\";\n// json.serialize(\"a\", uint256(123));\n// string memory semiFinal = json.serialize(\"b\", string(\"test\"));\n// string memory finalJson = json.serialize(\"c\", semiFinal);\n// finalJson.write(\"<some_path>\");\n// ```\n\nlibrary stdToml {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function parseRaw(string memory toml, string memory key) internal pure returns (bytes memory) {\n        return vm.parseToml(toml, key);\n    }\n\n    function readUint(string memory toml, string memory key) internal pure returns (uint256) {\n        return vm.parseTomlUint(toml, key);\n    }\n\n    function readUintArray(string memory toml, string memory key) internal pure returns (uint256[] memory) {\n        return vm.parseTomlUintArray(toml, key);\n    }\n\n    function readInt(string memory toml, string memory key) internal pure returns (int256) {\n        return vm.parseTomlInt(toml, key);\n    }\n\n    function readIntArray(string memory toml, string memory key) internal pure returns (int256[] memory) {\n        return vm.parseTomlIntArray(toml, key);\n    }\n\n    function readBytes32(string memory toml, string memory key) internal pure returns (bytes32) {\n        return vm.parseTomlBytes32(toml, key);\n    }\n\n    function readBytes32Array(string memory toml, string memory key) internal pure returns (bytes32[] memory) {\n        return vm.parseTomlBytes32Array(toml, key);\n    }\n\n    function readString(string memory toml, string memory key) internal pure returns (string memory) {\n        return vm.parseTomlString(toml, key);\n    }\n\n    function readStringArray(string memory toml, string memory key) internal pure returns (string[] memory) {\n        return vm.parseTomlStringArray(toml, key);\n    }\n\n    function readAddress(string memory toml, string memory key) internal pure returns (address) {\n        return vm.parseTomlAddress(toml, key);\n    }\n\n    function readAddressArray(string memory toml, string memory key) internal pure returns (address[] memory) {\n        return vm.parseTomlAddressArray(toml, key);\n    }\n\n    function readBool(string memory toml, string memory key) internal pure returns (bool) {\n        return vm.parseTomlBool(toml, key);\n    }\n\n    function readBoolArray(string memory toml, string memory key) internal pure returns (bool[] memory) {\n        return vm.parseTomlBoolArray(toml, key);\n    }\n\n    function readBytes(string memory toml, string memory key) internal pure returns (bytes memory) {\n        return vm.parseTomlBytes(toml, key);\n    }\n\n    function readBytesArray(string memory toml, string memory key) internal pure returns (bytes[] memory) {\n        return vm.parseTomlBytesArray(toml, key);\n    }\n\n    function serialize(string memory jsonKey, string memory rootObject) internal returns (string memory) {\n        return vm.serializeJson(jsonKey, rootObject);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bool value) internal returns (string memory) {\n        return vm.serializeBool(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bool[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBool(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, uint256 value) internal returns (string memory) {\n        return vm.serializeUint(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, uint256[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeUint(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, int256 value) internal returns (string memory) {\n        return vm.serializeInt(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, int256[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeInt(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, address value) internal returns (string memory) {\n        return vm.serializeAddress(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, address[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeAddress(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes32 value) internal returns (string memory) {\n        return vm.serializeBytes32(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes32[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBytes32(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes memory value) internal returns (string memory) {\n        return vm.serializeBytes(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBytes(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, string memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeString(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, string[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeString(jsonKey, key, value);\n    }\n\n    function write(string memory jsonKey, string memory path) internal {\n        vm.writeToml(jsonKey, path);\n    }\n\n    function write(string memory jsonKey, string memory path, string memory valueKey) internal {\n        vm.writeToml(jsonKey, path, valueKey);\n    }\n}\n"
          },
          "lib/forge-std/src/StdUtils.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {IMulticall3} from \"./interfaces/IMulticall3.sol\";\nimport {MockERC20} from \"./mocks/MockERC20.sol\";\nimport {MockERC721} from \"./mocks/MockERC721.sol\";\nimport {VmSafe} from \"./Vm.sol\";\n\nabstract contract StdUtils {\n    /*//////////////////////////////////////////////////////////////////////////\n                                     CONSTANTS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    IMulticall3 private constant multicall = IMulticall3(0xcA11bde05977b3631167028862bE2a173976CA11);\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n    address private constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\n    uint256 private constant INT256_MIN_ABS =\n        57896044618658097711785492504343953926634992332820282019728792003956564819968;\n    uint256 private constant SECP256K1_ORDER =\n        115792089237316195423570985008687907852837564279074904382605163141518161494337;\n    uint256 private constant UINT256_MAX =\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    // Used by default when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.\n    address private constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                 INTERNAL FUNCTIONS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    function _bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {\n        require(min <= max, \"StdUtils bound(uint256,uint256,uint256): Max is less than min.\");\n        // If x is between min and max, return x directly. This is to ensure that dictionary values\n        // do not get shifted if the min is nonzero. More info: https://github.com/foundry-rs/forge-std/issues/188\n        if (x >= min && x <= max) return x;\n\n        uint256 size = max - min + 1;\n\n        // If the value is 0, 1, 2, 3, wrap that to min, min+1, min+2, min+3. Similarly for the UINT256_MAX side.\n        // This helps ensure coverage of the min/max values.\n        if (x <= 3 && size > x) return min + x;\n        if (x >= UINT256_MAX - 3 && size > UINT256_MAX - x) return max - (UINT256_MAX - x);\n\n        // Otherwise, wrap x into the range [min, max], i.e. the range is inclusive.\n        if (x > max) {\n            uint256 diff = x - max;\n            uint256 rem = diff % size;\n            if (rem == 0) return max;\n            result = min + rem - 1;\n        } else if (x < min) {\n            uint256 diff = min - x;\n            uint256 rem = diff % size;\n            if (rem == 0) return min;\n            result = max - rem + 1;\n        }\n    }\n\n    function bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {\n        result = _bound(x, min, max);\n        console2_log_StdUtils(\"Bound Result\", result);\n    }\n\n    function _bound(int256 x, int256 min, int256 max) internal pure virtual returns (int256 result) {\n        require(min <= max, \"StdUtils bound(int256,int256,int256): Max is less than min.\");\n\n        // Shifting all int256 values to uint256 to use _bound function. The range of two types are:\n        // int256 : -(2**255) ~ (2**255 - 1)\n        // uint256:     0     ~ (2**256 - 1)\n        // So, add 2**255, INT256_MIN_ABS to the integer values.\n        //\n        // If the given integer value is -2**255, we cannot use `-uint256(-x)` because of the overflow.\n        // So, use `~uint256(x) + 1` instead.\n        uint256 _x = x < 0 ? (INT256_MIN_ABS - ~uint256(x) - 1) : (uint256(x) + INT256_MIN_ABS);\n        uint256 _min = min < 0 ? (INT256_MIN_ABS - ~uint256(min) - 1) : (uint256(min) + INT256_MIN_ABS);\n        uint256 _max = max < 0 ? (INT256_MIN_ABS - ~uint256(max) - 1) : (uint256(max) + INT256_MIN_ABS);\n\n        uint256 y = _bound(_x, _min, _max);\n\n        // To move it back to int256 value, subtract INT256_MIN_ABS at here.\n        result = y < INT256_MIN_ABS ? int256(~(INT256_MIN_ABS - y) + 1) : int256(y - INT256_MIN_ABS);\n    }\n\n    function bound(int256 x, int256 min, int256 max) internal pure virtual returns (int256 result) {\n        result = _bound(x, min, max);\n        console2_log_StdUtils(\"Bound result\", vm.toString(result));\n    }\n\n    function boundPrivateKey(uint256 privateKey) internal pure virtual returns (uint256 result) {\n        result = _bound(privateKey, 1, SECP256K1_ORDER - 1);\n    }\n\n    function bytesToUint(bytes memory b) internal pure virtual returns (uint256) {\n        require(b.length <= 32, \"StdUtils bytesToUint(bytes): Bytes length exceeds 32.\");\n        return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));\n    }\n\n    /// @dev Compute the address a contract will be deployed at for a given deployer address and nonce\n    /// @notice adapted from Solmate implementation (https://github.com/Rari-Capital/solmate/blob/main/src/utils/LibRLP.sol)\n    function computeCreateAddress(address deployer, uint256 nonce) internal pure virtual returns (address) {\n        console2_log_StdUtils(\"computeCreateAddress is deprecated. Please use vm.computeCreateAddress instead.\");\n        return vm.computeCreateAddress(deployer, nonce);\n    }\n\n    function computeCreate2Address(bytes32 salt, bytes32 initcodeHash, address deployer)\n        internal\n        pure\n        virtual\n        returns (address)\n    {\n        console2_log_StdUtils(\"computeCreate2Address is deprecated. Please use vm.computeCreate2Address instead.\");\n        return vm.computeCreate2Address(salt, initcodeHash, deployer);\n    }\n\n    /// @dev returns the address of a contract created with CREATE2 using the default CREATE2 deployer\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) internal pure returns (address) {\n        console2_log_StdUtils(\"computeCreate2Address is deprecated. Please use vm.computeCreate2Address instead.\");\n        return vm.computeCreate2Address(salt, initCodeHash);\n    }\n\n    /// @dev returns an initialized mock ERC20 contract\n    function deployMockERC20(string memory name, string memory symbol, uint8 decimals)\n        internal\n        returns (MockERC20 mock)\n    {\n        mock = new MockERC20();\n        mock.initialize(name, symbol, decimals);\n    }\n\n    /// @dev returns an initialized mock ERC721 contract\n    function deployMockERC721(string memory name, string memory symbol) internal returns (MockERC721 mock) {\n        mock = new MockERC721();\n        mock.initialize(name, symbol);\n    }\n\n    /// @dev returns the hash of the init code (creation code + no args) used in CREATE2 with no constructor arguments\n    /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\n    function hashInitCode(bytes memory creationCode) internal pure returns (bytes32) {\n        return hashInitCode(creationCode, \"\");\n    }\n\n    /// @dev returns the hash of the init code (creation code + ABI-encoded args) used in CREATE2\n    /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\n    /// @param args the ABI-encoded arguments to the constructor of C\n    function hashInitCode(bytes memory creationCode, bytes memory args) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(creationCode, args));\n    }\n\n    // Performs a single call with Multicall3 to query the ERC-20 token balances of the given addresses.\n    function getTokenBalances(address token, address[] memory addresses)\n        internal\n        virtual\n        returns (uint256[] memory balances)\n    {\n        uint256 tokenCodeSize;\n        assembly {\n            tokenCodeSize := extcodesize(token)\n        }\n        require(tokenCodeSize > 0, \"StdUtils getTokenBalances(address,address[]): Token address is not a contract.\");\n\n        // ABI encode the aggregate call to Multicall3.\n        uint256 length = addresses.length;\n        IMulticall3.Call[] memory calls = new IMulticall3.Call[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            // 0x70a08231 = bytes4(\"balanceOf(address)\"))\n            calls[i] = IMulticall3.Call({target: token, callData: abi.encodeWithSelector(0x70a08231, (addresses[i]))});\n        }\n\n        // Make the aggregate call.\n        (, bytes[] memory returnData) = multicall.aggregate(calls);\n\n        // ABI decode the return data and return the balances.\n        balances = new uint256[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            balances[i] = abi.decode(returnData[i], (uint256));\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                 PRIVATE FUNCTIONS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    function addressFromLast20Bytes(bytes32 bytesValue) private pure returns (address) {\n        return address(uint160(uint256(bytesValue)));\n    }\n\n    // This section is used to prevent the compilation of console, which shortens the compilation time when console is\n    // not used elsewhere. We also trick the compiler into letting us make the console log methods as `pure` to avoid\n    // any breaking changes to function signatures.\n    function _castLogPayloadViewToPure(function(bytes memory) internal view fnIn)\n        internal\n        pure\n        returns (function(bytes memory) internal pure fnOut)\n    {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castLogPayloadViewToPure(_sendLogPayloadView)(payload);\n    }\n\n    function _sendLogPayloadView(bytes memory payload) private view {\n        uint256 payloadLength = payload.length;\n        address consoleAddress = CONSOLE2_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            let payloadStart := add(payload, 32)\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n        }\n    }\n\n    function console2_log_StdUtils(string memory p0) private pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function console2_log_StdUtils(string memory p0, uint256 p1) private pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function console2_log_StdUtils(string memory p0, string memory p1) private pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n}\n"
          },
          "lib/forge-std/src/Vm.sol": {
            "content": "// Automatically @generated by scripts/vm.py. Do not modify manually.\n\n// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.2 <0.9.0;\npragma experimental ABIEncoderV2;\n\n/// The `VmSafe` interface does not allow manipulation of the EVM state or other actions that may\n/// result in Script simulations differing from on-chain execution. It is recommended to only use\n/// these cheats in scripts.\ninterface VmSafe {\n    /// A modification applied to either `msg.sender` or `tx.origin`. Returned by `readCallers`.\n    enum CallerMode {\n        // No caller modification is currently active.\n        None,\n        // A one time broadcast triggered by a `vm.broadcast()` call is currently active.\n        Broadcast,\n        // A recurrent broadcast triggered by a `vm.startBroadcast()` call is currently active.\n        RecurrentBroadcast,\n        // A one time prank triggered by a `vm.prank()` call is currently active.\n        Prank,\n        // A recurrent prank triggered by a `vm.startPrank()` call is currently active.\n        RecurrentPrank\n    }\n\n    /// The kind of account access that occurred.\n    enum AccountAccessKind {\n        // The account was called.\n        Call,\n        // The account was called via delegatecall.\n        DelegateCall,\n        // The account was called via callcode.\n        CallCode,\n        // The account was called via staticcall.\n        StaticCall,\n        // The account was created.\n        Create,\n        // The account was selfdestructed.\n        SelfDestruct,\n        // Synthetic access indicating the current context has resumed after a previous sub-context (AccountAccess).\n        Resume,\n        // The account's balance was read.\n        Balance,\n        // The account's codesize was read.\n        Extcodesize,\n        // The account's codehash was read.\n        Extcodehash,\n        // The account's code was copied.\n        Extcodecopy\n    }\n\n    /// An Ethereum log. Returned by `getRecordedLogs`.\n    struct Log {\n        // The topics of the log, including the signature, if any.\n        bytes32[] topics;\n        // The raw data of the log.\n        bytes data;\n        // The address of the log's emitter.\n        address emitter;\n    }\n\n    /// An RPC URL and its alias. Returned by `rpcUrlStructs`.\n    struct Rpc {\n        // The alias of the RPC URL.\n        string key;\n        // The RPC URL.\n        string url;\n    }\n\n    /// An RPC log object. Returned by `eth_getLogs`.\n    struct EthGetLogs {\n        // The address of the log's emitter.\n        address emitter;\n        // The topics of the log, including the signature, if any.\n        bytes32[] topics;\n        // The raw data of the log.\n        bytes data;\n        // The block hash.\n        bytes32 blockHash;\n        // The block number.\n        uint64 blockNumber;\n        // The transaction hash.\n        bytes32 transactionHash;\n        // The transaction index in the block.\n        uint64 transactionIndex;\n        // The log index.\n        uint256 logIndex;\n        // Whether the log was removed.\n        bool removed;\n    }\n\n    /// A single entry in a directory listing. Returned by `readDir`.\n    struct DirEntry {\n        // The error message, if any.\n        string errorMessage;\n        // The path of the entry.\n        string path;\n        // The depth of the entry.\n        uint64 depth;\n        // Whether the entry is a directory.\n        bool isDir;\n        // Whether the entry is a symlink.\n        bool isSymlink;\n    }\n\n    /// Metadata information about a file.\n    /// This structure is returned from the `fsMetadata` function and represents known\n    /// metadata about a file such as its permissions, size, modification\n    /// times, etc.\n    struct FsMetadata {\n        // True if this metadata is for a directory.\n        bool isDir;\n        // True if this metadata is for a symlink.\n        bool isSymlink;\n        // The size of the file, in bytes, this metadata is for.\n        uint256 length;\n        // True if this metadata is for a readonly (unwritable) file.\n        bool readOnly;\n        // The last modification time listed in this metadata.\n        uint256 modified;\n        // The last access time of this metadata.\n        uint256 accessed;\n        // The creation time listed in this metadata.\n        uint256 created;\n    }\n\n    /// A wallet with a public and private key.\n    struct Wallet {\n        // The wallet's address.\n        address addr;\n        // The wallet's public key `X`.\n        uint256 publicKeyX;\n        // The wallet's public key `Y`.\n        uint256 publicKeyY;\n        // The wallet's private key.\n        uint256 privateKey;\n    }\n\n    /// The result of a `tryFfi` call.\n    struct FfiResult {\n        // The exit code of the call.\n        int32 exitCode;\n        // The optionally hex-decoded `stdout` data.\n        bytes stdout;\n        // The `stderr` data.\n        bytes stderr;\n    }\n\n    /// Information on the chain and fork.\n    struct ChainInfo {\n        // The fork identifier. Set to zero if no fork is active.\n        uint256 forkId;\n        // The chain ID of the current fork.\n        uint256 chainId;\n    }\n\n    /// The result of a `stopAndReturnStateDiff` call.\n    struct AccountAccess {\n        // The chain and fork the access occurred.\n        ChainInfo chainInfo;\n        // The kind of account access that determines what the account is.\n        // If kind is Call, DelegateCall, StaticCall or CallCode, then the account is the callee.\n        // If kind is Create, then the account is the newly created account.\n        // If kind is SelfDestruct, then the account is the selfdestruct recipient.\n        // If kind is a Resume, then account represents a account context that has resumed.\n        AccountAccessKind kind;\n        // The account that was accessed.\n        // It's either the account created, callee or a selfdestruct recipient for CREATE, CALL or SELFDESTRUCT.\n        address account;\n        // What accessed the account.\n        address accessor;\n        // If the account was initialized or empty prior to the access.\n        // An account is considered initialized if it has code, a\n        // non-zero nonce, or a non-zero balance.\n        bool initialized;\n        // The previous balance of the accessed account.\n        uint256 oldBalance;\n        // The potential new balance of the accessed account.\n        // That is, all balance changes are recorded here, even if reverts occurred.\n        uint256 newBalance;\n        // Code of the account deployed by CREATE.\n        bytes deployedCode;\n        // Value passed along with the account access\n        uint256 value;\n        // Input data provided to the CREATE or CALL\n        bytes data;\n        // If this access reverted in either the current or parent context.\n        bool reverted;\n        // An ordered list of storage accesses made during an account access operation.\n        StorageAccess[] storageAccesses;\n        // Call depth traversed during the recording of state differences\n        uint64 depth;\n    }\n\n    /// The storage accessed during an `AccountAccess`.\n    struct StorageAccess {\n        // The account whose storage was accessed.\n        address account;\n        // The slot that was accessed.\n        bytes32 slot;\n        // If the access was a write.\n        bool isWrite;\n        // The previous value of the slot.\n        bytes32 previousValue;\n        // The new value of the slot.\n        bytes32 newValue;\n        // If the access was reverted.\n        bool reverted;\n    }\n\n    // ======== Environment ========\n\n    /// Gets the environment variable `name` and parses it as `address`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envAddress(string calldata name) external view returns (address value);\n\n    /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envAddress(string calldata name, string calldata delim) external view returns (address[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bool`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBool(string calldata name) external view returns (bool value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBool(string calldata name, string calldata delim) external view returns (bool[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bytes32`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes32(string calldata name) external view returns (bytes32 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes32(string calldata name, string calldata delim) external view returns (bytes32[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bytes`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes(string calldata name) external view returns (bytes memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes(string calldata name, string calldata delim) external view returns (bytes[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `int256`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envInt(string calldata name) external view returns (int256 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envInt(string calldata name, string calldata delim) external view returns (int256[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bool`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, bool defaultValue) external view returns (bool value);\n\n    /// Gets the environment variable `name` and parses it as `uint256`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, uint256 defaultValue) external view returns (uint256 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, address[] calldata defaultValue)\n        external\n        view\n        returns (address[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, bytes32[] calldata defaultValue)\n        external\n        view\n        returns (bytes32[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, string[] calldata defaultValue)\n        external\n        view\n        returns (string[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, bytes[] calldata defaultValue)\n        external\n        view\n        returns (bytes[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `int256`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, int256 defaultValue) external view returns (int256 value);\n\n    /// Gets the environment variable `name` and parses it as `address`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, address defaultValue) external view returns (address value);\n\n    /// Gets the environment variable `name` and parses it as `bytes32`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, bytes32 defaultValue) external view returns (bytes32 value);\n\n    /// Gets the environment variable `name` and parses it as `string`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata defaultValue) external view returns (string memory value);\n\n    /// Gets the environment variable `name` and parses it as `bytes`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, bytes calldata defaultValue) external view returns (bytes memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, bool[] calldata defaultValue)\n        external\n        view\n        returns (bool[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, uint256[] calldata defaultValue)\n        external\n        view\n        returns (uint256[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, int256[] calldata defaultValue)\n        external\n        view\n        returns (int256[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `string`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envString(string calldata name) external view returns (string memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envString(string calldata name, string calldata delim) external view returns (string[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `uint256`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envUint(string calldata name) external view returns (uint256 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envUint(string calldata name, string calldata delim) external view returns (uint256[] memory value);\n\n    /// Sets environment variables.\n    function setEnv(string calldata name, string calldata value) external;\n\n    // ======== EVM ========\n\n    /// Gets all accessed reads and write slot from a `vm.record` session, for a given address.\n    function accesses(address target) external returns (bytes32[] memory readSlots, bytes32[] memory writeSlots);\n\n    /// Gets the address for a given private key.\n    function addr(uint256 privateKey) external pure returns (address keyAddr);\n\n    /// Gets all the logs according to specified filter.\n    function eth_getLogs(uint256 fromBlock, uint256 toBlock, address target, bytes32[] calldata topics)\n        external\n        returns (EthGetLogs[] memory logs);\n\n    /// Gets the current `block.number`.\n    /// You should use this instead of `block.number` if you use `vm.roll`, as `block.number` is assumed to be constant across a transaction,\n    /// and as a result will get optimized out by the compiler.\n    /// See https://github.com/foundry-rs/foundry/issues/6180\n    function getBlockNumber() external view returns (uint256 height);\n\n    /// Gets the current `block.timestamp`.\n    /// You should use this instead of `block.timestamp` if you use `vm.warp`, as `block.timestamp` is assumed to be constant across a transaction,\n    /// and as a result will get optimized out by the compiler.\n    /// See https://github.com/foundry-rs/foundry/issues/6180\n    function getBlockTimestamp() external view returns (uint256 timestamp);\n\n    /// Gets the map key and parent of a mapping at a given slot, for a given address.\n    function getMappingKeyAndParentOf(address target, bytes32 elementSlot)\n        external\n        returns (bool found, bytes32 key, bytes32 parent);\n\n    /// Gets the number of elements in the mapping at the given slot, for a given address.\n    function getMappingLength(address target, bytes32 mappingSlot) external returns (uint256 length);\n\n    /// Gets the elements at index idx of the mapping at the given slot, for a given address. The\n    /// index must be less than the length of the mapping (i.e. the number of keys in the mapping).\n    function getMappingSlotAt(address target, bytes32 mappingSlot, uint256 idx) external returns (bytes32 value);\n\n    /// Gets the nonce of an account.\n    function getNonce(address account) external view returns (uint64 nonce);\n\n    /// Gets all the recorded logs.\n    function getRecordedLogs() external returns (Log[] memory logs);\n\n    /// Loads a storage slot from an address.\n    function load(address target, bytes32 slot) external view returns (bytes32 data);\n\n    /// Pauses gas metering (i.e. gas usage is not counted). Noop if already paused.\n    function pauseGasMetering() external;\n\n    /// Records all storage reads and writes.\n    function record() external;\n\n    /// Record all the transaction logs.\n    function recordLogs() external;\n\n    /// Resumes gas metering (i.e. gas usage is counted again). Noop if already on.\n    function resumeGasMetering() external;\n\n    /// Performs an Ethereum JSON-RPC request to the current fork URL.\n    function rpc(string calldata method, string calldata params) external returns (bytes memory data);\n\n    /// Signs `digest` with `privateKey` using the secp256r1 curve.\n    function signP256(uint256 privateKey, bytes32 digest) external pure returns (bytes32 r, bytes32 s);\n\n    /// Signs `digest` with `privateKey` using the secp256k1 curve.\n    function sign(uint256 privateKey, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\n\n    /// Starts recording all map SSTOREs for later retrieval.\n    function startMappingRecording() external;\n\n    /// Record all account accesses as part of CREATE, CALL or SELFDESTRUCT opcodes in order,\n    /// along with the context of the calls\n    function startStateDiffRecording() external;\n\n    /// Returns an ordered array of all account accesses from a `vm.startStateDiffRecording` session.\n    function stopAndReturnStateDiff() external returns (AccountAccess[] memory accountAccesses);\n\n    /// Stops recording all map SSTOREs for later retrieval and clears the recorded data.\n    function stopMappingRecording() external;\n\n    // ======== Filesystem ========\n\n    /// Closes file for reading, resetting the offset and allowing to read it from beginning with readLine.\n    /// `path` is relative to the project root.\n    function closeFile(string calldata path) external;\n\n    /// Copies the contents of one file to another. This function will **overwrite** the contents of `to`.\n    /// On success, the total number of bytes copied is returned and it is equal to the length of the `to` file as reported by `metadata`.\n    /// Both `from` and `to` are relative to the project root.\n    function copyFile(string calldata from, string calldata to) external returns (uint64 copied);\n\n    /// Creates a new, empty directory at the provided path.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - User lacks permissions to modify `path`.\n    /// - A parent of the given path doesn't exist and `recursive` is false.\n    /// - `path` already exists and `recursive` is false.\n    /// `path` is relative to the project root.\n    function createDir(string calldata path, bool recursive) external;\n\n    /// Returns true if the given path points to an existing entity, else returns false.\n    function exists(string calldata path) external returns (bool result);\n\n    /// Performs a foreign function call via the terminal.\n    function ffi(string[] calldata commandInput) external returns (bytes memory result);\n\n    /// Given a path, query the file system to get information about a file, directory, etc.\n    function fsMetadata(string calldata path) external view returns (FsMetadata memory metadata);\n\n    /// Gets the creation bytecode from an artifact file. Takes in the relative path to the json file.\n    function getCode(string calldata artifactPath) external view returns (bytes memory creationBytecode);\n\n    /// Gets the deployed bytecode from an artifact file. Takes in the relative path to the json file.\n    function getDeployedCode(string calldata artifactPath) external view returns (bytes memory runtimeBytecode);\n\n    /// Returns true if the path exists on disk and is pointing at a directory, else returns false.\n    function isDir(string calldata path) external returns (bool result);\n\n    /// Returns true if the path exists on disk and is pointing at a regular file, else returns false.\n    function isFile(string calldata path) external returns (bool result);\n\n    /// Get the path of the current project root.\n    function projectRoot() external view returns (string memory path);\n\n    /// Reads the directory at the given path recursively, up to `maxDepth`.\n    /// `maxDepth` defaults to 1, meaning only the direct children of the given directory will be returned.\n    /// Follows symbolic links if `followLinks` is true.\n    function readDir(string calldata path) external view returns (DirEntry[] memory entries);\n\n    /// See `readDir(string)`.\n    function readDir(string calldata path, uint64 maxDepth) external view returns (DirEntry[] memory entries);\n\n    /// See `readDir(string)`.\n    function readDir(string calldata path, uint64 maxDepth, bool followLinks)\n        external\n        view\n        returns (DirEntry[] memory entries);\n\n    /// Reads the entire content of file to string. `path` is relative to the project root.\n    function readFile(string calldata path) external view returns (string memory data);\n\n    /// Reads the entire content of file as binary. `path` is relative to the project root.\n    function readFileBinary(string calldata path) external view returns (bytes memory data);\n\n    /// Reads next line of file to string.\n    function readLine(string calldata path) external view returns (string memory line);\n\n    /// Reads a symbolic link, returning the path that the link points to.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - `path` is not a symbolic link.\n    /// - `path` does not exist.\n    function readLink(string calldata linkPath) external view returns (string memory targetPath);\n\n    /// Removes a directory at the provided path.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - `path` doesn't exist.\n    /// - `path` isn't a directory.\n    /// - User lacks permissions to modify `path`.\n    /// - The directory is not empty and `recursive` is false.\n    /// `path` is relative to the project root.\n    function removeDir(string calldata path, bool recursive) external;\n\n    /// Removes a file from the filesystem.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - `path` points to a directory.\n    /// - The file doesn't exist.\n    /// - The user lacks permissions to remove the file.\n    /// `path` is relative to the project root.\n    function removeFile(string calldata path) external;\n\n    /// Performs a foreign function call via terminal and returns the exit code, stdout, and stderr.\n    function tryFfi(string[] calldata commandInput) external returns (FfiResult memory result);\n\n    /// Returns the time since unix epoch in milliseconds.\n    function unixTime() external returns (uint256 milliseconds);\n\n    /// Writes data to file, creating a file if it does not exist, and entirely replacing its contents if it does.\n    /// `path` is relative to the project root.\n    function writeFile(string calldata path, string calldata data) external;\n\n    /// Writes binary data to a file, creating a file if it does not exist, and entirely replacing its contents if it does.\n    /// `path` is relative to the project root.\n    function writeFileBinary(string calldata path, bytes calldata data) external;\n\n    /// Writes line to file, creating a file if it does not exist.\n    /// `path` is relative to the project root.\n    function writeLine(string calldata path, string calldata data) external;\n\n    // ======== JSON ========\n\n    /// Checks if `key` exists in a JSON object\n    /// `keyExists` is being deprecated in favor of `keyExistsJson`. It will be removed in future versions.\n    function keyExists(string calldata json, string calldata key) external view returns (bool);\n\n    /// Checks if `key` exists in a JSON object.\n    function keyExistsJson(string calldata json, string calldata key) external view returns (bool);\n\n    /// Parses a string of JSON data at `key` and coerces it to `address`.\n    function parseJsonAddress(string calldata json, string calldata key) external pure returns (address);\n\n    /// Parses a string of JSON data at `key` and coerces it to `address[]`.\n    function parseJsonAddressArray(string calldata json, string calldata key)\n        external\n        pure\n        returns (address[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bool`.\n    function parseJsonBool(string calldata json, string calldata key) external pure returns (bool);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bool[]`.\n    function parseJsonBoolArray(string calldata json, string calldata key) external pure returns (bool[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes`.\n    function parseJsonBytes(string calldata json, string calldata key) external pure returns (bytes memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes32`.\n    function parseJsonBytes32(string calldata json, string calldata key) external pure returns (bytes32);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes32[]`.\n    function parseJsonBytes32Array(string calldata json, string calldata key)\n        external\n        pure\n        returns (bytes32[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes[]`.\n    function parseJsonBytesArray(string calldata json, string calldata key) external pure returns (bytes[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `int256`.\n    function parseJsonInt(string calldata json, string calldata key) external pure returns (int256);\n\n    /// Parses a string of JSON data at `key` and coerces it to `int256[]`.\n    function parseJsonIntArray(string calldata json, string calldata key) external pure returns (int256[] memory);\n\n    /// Returns an array of all the keys in a JSON object.\n    function parseJsonKeys(string calldata json, string calldata key) external pure returns (string[] memory keys);\n\n    /// Parses a string of JSON data at `key` and coerces it to `string`.\n    function parseJsonString(string calldata json, string calldata key) external pure returns (string memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `string[]`.\n    function parseJsonStringArray(string calldata json, string calldata key) external pure returns (string[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `uint256`.\n    function parseJsonUint(string calldata json, string calldata key) external pure returns (uint256);\n\n    /// Parses a string of JSON data at `key` and coerces it to `uint256[]`.\n    function parseJsonUintArray(string calldata json, string calldata key) external pure returns (uint256[] memory);\n\n    /// ABI-encodes a JSON object.\n    function parseJson(string calldata json) external pure returns (bytes memory abiEncodedData);\n\n    /// ABI-encodes a JSON object at `key`.\n    function parseJson(string calldata json, string calldata key) external pure returns (bytes memory abiEncodedData);\n\n    /// See `serializeJson`.\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes calldata value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256[] calldata values)\n        external\n        returns (string memory json);\n\n    /// Serializes a key and value to a JSON object stored in-memory that can be later written to a file.\n    /// Returns the stringified version of the specific JSON file up to that moment.\n    function serializeJson(string calldata objectKey, string calldata value) external returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeString(string calldata objectKey, string calldata valueKey, string calldata value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeString(string calldata objectKey, string calldata valueKey, string[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256[] calldata values)\n        external\n        returns (string memory json);\n\n    /// Write a serialized JSON object to a file. If the file exists, it will be overwritten.\n    function writeJson(string calldata json, string calldata path) external;\n\n    /// Write a serialized JSON object to an **existing** JSON file, replacing a value with key = <value_key.>\n    /// This is useful to replace a specific value of a JSON file, without having to parse the entire thing.\n    function writeJson(string calldata json, string calldata path, string calldata valueKey) external;\n\n    // ======== Scripting ========\n\n    /// Using the address that calls the test contract, has the next call (at this call depth only)\n    /// create a transaction that can later be signed and sent onchain.\n    function broadcast() external;\n\n    /// Has the next call (at this call depth only) create a transaction with the address provided\n    /// as the sender that can later be signed and sent onchain.\n    function broadcast(address signer) external;\n\n    /// Has the next call (at this call depth only) create a transaction with the private key\n    /// provided as the sender that can later be signed and sent onchain.\n    function broadcast(uint256 privateKey) external;\n\n    /// Using the address that calls the test contract, has all subsequent calls\n    /// (at this call depth only) create transactions that can later be signed and sent onchain.\n    function startBroadcast() external;\n\n    /// Has all subsequent calls (at this call depth only) create transactions with the address\n    /// provided that can later be signed and sent onchain.\n    function startBroadcast(address signer) external;\n\n    /// Has all subsequent calls (at this call depth only) create transactions with the private key\n    /// provided that can later be signed and sent onchain.\n    function startBroadcast(uint256 privateKey) external;\n\n    /// Stops collecting onchain transactions.\n    function stopBroadcast() external;\n\n    // ======== String ========\n\n    /// Parses the given `string` into an `address`.\n    function parseAddress(string calldata stringifiedValue) external pure returns (address parsedValue);\n\n    /// Parses the given `string` into a `bool`.\n    function parseBool(string calldata stringifiedValue) external pure returns (bool parsedValue);\n\n    /// Parses the given `string` into `bytes`.\n    function parseBytes(string calldata stringifiedValue) external pure returns (bytes memory parsedValue);\n\n    /// Parses the given `string` into a `bytes32`.\n    function parseBytes32(string calldata stringifiedValue) external pure returns (bytes32 parsedValue);\n\n    /// Parses the given `string` into a `int256`.\n    function parseInt(string calldata stringifiedValue) external pure returns (int256 parsedValue);\n\n    /// Parses the given `string` into a `uint256`.\n    function parseUint(string calldata stringifiedValue) external pure returns (uint256 parsedValue);\n\n    /// Replaces occurrences of `from` in the given `string` with `to`.\n    function replace(string calldata input, string calldata from, string calldata to)\n        external\n        pure\n        returns (string memory output);\n\n    /// Splits the given `string` into an array of strings divided by the `delimiter`.\n    function split(string calldata input, string calldata delimiter) external pure returns (string[] memory outputs);\n\n    /// Converts the given `string` value to Lowercase.\n    function toLowercase(string calldata input) external pure returns (string memory output);\n\n    /// Converts the given value to a `string`.\n    function toString(address value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(bytes calldata value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(bytes32 value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(bool value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(uint256 value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(int256 value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given `string` value to Uppercase.\n    function toUppercase(string calldata input) external pure returns (string memory output);\n\n    /// Trims leading and trailing whitespace from the given `string` value.\n    function trim(string calldata input) external pure returns (string memory output);\n\n    // ======== Testing ========\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message.\n    function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqAbsDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message.\n    function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqAbsDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) external pure;\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Includes error message into revert string on failure.\n    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Includes error message into revert string on failure.\n    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message.\n    function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals)\n        external\n        pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqRelDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message.\n    function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals)\n        external\n        pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqRelDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxPercentDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Includes error message into revert string on failure.\n    function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta, string calldata error)\n        external\n        pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) external pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Includes error message into revert string on failure.\n    function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta, string calldata error)\n        external\n        pure;\n\n    /// Asserts that two `uint256` values are equal, formatting them with decimals in failure message.\n    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `uint256` values are equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are equal, formatting them with decimals in failure message.\n    function assertEqDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `int256` values are equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertEqDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `bool` values are equal.\n    function assertEq(bool left, bool right) external pure;\n\n    /// Asserts that two `bool` values are equal and includes error message into revert string on failure.\n    function assertEq(bool left, bool right, string calldata error) external pure;\n\n    /// Asserts that two `string` values are equal.\n    function assertEq(string calldata left, string calldata right) external pure;\n\n    /// Asserts that two `string` values are equal and includes error message into revert string on failure.\n    function assertEq(string calldata left, string calldata right, string calldata error) external pure;\n\n    /// Asserts that two `bytes` values are equal.\n    function assertEq(bytes calldata left, bytes calldata right) external pure;\n\n    /// Asserts that two `bytes` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes calldata left, bytes calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bool` values are equal.\n    function assertEq(bool[] calldata left, bool[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bool` values are equal and includes error message into revert string on failure.\n    function assertEq(bool[] calldata left, bool[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `uint256 values are equal.\n    function assertEq(uint256[] calldata left, uint256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `uint256` values are equal and includes error message into revert string on failure.\n    function assertEq(uint256[] calldata left, uint256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `int256` values are equal.\n    function assertEq(int256[] calldata left, int256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `int256` values are equal and includes error message into revert string on failure.\n    function assertEq(int256[] calldata left, int256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are equal.\n    function assertEq(uint256 left, uint256 right) external pure;\n\n    /// Asserts that two arrays of `address` values are equal.\n    function assertEq(address[] calldata left, address[] calldata right) external pure;\n\n    /// Asserts that two arrays of `address` values are equal and includes error message into revert string on failure.\n    function assertEq(address[] calldata left, address[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are equal.\n    function assertEq(bytes32[] calldata left, bytes32[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes32[] calldata left, bytes32[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `string` values are equal.\n    function assertEq(string[] calldata left, string[] calldata right) external pure;\n\n    /// Asserts that two arrays of `string` values are equal and includes error message into revert string on failure.\n    function assertEq(string[] calldata left, string[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes` values are equal.\n    function assertEq(bytes[] calldata left, bytes[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes[] calldata left, bytes[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are equal and includes error message into revert string on failure.\n    function assertEq(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are equal.\n    function assertEq(int256 left, int256 right) external pure;\n\n    /// Asserts that two `int256` values are equal and includes error message into revert string on failure.\n    function assertEq(int256 left, int256 right, string calldata error) external pure;\n\n    /// Asserts that two `address` values are equal.\n    function assertEq(address left, address right) external pure;\n\n    /// Asserts that two `address` values are equal and includes error message into revert string on failure.\n    function assertEq(address left, address right, string calldata error) external pure;\n\n    /// Asserts that two `bytes32` values are equal.\n    function assertEq(bytes32 left, bytes32 right) external pure;\n\n    /// Asserts that two `bytes32` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes32 left, bytes32 right, string calldata error) external pure;\n\n    /// Asserts that the given condition is false.\n    function assertFalse(bool condition) external pure;\n\n    /// Asserts that the given condition is false and includes error message into revert string on failure.\n    function assertFalse(bool condition, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertGeDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGeDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    function assertGe(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertGe(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    function assertGe(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertGe(int256 left, int256 right, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message.\n    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message.\n    function assertGtDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGtDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    function assertGt(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    /// Includes error message into revert string on failure.\n    function assertGt(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    function assertGt(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    /// Includes error message into revert string on failure.\n    function assertGt(int256 left, int256 right, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertLeDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLeDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    function assertLe(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertLe(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    function assertLe(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertLe(int256 left, int256 right, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message.\n    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message.\n    function assertLtDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLtDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    function assertLt(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    /// Includes error message into revert string on failure.\n    function assertLt(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    function assertLt(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    /// Includes error message into revert string on failure.\n    function assertLt(int256 left, int256 right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.\n    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are not equal, formatting them with decimals in failure message.\n    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `int256` values are not equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `bool` values are not equal.\n    function assertNotEq(bool left, bool right) external pure;\n\n    /// Asserts that two `bool` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bool left, bool right, string calldata error) external pure;\n\n    /// Asserts that two `string` values are not equal.\n    function assertNotEq(string calldata left, string calldata right) external pure;\n\n    /// Asserts that two `string` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(string calldata left, string calldata right, string calldata error) external pure;\n\n    /// Asserts that two `bytes` values are not equal.\n    function assertNotEq(bytes calldata left, bytes calldata right) external pure;\n\n    /// Asserts that two `bytes` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes calldata left, bytes calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bool` values are not equal.\n    function assertNotEq(bool[] calldata left, bool[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bool` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bool[] calldata left, bool[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `uint256` values are not equal.\n    function assertNotEq(uint256[] calldata left, uint256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `uint256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(uint256[] calldata left, uint256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `int256` values are not equal.\n    function assertNotEq(int256[] calldata left, int256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `int256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(int256[] calldata left, int256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are not equal.\n    function assertNotEq(uint256 left, uint256 right) external pure;\n\n    /// Asserts that two arrays of `address` values are not equal.\n    function assertNotEq(address[] calldata left, address[] calldata right) external pure;\n\n    /// Asserts that two arrays of `address` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(address[] calldata left, address[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are not equal.\n    function assertNotEq(bytes32[] calldata left, bytes32[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes32[] calldata left, bytes32[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `string` values are not equal.\n    function assertNotEq(string[] calldata left, string[] calldata right) external pure;\n\n    /// Asserts that two arrays of `string` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(string[] calldata left, string[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes` values are not equal.\n    function assertNotEq(bytes[] calldata left, bytes[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes[] calldata left, bytes[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are not equal.\n    function assertNotEq(int256 left, int256 right) external pure;\n\n    /// Asserts that two `int256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(int256 left, int256 right, string calldata error) external pure;\n\n    /// Asserts that two `address` values are not equal.\n    function assertNotEq(address left, address right) external pure;\n\n    /// Asserts that two `address` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(address left, address right, string calldata error) external pure;\n\n    /// Asserts that two `bytes32` values are not equal.\n    function assertNotEq(bytes32 left, bytes32 right) external pure;\n\n    /// Asserts that two `bytes32` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes32 left, bytes32 right, string calldata error) external pure;\n\n    /// Asserts that the given condition is true.\n    function assertTrue(bool condition) external pure;\n\n    /// Asserts that the given condition is true and includes error message into revert string on failure.\n    function assertTrue(bool condition, string calldata error) external pure;\n\n    /// If the condition is false, discard this run's fuzz inputs and generate new ones.\n    function assume(bool condition) external pure;\n\n    /// Writes a breakpoint to jump to in the debugger.\n    function breakpoint(string calldata char) external;\n\n    /// Writes a conditional breakpoint to jump to in the debugger.\n    function breakpoint(string calldata char, bool value) external;\n\n    /// Returns the RPC url for the given alias.\n    function rpcUrl(string calldata rpcAlias) external view returns (string memory json);\n\n    /// Returns all rpc urls and their aliases as structs.\n    function rpcUrlStructs() external view returns (Rpc[] memory urls);\n\n    /// Returns all rpc urls and their aliases `[alias, url][]`.\n    function rpcUrls() external view returns (string[2][] memory urls);\n\n    /// Suspends execution of the main thread for `duration` milliseconds.\n    function sleep(uint256 duration) external;\n\n    // ======== Toml ========\n\n    /// Checks if `key` exists in a TOML table.\n    function keyExistsToml(string calldata toml, string calldata key) external view returns (bool);\n\n    /// Parses a string of TOML data at `key` and coerces it to `address`.\n    function parseTomlAddress(string calldata toml, string calldata key) external pure returns (address);\n\n    /// Parses a string of TOML data at `key` and coerces it to `address[]`.\n    function parseTomlAddressArray(string calldata toml, string calldata key)\n        external\n        pure\n        returns (address[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bool`.\n    function parseTomlBool(string calldata toml, string calldata key) external pure returns (bool);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bool[]`.\n    function parseTomlBoolArray(string calldata toml, string calldata key) external pure returns (bool[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes`.\n    function parseTomlBytes(string calldata toml, string calldata key) external pure returns (bytes memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes32`.\n    function parseTomlBytes32(string calldata toml, string calldata key) external pure returns (bytes32);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes32[]`.\n    function parseTomlBytes32Array(string calldata toml, string calldata key)\n        external\n        pure\n        returns (bytes32[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes[]`.\n    function parseTomlBytesArray(string calldata toml, string calldata key) external pure returns (bytes[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `int256`.\n    function parseTomlInt(string calldata toml, string calldata key) external pure returns (int256);\n\n    /// Parses a string of TOML data at `key` and coerces it to `int256[]`.\n    function parseTomlIntArray(string calldata toml, string calldata key) external pure returns (int256[] memory);\n\n    /// Returns an array of all the keys in a TOML table.\n    function parseTomlKeys(string calldata toml, string calldata key) external pure returns (string[] memory keys);\n\n    /// Parses a string of TOML data at `key` and coerces it to `string`.\n    function parseTomlString(string calldata toml, string calldata key) external pure returns (string memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `string[]`.\n    function parseTomlStringArray(string calldata toml, string calldata key) external pure returns (string[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `uint256`.\n    function parseTomlUint(string calldata toml, string calldata key) external pure returns (uint256);\n\n    /// Parses a string of TOML data at `key` and coerces it to `uint256[]`.\n    function parseTomlUintArray(string calldata toml, string calldata key) external pure returns (uint256[] memory);\n\n    /// ABI-encodes a TOML table.\n    function parseToml(string calldata toml) external pure returns (bytes memory abiEncodedData);\n\n    /// ABI-encodes a TOML table at `key`.\n    function parseToml(string calldata toml, string calldata key) external pure returns (bytes memory abiEncodedData);\n\n    /// Takes serialized JSON, converts to TOML and write a serialized TOML to a file.\n    function writeToml(string calldata json, string calldata path) external;\n\n    /// Takes serialized JSON, converts to TOML and write a serialized TOML table to an **existing** TOML file, replacing a value with key = <value_key.>\n    /// This is useful to replace a specific value of a TOML file, without having to parse the entire thing.\n    function writeToml(string calldata json, string calldata path, string calldata valueKey) external;\n\n    // ======== Utilities ========\n\n    /// Compute the address of a contract created with CREATE2 using the given CREATE2 deployer.\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash, address deployer)\n        external\n        pure\n        returns (address);\n\n    /// Compute the address of a contract created with CREATE2 using the default CREATE2 deployer.\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) external pure returns (address);\n\n    /// Compute the address a contract will be deployed at for a given deployer address and nonce.\n    function computeCreateAddress(address deployer, uint256 nonce) external pure returns (address);\n\n    /// Derives a private key from the name, labels the account with that name, and returns the wallet.\n    function createWallet(string calldata walletLabel) external returns (Wallet memory wallet);\n\n    /// Generates a wallet from the private key and returns the wallet.\n    function createWallet(uint256 privateKey) external returns (Wallet memory wallet);\n\n    /// Generates a wallet from the private key, labels the account with that name, and returns the wallet.\n    function createWallet(uint256 privateKey, string calldata walletLabel) external returns (Wallet memory wallet);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path)\n    /// at the derivation path `m/44'/60'/0'/0/{index}`.\n    function deriveKey(string calldata mnemonic, uint32 index) external pure returns (uint256 privateKey);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path)\n    /// at `{derivationPath}{index}`.\n    function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index)\n        external\n        pure\n        returns (uint256 privateKey);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language\n    /// at the derivation path `m/44'/60'/0'/0/{index}`.\n    function deriveKey(string calldata mnemonic, uint32 index, string calldata language)\n        external\n        pure\n        returns (uint256 privateKey);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language\n    /// at `{derivationPath}{index}`.\n    function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index, string calldata language)\n        external\n        pure\n        returns (uint256 privateKey);\n\n    /// Gets the label for the specified address.\n    function getLabel(address account) external view returns (string memory currentLabel);\n\n    /// Get a `Wallet`'s nonce.\n    function getNonce(Wallet calldata wallet) external returns (uint64 nonce);\n\n    /// Labels an address in call traces.\n    function label(address account, string calldata newLabel) external;\n\n    /// Adds a private key to the local forge wallet and returns the address.\n    function rememberKey(uint256 privateKey) external returns (address keyAddr);\n\n    /// Signs data with a `Wallet`.\n    function sign(Wallet calldata wallet, bytes32 digest) external returns (uint8 v, bytes32 r, bytes32 s);\n\n    /// Encodes a `bytes` value to a base64url string.\n    function toBase64URL(bytes calldata data) external pure returns (string memory);\n\n    /// Encodes a `string` value to a base64url string.\n    function toBase64URL(string calldata data) external pure returns (string memory);\n\n    /// Encodes a `bytes` value to a base64 string.\n    function toBase64(bytes calldata data) external pure returns (string memory);\n\n    /// Encodes a `string` value to a base64 string.\n    function toBase64(string calldata data) external pure returns (string memory);\n}\n\n/// The `Vm` interface does allow manipulation of the EVM state. These are all intended to be used\n/// in tests, but it is not recommended to use these cheats in scripts.\ninterface Vm is VmSafe {\n    // ======== EVM ========\n\n    /// Returns the identifier of the currently active fork. Reverts if no fork is currently active.\n    function activeFork() external view returns (uint256 forkId);\n\n    /// In forking mode, explicitly grant the given address cheatcode access.\n    function allowCheatcodes(address account) external;\n\n    /// Sets `block.chainid`.\n    function chainId(uint256 newChainId) external;\n\n    /// Clears all mocked calls.\n    function clearMockedCalls() external;\n\n    /// Sets `block.coinbase`.\n    function coinbase(address newCoinbase) external;\n\n    /// Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork.\n    function createFork(string calldata urlOrAlias) external returns (uint256 forkId);\n\n    /// Creates a new fork with the given endpoint and block and returns the identifier of the fork.\n    function createFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\n\n    /// Creates a new fork with the given endpoint and at the block the given transaction was mined in,\n    /// replays all transaction mined in the block before the transaction, and returns the identifier of the fork.\n    function createFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\n\n    /// Creates and also selects a new fork with the given endpoint and the latest block and returns the identifier of the fork.\n    function createSelectFork(string calldata urlOrAlias) external returns (uint256 forkId);\n\n    /// Creates and also selects a new fork with the given endpoint and block and returns the identifier of the fork.\n    function createSelectFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\n\n    /// Creates and also selects new fork with the given endpoint and at the block the given transaction was mined in,\n    /// replays all transaction mined in the block before the transaction, returns the identifier of the fork.\n    function createSelectFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\n\n    /// Sets an address' balance.\n    function deal(address account, uint256 newBalance) external;\n\n    /// Removes the snapshot with the given ID created by `snapshot`.\n    /// Takes the snapshot ID to delete.\n    /// Returns `true` if the snapshot was successfully deleted.\n    /// Returns `false` if the snapshot does not exist.\n    function deleteSnapshot(uint256 snapshotId) external returns (bool success);\n\n    /// Removes _all_ snapshots previously created by `snapshot`.\n    function deleteSnapshots() external;\n\n    /// Sets `block.difficulty`.\n    /// Not available on EVM versions from Paris onwards. Use `prevrandao` instead.\n    /// Reverts if used on unsupported EVM versions.\n    function difficulty(uint256 newDifficulty) external;\n\n    /// Dump a genesis JSON file's `allocs` to disk.\n    function dumpState(string calldata pathToStateJson) external;\n\n    /// Sets an address' code.\n    function etch(address target, bytes calldata newRuntimeBytecode) external;\n\n    /// Sets `block.basefee`.\n    function fee(uint256 newBasefee) external;\n\n    /// Returns true if the account is marked as persistent.\n    function isPersistent(address account) external view returns (bool persistent);\n\n    /// Load a genesis JSON file's `allocs` into the in-memory revm state.\n    function loadAllocs(string calldata pathToAllocsJson) external;\n\n    /// Marks that the account(s) should use persistent storage across fork swaps in a multifork setup\n    /// Meaning, changes made to the state of this account will be kept when switching forks.\n    function makePersistent(address account) external;\n\n    /// See `makePersistent(address)`.\n    function makePersistent(address account0, address account1) external;\n\n    /// See `makePersistent(address)`.\n    function makePersistent(address account0, address account1, address account2) external;\n\n    /// See `makePersistent(address)`.\n    function makePersistent(address[] calldata accounts) external;\n\n    /// Reverts a call to an address with specified revert data.\n    function mockCallRevert(address callee, bytes calldata data, bytes calldata revertData) external;\n\n    /// Reverts a call to an address with a specific `msg.value`, with specified revert data.\n    function mockCallRevert(address callee, uint256 msgValue, bytes calldata data, bytes calldata revertData)\n        external;\n\n    /// Mocks a call to an address, returning specified data.\n    /// Calldata can either be strict or a partial match, e.g. if you only\n    /// pass a Solidity selector to the expected calldata, then the entire Solidity\n    /// function will be mocked.\n    function mockCall(address callee, bytes calldata data, bytes calldata returnData) external;\n\n    /// Mocks a call to an address with a specific `msg.value`, returning specified data.\n    /// Calldata match takes precedence over `msg.value` in case of ambiguity.\n    function mockCall(address callee, uint256 msgValue, bytes calldata data, bytes calldata returnData) external;\n\n    /// Sets the *next* call's `msg.sender` to be the input address.\n    function prank(address msgSender) external;\n\n    /// Sets the *next* call's `msg.sender` to be the input address, and the `tx.origin` to be the second input.\n    function prank(address msgSender, address txOrigin) external;\n\n    /// Sets `block.prevrandao`.\n    /// Not available on EVM versions before Paris. Use `difficulty` instead.\n    /// If used on unsupported EVM versions it will revert.\n    function prevrandao(bytes32 newPrevrandao) external;\n\n    /// Reads the current `msg.sender` and `tx.origin` from state and reports if there is any active caller modification.\n    function readCallers() external returns (CallerMode callerMode, address msgSender, address txOrigin);\n\n    /// Resets the nonce of an account to 0 for EOAs and 1 for contract accounts.\n    function resetNonce(address account) external;\n\n    /// Revert the state of the EVM to a previous snapshot\n    /// Takes the snapshot ID to revert to.\n    /// Returns `true` if the snapshot was successfully reverted.\n    /// Returns `false` if the snapshot does not exist.\n    /// **Note:** This does not automatically delete the snapshot. To delete the snapshot use `deleteSnapshot`.\n    function revertTo(uint256 snapshotId) external returns (bool success);\n\n    /// Revert the state of the EVM to a previous snapshot and automatically deletes the snapshots\n    /// Takes the snapshot ID to revert to.\n    /// Returns `true` if the snapshot was successfully reverted and deleted.\n    /// Returns `false` if the snapshot does not exist.\n    function revertToAndDelete(uint256 snapshotId) external returns (bool success);\n\n    /// Revokes persistent status from the address, previously added via `makePersistent`.\n    function revokePersistent(address account) external;\n\n    /// See `revokePersistent(address)`.\n    function revokePersistent(address[] calldata accounts) external;\n\n    /// Sets `block.height`.\n    function roll(uint256 newHeight) external;\n\n    /// Updates the currently active fork to given block number\n    /// This is similar to `roll` but for the currently active fork.\n    function rollFork(uint256 blockNumber) external;\n\n    /// Updates the currently active fork to given transaction. This will `rollFork` with the number\n    /// of the block the transaction was mined in and replays all transaction mined before it in the block.\n    function rollFork(bytes32 txHash) external;\n\n    /// Updates the given fork to given block number.\n    function rollFork(uint256 forkId, uint256 blockNumber) external;\n\n    /// Updates the given fork to block number of the given transaction and replays all transaction mined before it in the block.\n    function rollFork(uint256 forkId, bytes32 txHash) external;\n\n    /// Takes a fork identifier created by `createFork` and sets the corresponding forked state as active.\n    function selectFork(uint256 forkId) external;\n\n    /// Sets the nonce of an account. Must be higher than the current nonce of the account.\n    function setNonce(address account, uint64 newNonce) external;\n\n    /// Sets the nonce of an account to an arbitrary value.\n    function setNonceUnsafe(address account, uint64 newNonce) external;\n\n    /// Snapshot the current state of the evm.\n    /// Returns the ID of the snapshot that was created.\n    /// To revert a snapshot use `revertTo`.\n    function snapshot() external returns (uint256 snapshotId);\n\n    /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called.\n    function startPrank(address msgSender) external;\n\n    /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called, and the `tx.origin` to be the second input.\n    function startPrank(address msgSender, address txOrigin) external;\n\n    /// Resets subsequent calls' `msg.sender` to be `address(this)`.\n    function stopPrank() external;\n\n    /// Stores a value to an address' storage slot.\n    function store(address target, bytes32 slot, bytes32 value) external;\n\n    /// Fetches the given transaction from the active fork and executes it on the current state.\n    function transact(bytes32 txHash) external;\n\n    /// Fetches the given transaction from the given fork and executes it on the current state.\n    function transact(uint256 forkId, bytes32 txHash) external;\n\n    /// Sets `tx.gasprice`.\n    function txGasPrice(uint256 newGasPrice) external;\n\n    /// Sets `block.timestamp`.\n    function warp(uint256 newTimestamp) external;\n\n    // ======== Testing ========\n\n    /// Expect a call to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data) external;\n\n    /// Expect given number of calls to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data, uint64 count)\n        external;\n\n    /// Expects a call to an address with the specified calldata.\n    /// Calldata can either be a strict or a partial match.\n    function expectCall(address callee, bytes calldata data) external;\n\n    /// Expects given number of calls to an address with the specified calldata.\n    function expectCall(address callee, bytes calldata data, uint64 count) external;\n\n    /// Expects a call to an address with the specified `msg.value` and calldata.\n    function expectCall(address callee, uint256 msgValue, bytes calldata data) external;\n\n    /// Expects given number of calls to an address with the specified `msg.value` and calldata.\n    function expectCall(address callee, uint256 msgValue, bytes calldata data, uint64 count) external;\n\n    /// Expect a call to an address with the specified `msg.value`, gas, and calldata.\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data) external;\n\n    /// Expects given number of calls to an address with the specified `msg.value`, gas, and calldata.\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data, uint64 count) external;\n\n    /// Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData.).\n    /// Call this function, then emit an event, then call a function. Internally after the call, we check if\n    /// logs were emitted in the expected order with the expected topics and data (as specified by the booleans).\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData) external;\n\n    /// Same as the previous method, but also checks supplied address against emitting contract.\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData, address emitter)\n        external;\n\n    /// Prepare an expected log with all topic and data checks enabled.\n    /// Call this function, then emit an event, then call a function. Internally after the call, we check if\n    /// logs were emitted in the expected order with the expected topics and data.\n    function expectEmit() external;\n\n    /// Same as the previous method, but also checks supplied address against emitting contract.\n    function expectEmit(address emitter) external;\n\n    /// Expects an error on next call with any revert data.\n    function expectRevert() external;\n\n    /// Expects an error on next call that starts with the revert data.\n    function expectRevert(bytes4 revertData) external;\n\n    /// Expects an error on next call that exactly matches the revert data.\n    function expectRevert(bytes calldata revertData) external;\n\n    /// Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the current subcontext. If any other\n    /// memory is written to, the test will fail. Can be called multiple times to add more ranges to the set.\n    function expectSafeMemory(uint64 min, uint64 max) external;\n\n    /// Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the next created subcontext.\n    /// If any other memory is written to, the test will fail. Can be called multiple times to add more ranges\n    /// to the set.\n    function expectSafeMemoryCall(uint64 min, uint64 max) external;\n\n    /// Marks a test as skipped. Must be called at the top of the test.\n    function skip(bool skipTest) external;\n\n    /// Stops all safe memory expectation in the current subcontext.\n    function stopExpectSafeMemory() external;\n}\n"
          },
          "lib/forge-std/src/console.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n    function _sendLogPayload(bytes memory payload) private view {\n        uint256 payloadLength = payload.length;\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            let payloadStart := add(payload, 32)\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n        }\n    }\n\n    function log() internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n    }\n\n    function logUint(uint p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n    }\n\n    function logString(string memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n    }\n\n    function log(string memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n    }\n\n    function log(uint p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n    }\n\n    function log(uint p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n    }\n\n    function log(uint p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}"
          },
          "lib/forge-std/src/console2.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\n/// @dev The original console.sol uses `int` and `uint` for computing function selectors, but it should\n/// use `int256` and `uint256`. This modified version fixes that. This version is recommended\n/// over `console.sol` if you don't need compatibility with Hardhat as the logs will show up in\n/// forge stack traces. If you do need compatibility with Hardhat, you must use `console.sol`.\n/// Reference: https://github.com/NomicFoundation/hardhat/issues/2178\nlibrary console2 {\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n    function _castLogPayloadViewToPure(\n        function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) internal pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castLogPayloadViewToPure(_sendLogPayloadView)(payload);\n    }\n\n    function _sendLogPayloadView(bytes memory payload) private view {\n        uint256 payloadLength = payload.length;\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            let payloadStart := add(payload, 32)\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n        }\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, int256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,int256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}"
          },
          "lib/forge-std/src/interfaces/IERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\ninterface IERC165 {\n    /// @notice Query if a contract implements an interface\n    /// @param interfaceID The interface identifier, as specified in ERC-165\n    /// @dev Interface identification is specified in ERC-165. This function\n    /// uses less than 30,000 gas.\n    /// @return `true` if the contract implements `interfaceID` and\n    /// `interfaceID` is not 0xffffffff, `false` otherwise\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n"
          },
          "lib/forge-std/src/interfaces/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\n/// @dev Interface of the ERC20 standard as defined in the EIP.\n/// @dev This includes the optional name, symbol, and decimals metadata.\ninterface IERC20 {\n    /// @dev Emitted when `value` tokens are moved from one account (`from`) to another (`to`).\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @dev Emitted when the allowance of a `spender` for an `owner` is set, where `value`\n    /// is the new allowance.\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice Returns the amount of tokens in existence.\n    function totalSupply() external view returns (uint256);\n\n    /// @notice Returns the amount of tokens owned by `account`.\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Moves `amount` tokens from the caller's account to `to`.\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /// @notice Returns the remaining number of tokens that `spender` is allowed\n    /// to spend on behalf of `owner`\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Sets `amount` as the allowance of `spender` over the caller's tokens.\n    /// @dev Be aware of front-running risks: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Moves `amount` tokens from `from` to `to` using the allowance mechanism.\n    /// `amount` is then deducted from the caller's allowance.\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n\n    /// @notice Returns the name of the token.\n    function name() external view returns (string memory);\n\n    /// @notice Returns the symbol of the token.\n    function symbol() external view returns (string memory);\n\n    /// @notice Returns the decimals places of the token.\n    function decimals() external view returns (uint8);\n}\n"
          },
          "lib/forge-std/src/interfaces/IERC721.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\nimport \"./IERC165.sol\";\n\n/// @title ERC-721 Non-Fungible Token Standard\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// Note: the ERC-165 identifier for this interface is 0x80ac58cd.\ninterface IERC721 is IERC165 {\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\n    /// This event emits when NFTs are created (`from` == 0) and destroyed\n    /// (`to` == 0). Exception: during contract creation, any number of NFTs\n    /// may be created and assigned without emitting Transfer. At the time of\n    /// any transfer, the approved address for that NFT (if any) is reset to none.\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    /// @dev This emits when the approved address for an NFT is changed or\n    /// reaffirmed. The zero address indicates there is no approved address.\n    /// When a Transfer event emits, this also indicates that the approved\n    /// address for that NFT (if any) is reset to none.\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    /// The operator can manage all NFTs of the owner.\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /// @notice Count all NFTs assigned to an owner\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\n    /// function throws for queries about the zero address.\n    /// @param _owner An address for whom to query the balance\n    /// @return The number of NFTs owned by `_owner`, possibly zero\n    function balanceOf(address _owner) external view returns (uint256);\n\n    /// @notice Find the owner of an NFT\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\n    /// about them do throw.\n    /// @param _tokenId The identifier for an NFT\n    /// @return The address of the owner of the NFT\n    function ownerOf(uint256 _tokenId) external view returns (address);\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    /// operator, or the approved address for this NFT. Throws if `_from` is\n    /// not the current owner. Throws if `_to` is the zero address. Throws if\n    /// `_tokenId` is not a valid NFT. When transfer is complete, this function\n    /// checks if `_to` is a smart contract (code size > 0). If so, it calls\n    /// `onERC721Received` on `_to` and throws if the return value is not\n    /// `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    /// @param data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev This works identically to the other function with an extra data parameter,\n    /// except this function just sets data to \"\".\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n    /// TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n    /// THEY MAY BE PERMANENTLY LOST\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    /// operator, or the approved address for this NFT. Throws if `_from` is\n    /// not the current owner. Throws if `_to` is the zero address. Throws if\n    /// `_tokenId` is not a valid NFT.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /// @notice Change or reaffirm the approved address for an NFT\n    /// @dev The zero address indicates there is no approved address.\n    /// Throws unless `msg.sender` is the current NFT owner, or an authorized\n    /// operator of the current owner.\n    /// @param _approved The new approved NFT controller\n    /// @param _tokenId The NFT to approve\n    function approve(address _approved, uint256 _tokenId) external payable;\n\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\n    /// all of `msg.sender`'s assets\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\n    /// multiple operators per owner.\n    /// @param _operator Address to add to the set of authorized operators\n    /// @param _approved True if the operator is approved, false to revoke approval\n    function setApprovalForAll(address _operator, bool _approved) external;\n\n    /// @notice Get the approved address for a single NFT\n    /// @dev Throws if `_tokenId` is not a valid NFT.\n    /// @param _tokenId The NFT to find the approved address for\n    /// @return The approved address for this NFT, or the zero address if there is none\n    function getApproved(uint256 _tokenId) external view returns (address);\n\n    /// @notice Query if an address is an authorized operator for another address\n    /// @param _owner The address that owns the NFTs\n    /// @param _operator The address that acts on behalf of the owner\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\ninterface IERC721TokenReceiver {\n    /// @notice Handle the receipt of an NFT\n    /// @dev The ERC721 smart contract calls this function on the recipient\n    /// after a `transfer`. This function MAY throw to revert and reject the\n    /// transfer. Return of other than the magic value MUST result in the\n    /// transaction being reverted.\n    /// Note: the contract address is always the message sender.\n    /// @param _operator The address which called `safeTransferFrom` function\n    /// @param _from The address which previously owned the token\n    /// @param _tokenId The NFT identifier which is being transferred\n    /// @param _data Additional data with no specified format\n    /// @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    ///  unless throwing\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data)\n        external\n        returns (bytes4);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// Note: the ERC-165 identifier for this interface is 0x5b5e139f.\ninterface IERC721Metadata is IERC721 {\n    /// @notice A descriptive name for a collection of NFTs in this contract\n    function name() external view returns (string memory _name);\n\n    /// @notice An abbreviated name for NFTs in this contract\n    function symbol() external view returns (string memory _symbol);\n\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n    /// 3986. The URI may point to a JSON file that conforms to the \"ERC721\n    /// Metadata JSON Schema\".\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// Note: the ERC-165 identifier for this interface is 0x780e9d63.\ninterface IERC721Enumerable is IERC721 {\n    /// @notice Count NFTs tracked by this contract\n    /// @return A count of valid NFTs tracked by this contract, where each one of\n    /// them has an assigned and queryable owner not equal to the zero address\n    function totalSupply() external view returns (uint256);\n\n    /// @notice Enumerate valid NFTs\n    /// @dev Throws if `_index` >= `totalSupply()`.\n    /// @param _index A counter less than `totalSupply()`\n    /// @return The token identifier for the `_index`th NFT,\n    /// (sort order not specified)\n    function tokenByIndex(uint256 _index) external view returns (uint256);\n\n    /// @notice Enumerate NFTs assigned to an owner\n    /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\n    /// `_owner` is the zero address, representing invalid NFTs.\n    /// @param _owner An address where we are interested in NFTs owned by them\n    /// @param _index A counter less than `balanceOf(_owner)`\n    /// @return The token identifier for the `_index`th NFT assigned to `_owner`,\n    /// (sort order not specified)\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\n}\n"
          },
          "lib/forge-std/src/interfaces/IMulticall3.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\ninterface IMulticall3 {\n    struct Call {\n        address target;\n        bytes callData;\n    }\n\n    struct Call3 {\n        address target;\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Call3Value {\n        address target;\n        bool allowFailure;\n        uint256 value;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    function aggregate(Call[] calldata calls)\n        external\n        payable\n        returns (uint256 blockNumber, bytes[] memory returnData);\n\n    function aggregate3(Call3[] calldata calls) external payable returns (Result[] memory returnData);\n\n    function aggregate3Value(Call3Value[] calldata calls) external payable returns (Result[] memory returnData);\n\n    function blockAndAggregate(Call[] calldata calls)\n        external\n        payable\n        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);\n\n    function getBasefee() external view returns (uint256 basefee);\n\n    function getBlockHash(uint256 blockNumber) external view returns (bytes32 blockHash);\n\n    function getBlockNumber() external view returns (uint256 blockNumber);\n\n    function getChainId() external view returns (uint256 chainid);\n\n    function getCurrentBlockCoinbase() external view returns (address coinbase);\n\n    function getCurrentBlockDifficulty() external view returns (uint256 difficulty);\n\n    function getCurrentBlockGasLimit() external view returns (uint256 gaslimit);\n\n    function getCurrentBlockTimestamp() external view returns (uint256 timestamp);\n\n    function getEthBalance(address addr) external view returns (uint256 balance);\n\n    function getLastBlockHash() external view returns (bytes32 blockHash);\n\n    function tryAggregate(bool requireSuccess, Call[] calldata calls)\n        external\n        payable\n        returns (Result[] memory returnData);\n\n    function tryBlockAndAggregate(bool requireSuccess, Call[] calldata calls)\n        external\n        payable\n        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);\n}\n"
          },
          "lib/forge-std/src/mocks/MockERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {IERC20} from \"../interfaces/IERC20.sol\";\n\n/// @notice This is a mock contract of the ERC20 standard for testing purposes only, it SHOULD NOT be used in production.\n/// @dev Forked from: https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC20.sol\ncontract MockERC20 is IERC20 {\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string internal _name;\n\n    string internal _symbol;\n\n    uint8 internal _decimals;\n\n    function name() external view override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external view override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() external view override returns (uint8) {\n        return _decimals;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal _totalSupply;\n\n    mapping(address => uint256) internal _balanceOf;\n\n    mapping(address => mapping(address => uint256)) internal _allowance;\n\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) external view override returns (uint256) {\n        return _balanceOf[owner];\n    }\n\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal INITIAL_CHAIN_ID;\n\n    bytes32 internal INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               INITIALIZE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev A bool to track whether the contract has been initialized.\n    bool private initialized;\n\n    /// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and\n    /// syntaxes, we add an initialization function that can be called only once.\n    function initialize(string memory name_, string memory symbol_, uint8 decimals_) public {\n        require(!initialized, \"ALREADY_INITIALIZED\");\n\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n\n        INITIAL_CHAIN_ID = _pureChainId();\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n\n        initialized = true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        _balanceOf[msg.sender] = _sub(_balanceOf[msg.sender], amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        uint256 allowed = _allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != ~uint256(0)) _allowance[from][msg.sender] = _sub(allowed, amount);\n\n        _balanceOf[from] = _sub(_balanceOf[from], amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\n        public\n        virtual\n    {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        address recoveredAddress = ecrecover(\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(\n                        abi.encode(\n                            keccak256(\n                                \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                            ),\n                            owner,\n                            spender,\n                            value,\n                            nonces[owner]++,\n                            deadline\n                        )\n                    )\n                )\n            ),\n            v,\n            r,\n            s\n        );\n\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n        _allowance[recoveredAddress][spender] = value;\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return _pureChainId() == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(_name)),\n                keccak256(\"1\"),\n                _pureChainId(),\n                address(this)\n            )\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        _totalSupply = _add(_totalSupply, amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        _balanceOf[from] = _sub(_balanceOf[from], amount);\n        _totalSupply = _sub(_totalSupply, amount);\n\n        emit Transfer(from, address(0), amount);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MATH LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"ERC20: addition overflow\");\n        return c;\n    }\n\n    function _sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(a >= b, \"ERC20: subtraction underflow\");\n        return a - b;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    // We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no\n    // compiler warnings when accessing chain ID in any solidity version supported by forge-std. We\n    // can't simply access the chain ID in a normal view or pure function because the solc View Pure\n    // Checker changed `chainid` from pure to view in 0.8.0.\n    function _viewChainId() private view returns (uint256 chainId) {\n        // Assembly required since `block.chainid` was introduced in 0.8.0.\n        assembly {\n            chainId := chainid()\n        }\n\n        address(this); // Silence warnings in older Solc versions.\n    }\n\n    function _pureChainId() private pure returns (uint256 chainId) {\n        function() internal view returns (uint256) fnIn = _viewChainId;\n        function() internal pure returns (uint256) pureChainId;\n        assembly {\n            pureChainId := fnIn\n        }\n        chainId = pureChainId();\n    }\n}\n"
          },
          "lib/forge-std/src/mocks/MockERC721.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {IERC721Metadata} from \"../interfaces/IERC721.sol\";\n\n/// @notice This is a mock contract of the ERC721 standard for testing purposes only, it SHOULD NOT be used in production.\n/// @dev Forked from: https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC721.sol\ncontract MockERC721 is IERC721Metadata {\n    /*//////////////////////////////////////////////////////////////\n                         METADATA STORAGE/LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    string internal _name;\n\n    string internal _symbol;\n\n    function name() external view override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external view override returns (string memory) {\n        return _symbol;\n    }\n\n    function tokenURI(uint256 id) public view virtual override returns (string memory) {}\n\n    /*//////////////////////////////////////////////////////////////\n                      ERC721 BALANCE/OWNER STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) internal _ownerOf;\n\n    mapping(address => uint256) internal _balanceOf;\n\n    function ownerOf(uint256 id) public view virtual override returns (address owner) {\n        require((owner = _ownerOf[id]) != address(0), \"NOT_MINTED\");\n    }\n\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ZERO_ADDRESS\");\n\n        return _balanceOf[owner];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                         ERC721 APPROVAL STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) internal _getApproved;\n\n    mapping(address => mapping(address => bool)) internal _isApprovedForAll;\n\n    function getApproved(uint256 id) public view virtual override returns (address) {\n        return _getApproved[id];\n    }\n\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _isApprovedForAll[owner][operator];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               INITIALIZE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev A bool to track whether the contract has been initialized.\n    bool private initialized;\n\n    /// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and\n    /// syntaxes, we add an initialization function that can be called only once.\n    function initialize(string memory name_, string memory symbol_) public {\n        require(!initialized, \"ALREADY_INITIALIZED\");\n\n        _name = name_;\n        _symbol = symbol_;\n\n        initialized = true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC721 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 id) public payable virtual override {\n        address owner = _ownerOf[id];\n\n        require(msg.sender == owner || _isApprovedForAll[owner][msg.sender], \"NOT_AUTHORIZED\");\n\n        _getApproved[id] = spender;\n\n        emit Approval(owner, spender, id);\n    }\n\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function transferFrom(address from, address to, uint256 id) public payable virtual override {\n        require(from == _ownerOf[id], \"WRONG_FROM\");\n\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(\n            msg.sender == from || _isApprovedForAll[from][msg.sender] || msg.sender == _getApproved[id],\n            \"NOT_AUTHORIZED\"\n        );\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        _balanceOf[from]--;\n\n        _balanceOf[to]++;\n\n        _ownerOf[id] = to;\n\n        delete _getApproved[id];\n\n        emit Transfer(from, to, id);\n    }\n\n    function safeTransferFrom(address from, address to, uint256 id) public payable virtual override {\n        transferFrom(from, to, id);\n\n        require(\n            !_isContract(to)\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\")\n                    == IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function safeTransferFrom(address from, address to, uint256 id, bytes memory data)\n        public\n        payable\n        virtual\n        override\n    {\n        transferFrom(from, to, id);\n\n        require(\n            !_isContract(to)\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)\n                    == IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC165 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 id) internal virtual {\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(_ownerOf[id] == address(0), \"ALREADY_MINTED\");\n\n        // Counter overflow is incredibly unrealistic.\n\n        _balanceOf[to]++;\n\n        _ownerOf[id] = to;\n\n        emit Transfer(address(0), to, id);\n    }\n\n    function _burn(uint256 id) internal virtual {\n        address owner = _ownerOf[id];\n\n        require(owner != address(0), \"NOT_MINTED\");\n\n        _balanceOf[owner]--;\n\n        delete _ownerOf[id];\n\n        delete _getApproved[id];\n\n        emit Transfer(owner, address(0), id);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MINT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _safeMint(address to, uint256 id) internal virtual {\n        _mint(to, id);\n\n        require(\n            !_isContract(to)\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \"\")\n                    == IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function _safeMint(address to, uint256 id, bytes memory data) internal virtual {\n        _mint(to, id);\n\n        require(\n            !_isContract(to)\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data)\n                    == IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function _isContract(address _addr) private view returns (bool) {\n        uint256 codeLength;\n\n        // Assembly required for versions < 0.8.0 to check extcodesize.\n        assembly {\n            codeLength := extcodesize(_addr)\n        }\n\n        return codeLength > 0;\n    }\n}\n\ninterface IERC721TokenReceiver {\n    function onERC721Received(address, address, uint256, bytes calldata) external returns (bytes4);\n}\n"
          },
          "lib/forge-std/src/safeconsole.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\n/// @author philogy <https://github.com/philogy>\n/// @dev Code generated automatically by script.\nlibrary safeconsole {\n    uint256 constant CONSOLE_ADDR = 0x000000000000000000000000000000000000000000636F6e736F6c652e6c6f67;\n\n    // Credit to [0age](https://twitter.com/z0age/status/1654922202930888704) and [0xdapper](https://github.com/foundry-rs/forge-std/pull/374)\n    // for the view-to-pure log trick.\n    function _sendLogPayload(uint256 offset, uint256 size) private pure {\n        function(uint256, uint256) internal view fnIn = _sendLogPayloadView;\n        function(uint256, uint256) internal pure pureSendLogPayload;\n        assembly {\n            pureSendLogPayload := fnIn\n        }\n        pureSendLogPayload(offset, size);\n    }\n\n    function _sendLogPayloadView(uint256 offset, uint256 size) private view {\n        assembly {\n            pop(staticcall(gas(), CONSOLE_ADDR, offset, size, 0x0, 0x0))\n        }\n    }\n\n    function _memcopy(uint256 fromOffset, uint256 toOffset, uint256 length) private pure {\n        function(uint256, uint256, uint256) internal view fnIn = _memcopyView;\n        function(uint256, uint256, uint256) internal pure pureMemcopy;\n        assembly {\n            pureMemcopy := fnIn\n        }\n        pureMemcopy(fromOffset, toOffset, length);\n    }\n\n    function _memcopyView(uint256 fromOffset, uint256 toOffset, uint256 length) private view {\n        assembly {\n            pop(staticcall(gas(), 0x4, fromOffset, length, toOffset, length))\n        }\n    }\n\n    function logMemory(uint256 offset, uint256 length) internal pure {\n        if (offset >= 0x60) {\n            // Sufficient memory before slice to prepare call header.\n            bytes32 m0;\n            bytes32 m1;\n            bytes32 m2;\n            assembly {\n                m0 := mload(sub(offset, 0x60))\n                m1 := mload(sub(offset, 0x40))\n                m2 := mload(sub(offset, 0x20))\n                // Selector of `logBytes(bytes)`.\n                mstore(sub(offset, 0x60), 0xe17bf956)\n                mstore(sub(offset, 0x40), 0x20)\n                mstore(sub(offset, 0x20), length)\n            }\n            _sendLogPayload(offset - 0x44, length + 0x44);\n            assembly {\n                mstore(sub(offset, 0x60), m0)\n                mstore(sub(offset, 0x40), m1)\n                mstore(sub(offset, 0x20), m2)\n            }\n        } else {\n            // Insufficient space, so copy slice forward, add header and reverse.\n            bytes32 m0;\n            bytes32 m1;\n            bytes32 m2;\n            uint256 endOffset = offset + length;\n            assembly {\n                m0 := mload(add(endOffset, 0x00))\n                m1 := mload(add(endOffset, 0x20))\n                m2 := mload(add(endOffset, 0x40))\n            }\n            _memcopy(offset, offset + 0x60, length);\n            assembly {\n                // Selector of `logBytes(bytes)`.\n                mstore(add(offset, 0x00), 0xe17bf956)\n                mstore(add(offset, 0x20), 0x20)\n                mstore(add(offset, 0x40), length)\n            }\n            _sendLogPayload(offset + 0x1c, length + 0x44);\n            _memcopy(offset + 0x60, offset, length);\n            assembly {\n                mstore(add(endOffset, 0x00), m0)\n                mstore(add(endOffset, 0x20), m1)\n                mstore(add(endOffset, 0x40), m2)\n            }\n        }\n    }\n\n    function log(address p0) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            // Selector of `log(address)`.\n            mstore(0x00, 0x2c2ecbc2)\n            mstore(0x20, p0)\n        }\n        _sendLogPayload(0x1c, 0x24);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n        }\n    }\n\n    function log(bool p0) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            // Selector of `log(bool)`.\n            mstore(0x00, 0x32458eed)\n            mstore(0x20, p0)\n        }\n        _sendLogPayload(0x1c, 0x24);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n        }\n    }\n\n    function log(uint256 p0) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            // Selector of `log(uint256)`.\n            mstore(0x00, 0xf82c50f1)\n            mstore(0x20, p0)\n        }\n        _sendLogPayload(0x1c, 0x24);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n        }\n    }\n\n    function log(bytes32 p0) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(string)`.\n            mstore(0x00, 0x41304fac)\n            mstore(0x20, 0x20)\n            writeString(0x40, p0)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, address p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(address,address)`.\n            mstore(0x00, 0xdaf0d4aa)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(address p0, bool p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(address,bool)`.\n            mstore(0x00, 0x75b605d3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(address,uint256)`.\n            mstore(0x00, 0x8309e8a8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(address p0, bytes32 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,string)`.\n            mstore(0x00, 0x759f86bb)\n            mstore(0x20, p0)\n            mstore(0x40, 0x40)\n            writeString(0x60, p1)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(bool,address)`.\n            mstore(0x00, 0x853c4849)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(bool,bool)`.\n            mstore(0x00, 0x2a110e83)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(bool,uint256)`.\n            mstore(0x00, 0x399174d3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(bool p0, bytes32 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,string)`.\n            mstore(0x00, 0x8feac525)\n            mstore(0x20, p0)\n            mstore(0x40, 0x40)\n            writeString(0x60, p1)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(uint256,address)`.\n            mstore(0x00, 0x69276c86)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(uint256,bool)`.\n            mstore(0x00, 0x1c9d7eb3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(uint256,uint256)`.\n            mstore(0x00, 0xf666715a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,string)`.\n            mstore(0x00, 0x643fd0df)\n            mstore(0x20, p0)\n            mstore(0x40, 0x40)\n            writeString(0x60, p1)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bytes32 p0, address p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(string,address)`.\n            mstore(0x00, 0x319af333)\n            mstore(0x20, 0x40)\n            mstore(0x40, p1)\n            writeString(0x60, p0)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bytes32 p0, bool p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(string,bool)`.\n            mstore(0x00, 0xc3b55635)\n            mstore(0x20, 0x40)\n            mstore(0x40, p1)\n            writeString(0x60, p0)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(string,uint256)`.\n            mstore(0x00, 0xb60e72cc)\n            mstore(0x20, 0x40)\n            mstore(0x40, p1)\n            writeString(0x60, p0)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,string)`.\n            mstore(0x00, 0x4b5c4277)\n            mstore(0x20, 0x40)\n            mstore(0x40, 0x80)\n            writeString(0x60, p0)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,address,address)`.\n            mstore(0x00, 0x018c84c2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,address,bool)`.\n            mstore(0x00, 0xf2a66286)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,address,uint256)`.\n            mstore(0x00, 0x17fe6185)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,address,string)`.\n            mstore(0x00, 0x007150be)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,bool,address)`.\n            mstore(0x00, 0xf11699ed)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,bool,bool)`.\n            mstore(0x00, 0xeb830c92)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,bool,uint256)`.\n            mstore(0x00, 0x9c4f99fb)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,bool,string)`.\n            mstore(0x00, 0x212255cc)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,uint256,address)`.\n            mstore(0x00, 0x7bc0d848)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,uint256,bool)`.\n            mstore(0x00, 0x678209a8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,uint256,uint256)`.\n            mstore(0x00, 0xb69bcaf6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,uint256,string)`.\n            mstore(0x00, 0xa1f2e8aa)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,string,address)`.\n            mstore(0x00, 0xf08744e8)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,string,bool)`.\n            mstore(0x00, 0xcf020fb1)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,string,uint256)`.\n            mstore(0x00, 0x67dd6ff1)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(address,string,string)`.\n            mstore(0x00, 0xfb772265)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p1)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,address,address)`.\n            mstore(0x00, 0xd2763667)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,address,bool)`.\n            mstore(0x00, 0x18c9c746)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,address,uint256)`.\n            mstore(0x00, 0x5f7b9afb)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,address,string)`.\n            mstore(0x00, 0xde9a9270)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,bool,address)`.\n            mstore(0x00, 0x1078f68d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,bool,bool)`.\n            mstore(0x00, 0x50709698)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,bool,uint256)`.\n            mstore(0x00, 0x12f21602)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,bool,string)`.\n            mstore(0x00, 0x2555fa46)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,uint256,address)`.\n            mstore(0x00, 0x088ef9d2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,uint256,bool)`.\n            mstore(0x00, 0xe8defba9)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,uint256,uint256)`.\n            mstore(0x00, 0x37103367)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,uint256,string)`.\n            mstore(0x00, 0xc3fc3970)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,string,address)`.\n            mstore(0x00, 0x9591b953)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,string,bool)`.\n            mstore(0x00, 0xdbb4c247)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,string,uint256)`.\n            mstore(0x00, 0x1093ee11)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(bool,string,string)`.\n            mstore(0x00, 0xb076847f)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p1)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,address,address)`.\n            mstore(0x00, 0xbcfd9be0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,address,bool)`.\n            mstore(0x00, 0x9b6ec042)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,address,uint256)`.\n            mstore(0x00, 0x5a9b5ed5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,address,string)`.\n            mstore(0x00, 0x63cb41f9)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,bool,address)`.\n            mstore(0x00, 0x35085f7b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,bool,bool)`.\n            mstore(0x00, 0x20718650)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,bool,uint256)`.\n            mstore(0x00, 0x20098014)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,bool,string)`.\n            mstore(0x00, 0x85775021)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,uint256,address)`.\n            mstore(0x00, 0x5c96b331)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,uint256,bool)`.\n            mstore(0x00, 0x4766da72)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,uint256,uint256)`.\n            mstore(0x00, 0xd1ed7a3c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,uint256,string)`.\n            mstore(0x00, 0x71d04af2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,string,address)`.\n            mstore(0x00, 0x7afac959)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,string,bool)`.\n            mstore(0x00, 0x4ceda75a)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,string,uint256)`.\n            mstore(0x00, 0x37aa7d4c)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(uint256,string,string)`.\n            mstore(0x00, 0xb115611f)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p1)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,address,address)`.\n            mstore(0x00, 0xfcec75e0)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,address,bool)`.\n            mstore(0x00, 0xc91d5ed4)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,address,uint256)`.\n            mstore(0x00, 0x0d26b925)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,address,string)`.\n            mstore(0x00, 0xe0e9ad4f)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p0)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,bool,address)`.\n            mstore(0x00, 0x932bbb38)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,bool,bool)`.\n            mstore(0x00, 0x850b7ad6)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,bool,uint256)`.\n            mstore(0x00, 0xc95958d6)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,bool,string)`.\n            mstore(0x00, 0xe298f47d)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p0)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,uint256,address)`.\n            mstore(0x00, 0x1c7ec448)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,uint256,bool)`.\n            mstore(0x00, 0xca7733b1)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,uint256,uint256)`.\n            mstore(0x00, 0xca47c4eb)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,uint256,string)`.\n            mstore(0x00, 0x5970e089)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p0)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,string,address)`.\n            mstore(0x00, 0x95ed0195)\n            mstore(0x20, 0x60)\n            mstore(0x40, 0xa0)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n            writeString(0xc0, p1)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,string,bool)`.\n            mstore(0x00, 0xb0e0f9b5)\n            mstore(0x20, 0x60)\n            mstore(0x40, 0xa0)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n            writeString(0xc0, p1)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,string,uint256)`.\n            mstore(0x00, 0x5821efa1)\n            mstore(0x20, 0x60)\n            mstore(0x40, 0xa0)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n            writeString(0xc0, p1)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            // Selector of `log(string,string,string)`.\n            mstore(0x00, 0x2ced7cef)\n            mstore(0x20, 0x60)\n            mstore(0x40, 0xa0)\n            mstore(0x60, 0xe0)\n            writeString(0x80, p0)\n            writeString(0xc0, p1)\n            writeString(0x100, p2)\n        }\n        _sendLogPayload(0x1c, 0x124);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n        }\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,address,address)`.\n            mstore(0x00, 0x665bf134)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,address,bool)`.\n            mstore(0x00, 0x0e378994)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,address,uint256)`.\n            mstore(0x00, 0x94250d77)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,address,string)`.\n            mstore(0x00, 0xf808da20)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,bool,address)`.\n            mstore(0x00, 0x9f1bc36e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,bool,bool)`.\n            mstore(0x00, 0x2cd4134a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,bool,uint256)`.\n            mstore(0x00, 0x3971e78c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,bool,string)`.\n            mstore(0x00, 0xaa6540c8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,uint256,address)`.\n            mstore(0x00, 0x8da6def5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,uint256,bool)`.\n            mstore(0x00, 0x9b4254e2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,uint256,uint256)`.\n            mstore(0x00, 0xbe553481)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,uint256,string)`.\n            mstore(0x00, 0xfdb4f990)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,string,address)`.\n            mstore(0x00, 0x8f736d16)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,string,bool)`.\n            mstore(0x00, 0x6f1a594e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,string,uint256)`.\n            mstore(0x00, 0xef1cefe7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,address,string,string)`.\n            mstore(0x00, 0x21bdaf25)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,address,address)`.\n            mstore(0x00, 0x660375dd)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,address,bool)`.\n            mstore(0x00, 0xa6f50b0f)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,address,uint256)`.\n            mstore(0x00, 0xa75c59de)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,address,string)`.\n            mstore(0x00, 0x2dd778e6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,bool,address)`.\n            mstore(0x00, 0xcf394485)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,bool,bool)`.\n            mstore(0x00, 0xcac43479)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,bool,uint256)`.\n            mstore(0x00, 0x8c4e5de6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,bool,string)`.\n            mstore(0x00, 0xdfc4a2e8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,uint256,address)`.\n            mstore(0x00, 0xccf790a1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,uint256,bool)`.\n            mstore(0x00, 0xc4643e20)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,uint256,uint256)`.\n            mstore(0x00, 0x386ff5f4)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,uint256,string)`.\n            mstore(0x00, 0x0aa6cfad)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,string,address)`.\n            mstore(0x00, 0x19fd4956)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,string,bool)`.\n            mstore(0x00, 0x50ad461d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,string,uint256)`.\n            mstore(0x00, 0x80e6a20b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,bool,string,string)`.\n            mstore(0x00, 0x475c5c33)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,address,address)`.\n            mstore(0x00, 0x478d1c62)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,address,bool)`.\n            mstore(0x00, 0xa1bcc9b3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,address,uint256)`.\n            mstore(0x00, 0x100f650e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,address,string)`.\n            mstore(0x00, 0x1da986ea)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,bool,address)`.\n            mstore(0x00, 0xa31bfdcc)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,bool,bool)`.\n            mstore(0x00, 0x3bf5e537)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,bool,uint256)`.\n            mstore(0x00, 0x22f6b999)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,bool,string)`.\n            mstore(0x00, 0xc5ad85f9)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,uint256,address)`.\n            mstore(0x00, 0x20e3984d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,uint256,bool)`.\n            mstore(0x00, 0x66f1bc67)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,uint256,uint256)`.\n            mstore(0x00, 0x34f0e636)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,uint256,string)`.\n            mstore(0x00, 0x4a28c017)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,string,address)`.\n            mstore(0x00, 0x5c430d47)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,string,bool)`.\n            mstore(0x00, 0xcf18105c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,string,uint256)`.\n            mstore(0x00, 0xbf01f891)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,uint256,string,string)`.\n            mstore(0x00, 0x88a8c406)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,address,address)`.\n            mstore(0x00, 0x0d36fa20)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,address,bool)`.\n            mstore(0x00, 0x0df12b76)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,address,uint256)`.\n            mstore(0x00, 0x457fe3cf)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,address,string)`.\n            mstore(0x00, 0xf7e36245)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,bool,address)`.\n            mstore(0x00, 0x205871c2)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,bool,bool)`.\n            mstore(0x00, 0x5f1d5c9f)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,bool,uint256)`.\n            mstore(0x00, 0x515e38b6)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,bool,string)`.\n            mstore(0x00, 0xbc0b61fe)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,uint256,address)`.\n            mstore(0x00, 0x63183678)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,uint256,bool)`.\n            mstore(0x00, 0x0ef7e050)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,uint256,uint256)`.\n            mstore(0x00, 0x1dc8e1b8)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,uint256,string)`.\n            mstore(0x00, 0x448830a8)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,string,address)`.\n            mstore(0x00, 0xa04e2f87)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,string,bool)`.\n            mstore(0x00, 0x35a5071f)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,string,uint256)`.\n            mstore(0x00, 0x159f8927)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(address,string,string,string)`.\n            mstore(0x00, 0x5d02c50b)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,address,address)`.\n            mstore(0x00, 0x1d14d001)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,address,bool)`.\n            mstore(0x00, 0x46600be0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,address,uint256)`.\n            mstore(0x00, 0x0c66d1be)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,address,string)`.\n            mstore(0x00, 0xd812a167)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,bool,address)`.\n            mstore(0x00, 0x1c41a336)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,bool,bool)`.\n            mstore(0x00, 0x6a9c478b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,bool,uint256)`.\n            mstore(0x00, 0x07831502)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,bool,string)`.\n            mstore(0x00, 0x4a66cb34)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,uint256,address)`.\n            mstore(0x00, 0x136b05dd)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,uint256,bool)`.\n            mstore(0x00, 0xd6019f1c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,uint256,uint256)`.\n            mstore(0x00, 0x7bf181a1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,uint256,string)`.\n            mstore(0x00, 0x51f09ff8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,string,address)`.\n            mstore(0x00, 0x6f7c603e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,string,bool)`.\n            mstore(0x00, 0xe2bfd60b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,string,uint256)`.\n            mstore(0x00, 0xc21f64c7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,address,string,string)`.\n            mstore(0x00, 0xa73c1db6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,address,address)`.\n            mstore(0x00, 0xf4880ea4)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,address,bool)`.\n            mstore(0x00, 0xc0a302d8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,address,uint256)`.\n            mstore(0x00, 0x4c123d57)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,address,string)`.\n            mstore(0x00, 0xa0a47963)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,bool,address)`.\n            mstore(0x00, 0x8c329b1a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,bool,bool)`.\n            mstore(0x00, 0x3b2a5ce0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,bool,uint256)`.\n            mstore(0x00, 0x6d7045c1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,bool,string)`.\n            mstore(0x00, 0x2ae408d4)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,uint256,address)`.\n            mstore(0x00, 0x54a7a9a0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,uint256,bool)`.\n            mstore(0x00, 0x619e4d0e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,uint256,uint256)`.\n            mstore(0x00, 0x0bb00eab)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,uint256,string)`.\n            mstore(0x00, 0x7dd4d0e0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,string,address)`.\n            mstore(0x00, 0xf9ad2b89)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,string,bool)`.\n            mstore(0x00, 0xb857163a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,string,uint256)`.\n            mstore(0x00, 0xe3a9ca2f)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,bool,string,string)`.\n            mstore(0x00, 0x6d1e8751)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,address,address)`.\n            mstore(0x00, 0x26f560a8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,address,bool)`.\n            mstore(0x00, 0xb4c314ff)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,address,uint256)`.\n            mstore(0x00, 0x1537dc87)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,address,string)`.\n            mstore(0x00, 0x1bb3b09a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,bool,address)`.\n            mstore(0x00, 0x9acd3616)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,bool,bool)`.\n            mstore(0x00, 0xceb5f4d7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,bool,uint256)`.\n            mstore(0x00, 0x7f9bbca2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,bool,string)`.\n            mstore(0x00, 0x9143dbb1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,uint256,address)`.\n            mstore(0x00, 0x00dd87b9)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,uint256,bool)`.\n            mstore(0x00, 0xbe984353)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,uint256,uint256)`.\n            mstore(0x00, 0x374bb4b2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,uint256,string)`.\n            mstore(0x00, 0x8e69fb5d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,string,address)`.\n            mstore(0x00, 0xfedd1fff)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,string,bool)`.\n            mstore(0x00, 0xe5e70b2b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,string,uint256)`.\n            mstore(0x00, 0x6a1199e2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,uint256,string,string)`.\n            mstore(0x00, 0xf5bc2249)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,address,address)`.\n            mstore(0x00, 0x2b2b18dc)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,address,bool)`.\n            mstore(0x00, 0x6dd434ca)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,address,uint256)`.\n            mstore(0x00, 0xa5cada94)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,address,string)`.\n            mstore(0x00, 0x12d6c788)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,bool,address)`.\n            mstore(0x00, 0x538e06ab)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,bool,bool)`.\n            mstore(0x00, 0xdc5e935b)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,bool,uint256)`.\n            mstore(0x00, 0x1606a393)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,bool,string)`.\n            mstore(0x00, 0x483d0416)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,uint256,address)`.\n            mstore(0x00, 0x1596a1ce)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,uint256,bool)`.\n            mstore(0x00, 0x6b0e5d53)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,uint256,uint256)`.\n            mstore(0x00, 0x28863fcb)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,uint256,string)`.\n            mstore(0x00, 0x1ad96de6)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,string,address)`.\n            mstore(0x00, 0x97d394d8)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,string,bool)`.\n            mstore(0x00, 0x1e4b87e5)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,string,uint256)`.\n            mstore(0x00, 0x7be0c3eb)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(bool,string,string,string)`.\n            mstore(0x00, 0x1762e32a)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,address,address)`.\n            mstore(0x00, 0x2488b414)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,address,bool)`.\n            mstore(0x00, 0x091ffaf5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,address,uint256)`.\n            mstore(0x00, 0x736efbb6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,address,string)`.\n            mstore(0x00, 0x031c6f73)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,bool,address)`.\n            mstore(0x00, 0xef72c513)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,bool,bool)`.\n            mstore(0x00, 0xe351140f)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,bool,uint256)`.\n            mstore(0x00, 0x5abd992a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,bool,string)`.\n            mstore(0x00, 0x90fb06aa)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,uint256,address)`.\n            mstore(0x00, 0x15c127b5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,uint256,bool)`.\n            mstore(0x00, 0x5f743a7c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,uint256,uint256)`.\n            mstore(0x00, 0x0c9cd9c1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,uint256,string)`.\n            mstore(0x00, 0xddb06521)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,string,address)`.\n            mstore(0x00, 0x9cba8fff)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,string,bool)`.\n            mstore(0x00, 0xcc32ab07)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,string,uint256)`.\n            mstore(0x00, 0x46826b5d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,address,string,string)`.\n            mstore(0x00, 0x3e128ca3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,address,address)`.\n            mstore(0x00, 0xa1ef4cbb)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,address,bool)`.\n            mstore(0x00, 0x454d54a5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,address,uint256)`.\n            mstore(0x00, 0x078287f5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,address,string)`.\n            mstore(0x00, 0xade052c7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,bool,address)`.\n            mstore(0x00, 0x69640b59)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,bool,bool)`.\n            mstore(0x00, 0xb6f577a1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,bool,uint256)`.\n            mstore(0x00, 0x7464ce23)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,bool,string)`.\n            mstore(0x00, 0xdddb9561)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,uint256,address)`.\n            mstore(0x00, 0x88cb6041)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,uint256,bool)`.\n            mstore(0x00, 0x91a02e2a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,uint256,uint256)`.\n            mstore(0x00, 0xc6acc7a8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,uint256,string)`.\n            mstore(0x00, 0xde03e774)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,string,address)`.\n            mstore(0x00, 0xef529018)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,string,bool)`.\n            mstore(0x00, 0xeb928d7f)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,string,uint256)`.\n            mstore(0x00, 0x2c1d0746)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,bool,string,string)`.\n            mstore(0x00, 0x68c8b8bd)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,address,address)`.\n            mstore(0x00, 0x56a5d1b1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,address,bool)`.\n            mstore(0x00, 0x15cac476)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,address,uint256)`.\n            mstore(0x00, 0x88f6e4b2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,address,string)`.\n            mstore(0x00, 0x6cde40b8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,bool,address)`.\n            mstore(0x00, 0x9a816a83)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,bool,bool)`.\n            mstore(0x00, 0xab085ae6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,bool,uint256)`.\n            mstore(0x00, 0xeb7f6fd2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,bool,string)`.\n            mstore(0x00, 0xa5b4fc99)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,uint256,address)`.\n            mstore(0x00, 0xfa8185af)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,uint256,bool)`.\n            mstore(0x00, 0xc598d185)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,uint256,uint256)`.\n            mstore(0x00, 0x193fb800)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,uint256,string)`.\n            mstore(0x00, 0x59cfcbe3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,string,address)`.\n            mstore(0x00, 0x42d21db7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,string,bool)`.\n            mstore(0x00, 0x7af6ab25)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,string,uint256)`.\n            mstore(0x00, 0x5da297eb)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,uint256,string,string)`.\n            mstore(0x00, 0x27d8afd2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,address,address)`.\n            mstore(0x00, 0x6168ed61)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,address,bool)`.\n            mstore(0x00, 0x90c30a56)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,address,uint256)`.\n            mstore(0x00, 0xe8d3018d)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,address,string)`.\n            mstore(0x00, 0x9c3adfa1)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,bool,address)`.\n            mstore(0x00, 0xae2ec581)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,bool,bool)`.\n            mstore(0x00, 0xba535d9c)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,bool,uint256)`.\n            mstore(0x00, 0xcf009880)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,bool,string)`.\n            mstore(0x00, 0xd2d423cd)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,uint256,address)`.\n            mstore(0x00, 0x3b2279b4)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,uint256,bool)`.\n            mstore(0x00, 0x691a8f74)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,uint256,uint256)`.\n            mstore(0x00, 0x82c25b74)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,uint256,string)`.\n            mstore(0x00, 0xb7b914ca)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,string,address)`.\n            mstore(0x00, 0xd583c602)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,string,bool)`.\n            mstore(0x00, 0xb3a6b6bd)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,string,uint256)`.\n            mstore(0x00, 0xb028c9bd)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(uint256,string,string,string)`.\n            mstore(0x00, 0x21ad0683)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,address,address)`.\n            mstore(0x00, 0xed8f28f6)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,address,bool)`.\n            mstore(0x00, 0xb59dbd60)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,address,uint256)`.\n            mstore(0x00, 0x8ef3f399)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,address,string)`.\n            mstore(0x00, 0x800a1c67)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,bool,address)`.\n            mstore(0x00, 0x223603bd)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,bool,bool)`.\n            mstore(0x00, 0x79884c2b)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,bool,uint256)`.\n            mstore(0x00, 0x3e9f866a)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,bool,string)`.\n            mstore(0x00, 0x0454c079)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,uint256,address)`.\n            mstore(0x00, 0x63fb8bc5)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,uint256,bool)`.\n            mstore(0x00, 0xfc4845f0)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,uint256,uint256)`.\n            mstore(0x00, 0xf8f51b1e)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,uint256,string)`.\n            mstore(0x00, 0x5a477632)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,string,address)`.\n            mstore(0x00, 0xaabc9a31)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,string,bool)`.\n            mstore(0x00, 0x5f15d28c)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,string,uint256)`.\n            mstore(0x00, 0x91d1112e)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,address,string,string)`.\n            mstore(0x00, 0x245986f2)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,address,address)`.\n            mstore(0x00, 0x33e9dd1d)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,address,bool)`.\n            mstore(0x00, 0x958c28c6)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,address,uint256)`.\n            mstore(0x00, 0x5d08bb05)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,address,string)`.\n            mstore(0x00, 0x2d8e33a4)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,bool,address)`.\n            mstore(0x00, 0x7190a529)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,bool,bool)`.\n            mstore(0x00, 0x895af8c5)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,bool,uint256)`.\n            mstore(0x00, 0x8e3f78a9)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,bool,string)`.\n            mstore(0x00, 0x9d22d5dd)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,uint256,address)`.\n            mstore(0x00, 0x935e09bf)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,uint256,bool)`.\n            mstore(0x00, 0x8af7cf8a)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,uint256,uint256)`.\n            mstore(0x00, 0x64b5bb67)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,uint256,string)`.\n            mstore(0x00, 0x742d6ee7)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,string,address)`.\n            mstore(0x00, 0xe0625b29)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,string,bool)`.\n            mstore(0x00, 0x3f8a701d)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,string,uint256)`.\n            mstore(0x00, 0x24f91465)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,bool,string,string)`.\n            mstore(0x00, 0xa826caeb)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,address,address)`.\n            mstore(0x00, 0x5ea2b7ae)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,address,bool)`.\n            mstore(0x00, 0x82112a42)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,address,uint256)`.\n            mstore(0x00, 0x4f04fdc6)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,address,string)`.\n            mstore(0x00, 0x9ffb2f93)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,bool,address)`.\n            mstore(0x00, 0xe0e95b98)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,bool,bool)`.\n            mstore(0x00, 0x354c36d6)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,bool,uint256)`.\n            mstore(0x00, 0xe41b6f6f)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,bool,string)`.\n            mstore(0x00, 0xabf73a98)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,uint256,address)`.\n            mstore(0x00, 0xe21de278)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,uint256,bool)`.\n            mstore(0x00, 0x7626db92)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,uint256,uint256)`.\n            mstore(0x00, 0xa7a87853)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,uint256,string)`.\n            mstore(0x00, 0x854b3496)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,string,address)`.\n            mstore(0x00, 0x7c4632a4)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,string,bool)`.\n            mstore(0x00, 0x7d24491d)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,string,uint256)`.\n            mstore(0x00, 0xc67ea9d1)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,uint256,string,string)`.\n            mstore(0x00, 0x5ab84e1f)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,address,address)`.\n            mstore(0x00, 0x439c7bef)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,address,bool)`.\n            mstore(0x00, 0x5ccd4e37)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,address,uint256)`.\n            mstore(0x00, 0x7cc3c607)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,address,string)`.\n            mstore(0x00, 0xeb1bff80)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,bool,address)`.\n            mstore(0x00, 0xc371c7db)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,bool,bool)`.\n            mstore(0x00, 0x40785869)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,bool,uint256)`.\n            mstore(0x00, 0xd6aefad2)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,bool,string)`.\n            mstore(0x00, 0x5e84b0ea)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,uint256,address)`.\n            mstore(0x00, 0x1023f7b2)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,uint256,bool)`.\n            mstore(0x00, 0xc3a8a654)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,uint256,uint256)`.\n            mstore(0x00, 0xf45d7d2c)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,uint256,string)`.\n            mstore(0x00, 0x5d1a971a)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,string,address)`.\n            mstore(0x00, 0x6d572f44)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, 0x100)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p2)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,string,bool)`.\n            mstore(0x00, 0x2c1754ed)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, 0x100)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p2)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,string,uint256)`.\n            mstore(0x00, 0x8eafb02b)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, 0x100)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p2)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        bytes32 m11;\n        bytes32 m12;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            m11 := mload(0x160)\n            m12 := mload(0x180)\n            // Selector of `log(string,string,string,string)`.\n            mstore(0x00, 0xde68f20a)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, 0x100)\n            mstore(0x80, 0x140)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p2)\n            writeString(0x160, p3)\n        }\n        _sendLogPayload(0x1c, 0x184);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n            mstore(0x160, m11)\n            mstore(0x180, m12)\n        }\n    }\n}\n"
          },
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
          },
          "lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n}\n"
          },
          "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
          },
          "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
          },
          "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
          },
          "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
          },
          "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
          },
          "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
          },
          "lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
          },
          "lib/openzeppelin-contracts/contracts/proxy/utils/UUPSUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n}\n"
          },
          "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
          },
          "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
          },
          "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
          },
          "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
          },
          "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
          },
          "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
          },
          "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 248 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 240 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 232 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 224 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 216 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 208 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 200 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 192 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 184 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 176 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 168 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 160 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 152 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 144 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 136 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 128 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 120 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 112 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 104 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 96 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 88 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 80 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 72 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 64 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 56 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 48 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 40 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 32 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 24 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 16 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 8 bits\");\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
          },
          "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
          },
          "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
          },
          "lib/sphinx/packages/contracts/contracts/core/SphinxDataTypes.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @custom:value APPROVE Approve a new deployment on a chain. This leaf must be submitted in the\n *                       `approve` function on the `SphinxModuleProxy`.\n * @custom:value EXECUTE Execute a transaction in the deployment. These leaves must be submitted in\n *                       the `execute` function on the `SphinxModuleProxy`.\n * @custom:value CANCEL  Cancel an active Merkle root. This leaf must be submitted in the `cancel`\n *                       function on the `SphinxModuleProxy`.\n */\nenum SphinxLeafType {\n    APPROVE,\n    EXECUTE,\n    CANCEL\n}\n\n/**\n * @notice A Merkle leaf.\n *\n * @custom:field chainId  The current chain ID.\n * @custom:field index    The index of the leaf within the Merkle tree on this chain.\n * @custom:field leafType The type of the leaf.\n * @custom:field data     Arbitrary data that is ABI encoded based on the leaf type.\n */\nstruct SphinxLeaf {\n    uint256 chainId;\n    uint256 index;\n    SphinxLeafType leafType;\n    bytes data;\n}\n\n/**\n * @custom:field leaf  A Merkle leaf.\n * @custom:field proof The Merkle leaf's proof.\n */\nstruct SphinxLeafWithProof {\n    SphinxLeaf leaf;\n    bytes32[] proof;\n}\n\n/**\n * @notice The state of a Merkle root in a `SphinxModuleProxy`.\n *\n * @custom:field numLeaves      The total number of leaves in the Merkle tree on the current chain.\n *                              There must be at least one leaf: either an `APPROVE` leaf or a\n *                              `CANCEL` leaf.\n * @custom:field leavesExecuted The number of Merkle leaves that have been executed on the current\n *                              chain for the current Merkle root.\n * @custom:field uri            An optional field that contains the URI of the Merkle root. Its\n *                              purpose is to provide a public record that allows anyone to\n *                              re-assemble the deployment from scratch. This may include the\n *                              Solidity compiler inputs, which are required for Etherscan\n *                              verification. The format, location, and contents of the URI are\n *                              determined by off-chain tooling.\n * @custom:field executor       The address of the caller, which is the only account that is allowed\n *                              to execute calls on the `SphinxModuleProxy` for the Merkle root.\n * @custom:field status         The status of the Merkle root.\n * @custom:field arbitraryChain If this is `true`, the Merkle root can be executed on any chain\n *                              without the explicit permission of the Gnosis Safe owners. This is\n *                              useful if the owners want their system to be permissionlessly\n *                              deployed on new chains. By default, this is disabled, which means\n *                              that the Gnosis Safe owners must explicitly approve the Merkle root\n *                              on individual chains.\n */\nstruct MerkleRootState {\n    uint256 numLeaves;\n    uint256 leavesExecuted;\n    string uri;\n    address executor;\n    MerkleRootStatus status;\n    bool arbitraryChain;\n}\n\n/**\n * @notice Enum that represents the status of a Merkle root in a `SphinxModuleProxy`.\n *\n * @custom:value EMPTY     The Merkle root has never been used.\n * @custom:value APPROVED  The Merkle root has been signed by the Gnosis Safe owners, and the\n *                         `approve` function has been called on the `SphinxModuleProxy`. The\n *                         Merkle root is considered \"active\" after this happens.\n * @custom:value COMPLETED The Merkle root has been completed on this network.\n * @custom:value CANCELED  The Merkle root was previously active, but has been canceled by the\n *                         Gnosis Safe owner(s).\n * @custom:value FAILED    The Merkle root has failed due to a transaction reverting in the Gnosis\n *                         Safe.\n */\nenum MerkleRootStatus {\n    EMPTY,\n    APPROVED,\n    COMPLETED,\n    CANCELED,\n    FAILED\n}\n"
          },
          "lib/sphinx/packages/contracts/contracts/core/interfaces/ISphinxModule.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\nimport { SphinxLeafWithProof, MerkleRootStatus } from \"../SphinxDataTypes.sol\";\n\n/**\n * @notice The interface of the `SphinxModule` contract.\n */\ninterface ISphinxModule {\n    /**\n     * @notice Emitted when an `EXECUTE` leaf fails in the Gnosis Safe.\n     *\n     * @param merkleRoot The Merkle root that contains the failing action.\n     * @param leafIndex  The index of the leaf in the Merkle tree.\n     */\n    event SphinxActionFailed(bytes32 indexed merkleRoot, uint256 leafIndex);\n\n    /**\n     * @notice Emitted when an `EXECUTE` Merkle leaf succeeds in the Gnosis Safe.\n     *\n     * @param merkleRoot The Merkle root that contains the action that succeeded.\n     * @param leafIndex  The index of the leaf in the Merkle tree.\n     */\n    event SphinxActionSucceeded(bytes32 indexed merkleRoot, uint256 leafIndex);\n\n    /**\n     * @notice Emitted when a Merkle root is approved.\n     *\n     * @param merkleRoot         The Merkle root that was approved.\n     * @param nonce              The `nonce` field in the `APPROVE` leaf. This matches the nonce\n     *                           in the `SphinxModuleProxy` before the approval occurred.\n     * @param executor           The address of the caller.\n     * @param numLeaves          The total number of leaves in the Merkle tree on the current chain.\n     * @param uri                The URI of the Merkle root. This may be an empty string.\n     */\n    event SphinxMerkleRootApproved(\n        bytes32 indexed merkleRoot,\n        uint256 indexed nonce,\n        address executor,\n        uint256 numLeaves,\n        string uri\n    );\n\n    /**\n     * @notice Emitted when an active Merkle root is canceled.\n     *\n     * @param completedMerkleRoot The Merkle root that contains the `CANCEL` leaf which canceled the\n     *                            active Merkle root.\n     * @param canceledMerkleRoot  The Merkle root that was canceled.\n     * @param nonce               The `nonce` field in the `CANCEL` leaf. This matches the nonce\n     *                            in the `SphinxModuleProxy` before the cancellation occurred.\n     * @param executor            The address of the caller.\n     * @param uri                 The URI of the Merkle root that contains the `CANCEL` leaf (not\n     *                            the Merkle root that was cancelled). This may be an empty string.\n     */\n    event SphinxMerkleRootCanceled(\n        bytes32 indexed completedMerkleRoot,\n        bytes32 indexed canceledMerkleRoot,\n        uint256 indexed nonce,\n        address executor,\n        string uri\n    );\n\n    /**\n     * @notice Emitted when a Merkle root is completed.\n     *\n     * @param merkleRoot The Merkle root that was completed.\n     */\n    event SphinxMerkleRootCompleted(bytes32 indexed merkleRoot);\n\n    /**\n     * @notice Emitted when an action fails due to a transaction reverting in the Gnosis Safe.\n     *\n     * @param merkleRoot The Merkle root that contains the failed action.\n     * @param leafIndex  The index of the leaf in the Merkle tree that caused the failure.\n     */\n    event SphinxMerkleRootFailed(bytes32 indexed merkleRoot, uint256 leafIndex);\n\n    /**\n     * @notice The version of the `SphinxModule`.\n     */\n    function VERSION() external view returns (string memory);\n\n    /**\n     * @notice The Merkle root that is currently active. This means that it has been signed\n     *         off-chain by the Gnosis Safe owner(s) and approved on-chain. This is `bytes32(0)` if\n     *         there is no active Merkle root.\n     */\n    function activeMerkleRoot() external view returns (bytes32);\n\n    /**\n     * @notice Approve a new Merkle root, which must be signed by a sufficient number of Gnosis Safe\n     *         owners.\n     *\n     * @param _root          The Merkle root to approve.\n     * @param _leafWithProof The `APPROVE` Merkle leaf and its Merkle proof, which must yield the\n     *                       Merkle root.\n     * @param _signatures    The signatures of the Gnosis Safe owners.\n     */\n    function approve(\n        bytes32 _root,\n        SphinxLeafWithProof memory _leafWithProof,\n        bytes memory _signatures\n    ) external;\n\n    /**\n     * @notice Cancel an active Merkle root. The Gnosis Safe owners(s) can cancel an active Merkle\n     *         root by signing a different Merkle root that contains a `CANCEL` Merkle leaf. This\n     *         new Merkle root is submitted to this function.\n     *\n     * @param _root          The Merkle root that contains the `CANCEL` leaf. This is _not_ the\n     *                       active Merkle root.\n     * @param _leafWithProof The `CANCEL` Merkle leaf and its Merkle proof, which must yield the\n     *                       `_root` supplied to this function (not the active Merkle root).\n     * @param _signatures    The signatures of the Gnosis Safe owners that signed the Merkle root\n     *                       that contains the `CANCEL` leaf.\n     */\n    function cancel(\n        bytes32 _root,\n        SphinxLeafWithProof memory _leafWithProof,\n        bytes memory _signatures\n    ) external;\n\n    /**\n     * @notice The current nonce in this contract. This is incremented each time a Merkle root is\n     *         used for the first time in the current contract. This can occur by using the Merkle\n     *         root to approve a deployment, or cancel an active one. The nonce removes the\n     *         possibility that a Merkle root can be signed by the owners, then submitted on-chain\n     *         far into the future, even after other Merkle roots have been submitted. The nonce\n     *         also allows the Gnosis Safe owners to cancel a Merkle root that has been signed\n     *         off-chain, but has not been approved on-chain. In this situation, the owners can\n     *         approve a new Merkle root that has the same nonce, then approve it on-chain,\n     *         preventing the old Merkle root from ever being approved.\n     */\n    function merkleRootNonce() external view returns (uint256);\n\n    /**\n     * @notice Mapping from a Merkle root to its `MerkleRootState` struct.\n     */\n    function merkleRootStates(\n        bytes32\n    )\n        external\n        view\n        returns (\n            uint256 numLeaves,\n            uint256 leavesExecuted,\n            string memory uri,\n            address executor,\n            MerkleRootStatus status,\n            bool arbitraryChain\n        );\n\n    /**\n     * @notice Execute a set of Merkle leaves. These leaves must belong to the active Merkle root,\n     *         which must have been approved by the Gnosis Safe owners in the `approve` function.\n     *\n     * @param _leavesWithProofs An array of `EXECUTE` Merkle leaves, along with their Merkle proofs.\n     */\n    function execute(SphinxLeafWithProof[] memory _leavesWithProofs) external;\n\n    /**\n     * @notice Initializes this contract. It's necessary to use an initializer function instead of a\n     *         constructor because this contract is meant to exist behind an EIP-1167 proxy, which\n     *         isn't able to use constructor arguments.\n     *\n     *         This call will revert if the input Gnosis Safe proxy's singleton has a `VERSION()`\n     *         function that does not equal \"1.3.0\" or \"1.4.1\". This prevents users from\n     *         accidentally adding the module to an incompatible Safe. This does _not_ ensure that\n     *         the Gnosis Safe singleton isn't malicious. If a singleton has a valid `VERSION()`\n     *         function and arbitrary malicious logic, this call would still consider the singleton\n     *         to be valid.\n     *\n     * @param _safeProxy The address of the Gnosis Safe proxy that this contract belongs to.\n     */\n    function initialize(address _safeProxy) external;\n\n    /**\n     * @notice The address of the Gnosis Safe proxy that this contract belongs to.\n     */\n    function safeProxy() external view returns (address payable);\n}\n"
          },
          "lib/sphinx/packages/contracts/contracts/core/interfaces/ISphinxModuleProxyFactory.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title ISphinxModuleProxyFactory\n * @notice Interface for the `SphinxModuleProxyFactory` contract.\n */\ninterface ISphinxModuleProxyFactory {\n    /**\n     * @notice Emitted whenever a `SphinxModuleProxy` is deployed by this factory.\n     *\n     * @param sphinxModuleProxy The address of the `SphinxModuleProxy` that was deployed.\n     * @param safeProxy         The address of the Gnosis Safe proxy that the `SphinxModuleProxy`\n     *                          belongs to.\n     */\n    event SphinxModuleProxyDeployed(address indexed sphinxModuleProxy, address indexed safeProxy);\n\n    /**\n     * @notice The address of the `SphinxModule` implementation contract.\n     */\n    function SPHINX_MODULE_IMPL() external view returns (address);\n\n    /**\n     * @notice Computes the address of a `SphinxModuleProxy`. Assumes that the deployer of the\n     *         `SphinxModuleProxy` and the `SphinxModule` is this `SphinxModuleProxyFactory`\n     *         contract.\n     *\n     * @param _safeProxy The address of the Gnosis Safe proxy contract that the `SphinxModuleProxy`\n     *                   belongs to.\n     * @param _caller    The address of the caller that deployed (or will deploy) the\n     *                   `SphinxModuleProxy` through the `SphinxModuleProxyFactory`.\n     * @param _saltNonce An arbitrary nonce, which is one of the inputs that determines the address\n     *                   of the `SphinxModuleProxy`.\n     *\n     * @return The `CREATE2` address of the `SphinxModuleProxy`.\n     */\n    function computeSphinxModuleProxyAddress(\n        address _safeProxy,\n        address _caller,\n        uint256 _saltNonce\n    ) external view returns (address);\n\n    /**\n     * @notice Uses `CREATE2` to deploy a `SphinxModuleProxy`. Use this function if the Gnosis Safe\n     *         has already been deployed on this network. Otherwise, use\n     *         `deploySphinxModuleProxyFromSafe`.\n     *\n     *          This function will revert if a contract already exists at the `CREATE2` address.\n     *          It will also revert if the `_safeProxy` is the zero-address.\n     *\n     * @param _safeProxy Address of the Gnosis Safe proxy that the `SphinxModuleProxy` will belong\n     *                   to.\n     * @param _saltNonce An arbitrary nonce, which is one of the inputs that determines the\n     *                   address of the `SphinxModuleProxy`.\n     *\n     * @return sphinxModuleProxy The `CREATE2` address of the deployed `SphinxModuleProxy`.\n     */\n    function deploySphinxModuleProxy(\n        address _safeProxy,\n        uint256 _saltNonce\n    ) external returns (address sphinxModuleProxy);\n\n    /**\n     * @notice Uses `CREATE2` to deploy a `SphinxModuleProxy`. Meant to be called by a Gnosis Safe\n     *         during its initial deployment. Otherwise, use `deploySphinxModuleProxy` instead.\n     *         After calling this function, enable the `SphinxModuleProxy` in the Gnosis Safe by\n     *         calling `enableSphinxModuleProxyFromSafe`.\n     *\n     *         Unlike `deploySphinxModuleProxy`, this function doesn't return the address of the\n     *         deployed `SphinxModuleProxy`. This is because this function is meant to be called\n     *         from a Gnosis Safe, where the return value is unused.\n     *\n     *         This function will revert if a contract already exists at the `CREATE2` address.\n     *\n     * @param _saltNonce An arbitrary nonce, which is one of the inputs that determines the\n     *                   address of the `SphinxModuleProxy`.\n     */\n    function deploySphinxModuleProxyFromSafe(uint256 _saltNonce) external;\n\n    /**\n     * @notice Enable a `SphinxModuleProxy` within a Gnosis Safe. Must be delegatecalled by\n     *         the Gnosis Safe. This function is meant to be triggered during the deployment of a\n     *         Gnosis Safe after `SphinxModuleProxyFactory.deploySphinxModuleProxyFromSafe`. If the\n     *         Gnosis Safe has already been deployed, use the Gnosis Safe's `enableModule` function\n     *         instead.\n     *\n     *         We don't emit an event because this function is meant to be delegatecalled by a\n     *         Gnosis Safe, which emits an `EnabledModule` event when we call its `enableModule`\n     *         function.\n     *\n     * @param _saltNonce An arbitrary nonce, which is one of the inputs that determines the\n     *                   address of the `SphinxModuleProxy`.\n     */\n    function enableSphinxModuleProxyFromSafe(uint256 _saltNonce) external;\n}\n"
          },
          "lib/sphinx/packages/contracts/contracts/forge-std/src/StdUtils.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport { IMulticall3 } from \"./interfaces/IMulticall3.sol\";\nimport { MockERC20 } from \"./mocks/MockERC20.sol\";\nimport { MockERC721 } from \"./mocks/MockERC721.sol\";\nimport { VmSafe } from \"./Vm.sol\";\n\nabstract contract StdUtils {\n    /*//////////////////////////////////////////////////////////////////////////\n                                     CONSTANTS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    IMulticall3 private constant multicall =\n        IMulticall3(0xcA11bde05977b3631167028862bE2a173976CA11);\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n    address private constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\n    uint256 private constant INT256_MIN_ABS =\n        57896044618658097711785492504343953926634992332820282019728792003956564819968;\n    uint256 private constant SECP256K1_ORDER =\n        115792089237316195423570985008687907852837564279074904382605163141518161494337;\n    uint256 private constant UINT256_MAX =\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    // Used by default when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.\n    address private constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                 INTERNAL FUNCTIONS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    function _bound(\n        uint256 x,\n        uint256 min,\n        uint256 max\n    ) internal pure virtual returns (uint256 result) {\n        require(min <= max, \"StdUtils bound(uint256,uint256,uint256): Max is less than min.\");\n        // If x is between min and max, return x directly. This is to ensure that dictionary values\n        // do not get shifted if the min is nonzero. More info: https://github.com/foundry-rs/forge-std/issues/188\n        if (x >= min && x <= max) return x;\n\n        uint256 size = max - min + 1;\n\n        // If the value is 0, 1, 2, 3, wrap that to min, min+1, min+2, min+3. Similarly for the UINT256_MAX side.\n        // This helps ensure coverage of the min/max values.\n        if (x <= 3 && size > x) return min + x;\n        if (x >= UINT256_MAX - 3 && size > UINT256_MAX - x) return max - (UINT256_MAX - x);\n\n        // Otherwise, wrap x into the range [min, max], i.e. the range is inclusive.\n        if (x > max) {\n            uint256 diff = x - max;\n            uint256 rem = diff % size;\n            if (rem == 0) return max;\n            result = min + rem - 1;\n        } else if (x < min) {\n            uint256 diff = min - x;\n            uint256 rem = diff % size;\n            if (rem == 0) return min;\n            result = max - rem + 1;\n        }\n    }\n\n    function bound(\n        uint256 x,\n        uint256 min,\n        uint256 max\n    ) internal pure virtual returns (uint256 result) {\n        result = _bound(x, min, max);\n        console2_log_StdUtils(\"Bound Result\", result);\n    }\n\n    function _bound(\n        int256 x,\n        int256 min,\n        int256 max\n    ) internal pure virtual returns (int256 result) {\n        require(min <= max, \"StdUtils bound(int256,int256,int256): Max is less than min.\");\n\n        // Shifting all int256 values to uint256 to use _bound function. The range of two types are:\n        // int256 : -(2**255) ~ (2**255 - 1)\n        // uint256:     0     ~ (2**256 - 1)\n        // So, add 2**255, INT256_MIN_ABS to the integer values.\n        //\n        // If the given integer value is -2**255, we cannot use `-uint256(-x)` because of the overflow.\n        // So, use `~uint256(x) + 1` instead.\n        uint256 _x = x < 0 ? (INT256_MIN_ABS - ~uint256(x) - 1) : (uint256(x) + INT256_MIN_ABS);\n        uint256 _min = min < 0\n            ? (INT256_MIN_ABS - ~uint256(min) - 1)\n            : (uint256(min) + INT256_MIN_ABS);\n        uint256 _max = max < 0\n            ? (INT256_MIN_ABS - ~uint256(max) - 1)\n            : (uint256(max) + INT256_MIN_ABS);\n\n        uint256 y = _bound(_x, _min, _max);\n\n        // To move it back to int256 value, subtract INT256_MIN_ABS at here.\n        result = y < INT256_MIN_ABS\n            ? int256(~(INT256_MIN_ABS - y) + 1)\n            : int256(y - INT256_MIN_ABS);\n    }\n\n    function bound(int256 x, int256 min, int256 max) internal pure virtual returns (int256 result) {\n        result = _bound(x, min, max);\n        console2_log_StdUtils(\"Bound result\", vm.toString(result));\n    }\n\n    function boundPrivateKey(uint256 privateKey) internal pure virtual returns (uint256 result) {\n        result = _bound(privateKey, 1, SECP256K1_ORDER - 1);\n    }\n\n    function bytesToUint(bytes memory b) internal pure virtual returns (uint256) {\n        require(b.length <= 32, \"StdUtils bytesToUint(bytes): Bytes length exceeds 32.\");\n        return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));\n    }\n\n    /// @dev Compute the address a contract will be deployed at for a given deployer address and nonce\n    /// @notice adapted from Solmate implementation (https://github.com/Rari-Capital/solmate/blob/main/src/utils/LibRLP.sol)\n    function computeCreateAddress(\n        address deployer,\n        uint256 nonce\n    ) internal pure virtual returns (address) {\n        console2_log_StdUtils(\n            \"computeCreateAddress is deprecated. Please use vm.computeCreateAddress instead.\"\n        );\n        return vm.computeCreateAddress(deployer, nonce);\n    }\n\n    function computeCreate2Address(\n        bytes32 salt,\n        bytes32 initcodeHash,\n        address deployer\n    ) internal pure virtual returns (address) {\n        console2_log_StdUtils(\n            \"computeCreate2Address is deprecated. Please use vm.computeCreate2Address instead.\"\n        );\n        return vm.computeCreate2Address(salt, initcodeHash, deployer);\n    }\n\n    /// @dev returns the address of a contract created with CREATE2 using the default CREATE2 deployer\n    function computeCreate2Address(\n        bytes32 salt,\n        bytes32 initCodeHash\n    ) internal pure returns (address) {\n        console2_log_StdUtils(\n            \"computeCreate2Address is deprecated. Please use vm.computeCreate2Address instead.\"\n        );\n        return vm.computeCreate2Address(salt, initCodeHash);\n    }\n\n    /// @dev returns an initialized mock ERC20 contract\n    function deployMockERC20(\n        string memory name,\n        string memory symbol,\n        uint8 decimals\n    ) internal returns (MockERC20 mock) {\n        mock = new MockERC20();\n        mock.initialize(name, symbol, decimals);\n    }\n\n    /// @dev returns an initialized mock ERC721 contract\n    function deployMockERC721(\n        string memory name,\n        string memory symbol\n    ) internal returns (MockERC721 mock) {\n        mock = new MockERC721();\n        mock.initialize(name, symbol);\n    }\n\n    /// @dev returns the hash of the init code (creation code + no args) used in CREATE2 with no constructor arguments\n    /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\n    function hashInitCode(bytes memory creationCode) internal pure returns (bytes32) {\n        return hashInitCode(creationCode, \"\");\n    }\n\n    /// @dev returns the hash of the init code (creation code + ABI-encoded args) used in CREATE2\n    /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\n    /// @param args the ABI-encoded arguments to the constructor of C\n    function hashInitCode(\n        bytes memory creationCode,\n        bytes memory args\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(creationCode, args));\n    }\n\n    // Performs a single call with Multicall3 to query the ERC-20 token balances of the given addresses.\n    function getTokenBalances(\n        address token,\n        address[] memory addresses\n    ) internal virtual returns (uint256[] memory balances) {\n        uint256 tokenCodeSize;\n        assembly {\n            tokenCodeSize := extcodesize(token)\n        }\n        require(\n            tokenCodeSize > 0,\n            \"StdUtils getTokenBalances(address,address[]): Token address is not a contract.\"\n        );\n\n        // ABI encode the aggregate call to Multicall3.\n        uint256 length = addresses.length;\n        IMulticall3.Call[] memory calls = new IMulticall3.Call[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            // 0x70a08231 = bytes4(\"balanceOf(address)\"))\n            calls[i] = IMulticall3.Call({\n                target: token,\n                callData: abi.encodeWithSelector(0x70a08231, (addresses[i]))\n            });\n        }\n\n        // Make the aggregate call.\n        (, bytes[] memory returnData) = multicall.aggregate(calls);\n\n        // ABI decode the return data and return the balances.\n        balances = new uint256[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            balances[i] = abi.decode(returnData[i], (uint256));\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                 PRIVATE FUNCTIONS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    function addressFromLast20Bytes(bytes32 bytesValue) private pure returns (address) {\n        return address(uint160(uint256(bytesValue)));\n    }\n\n    // This section is used to prevent the compilation of console, which shortens the compilation time when console is\n    // not used elsewhere. We also trick the compiler into letting us make the console log methods as `pure` to avoid\n    // any breaking changes to function signatures.\n    function _castLogPayloadViewToPure(\n        function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) internal pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castLogPayloadViewToPure(_sendLogPayloadView)(payload);\n    }\n\n    function _sendLogPayloadView(bytes memory payload) private view {\n        uint256 payloadLength = payload.length;\n        address consoleAddress = CONSOLE2_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            let payloadStart := add(payload, 32)\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n        }\n    }\n\n    function console2_log_StdUtils(string memory p0) private pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function console2_log_StdUtils(string memory p0, uint256 p1) private pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function console2_log_StdUtils(string memory p0, string memory p1) private pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n}\n"
          },
          "lib/sphinx/packages/contracts/contracts/forge-std/src/Vm.sol": {
            "content": "// Automatically @generated by scripts/vm.py. Do not modify manually.\n\n// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.2 <0.9.0;\npragma experimental ABIEncoderV2;\n\n/// The `VmSafe` interface does not allow manipulation of the EVM state or other actions that may\n/// result in Script simulations differing from on-chain execution. It is recommended to only use\n/// these cheats in scripts.\ninterface VmSafe {\n    /// A modification applied to either `msg.sender` or `tx.origin`. Returned by `readCallers`.\n    enum CallerMode {\n        // No caller modification is currently active.\n        None,\n        // A one time broadcast triggered by a `vm.broadcast()` call is currently active.\n        Broadcast,\n        // A recurrent broadcast triggered by a `vm.startBroadcast()` call is currently active.\n        RecurrentBroadcast,\n        // A one time prank triggered by a `vm.prank()` call is currently active.\n        Prank,\n        // A recurrent prank triggered by a `vm.startPrank()` call is currently active.\n        RecurrentPrank\n    }\n\n    /// The kind of account access that occurred.\n    enum AccountAccessKind {\n        // The account was called.\n        Call,\n        // The account was called via delegatecall.\n        DelegateCall,\n        // The account was called via callcode.\n        CallCode,\n        // The account was called via staticcall.\n        StaticCall,\n        // The account was created.\n        Create,\n        // The account was selfdestructed.\n        SelfDestruct,\n        // Synthetic access indicating the current context has resumed after a previous sub-context (AccountAccess).\n        Resume,\n        // The account's balance was read.\n        Balance,\n        // The account's codesize was read.\n        Extcodesize,\n        // The account's codehash was read.\n        Extcodehash,\n        // The account's code was copied.\n        Extcodecopy\n    }\n\n    /// An Ethereum log. Returned by `getRecordedLogs`.\n    struct Log {\n        // The topics of the log, including the signature, if any.\n        bytes32[] topics;\n        // The raw data of the log.\n        bytes data;\n        // The address of the log's emitter.\n        address emitter;\n    }\n\n    /// An RPC URL and its alias. Returned by `rpcUrlStructs`.\n    struct Rpc {\n        // The alias of the RPC URL.\n        string key;\n        // The RPC URL.\n        string url;\n    }\n\n    /// An RPC log object. Returned by `eth_getLogs`.\n    struct EthGetLogs {\n        // The address of the log's emitter.\n        address emitter;\n        // The topics of the log, including the signature, if any.\n        bytes32[] topics;\n        // The raw data of the log.\n        bytes data;\n        // The block hash.\n        bytes32 blockHash;\n        // The block number.\n        uint64 blockNumber;\n        // The transaction hash.\n        bytes32 transactionHash;\n        // The transaction index in the block.\n        uint64 transactionIndex;\n        // The log index.\n        uint256 logIndex;\n        // Whether the log was removed.\n        bool removed;\n    }\n\n    /// A single entry in a directory listing. Returned by `readDir`.\n    struct DirEntry {\n        // The error message, if any.\n        string errorMessage;\n        // The path of the entry.\n        string path;\n        // The depth of the entry.\n        uint64 depth;\n        // Whether the entry is a directory.\n        bool isDir;\n        // Whether the entry is a symlink.\n        bool isSymlink;\n    }\n\n    /// Metadata information about a file.\n    /// This structure is returned from the `fsMetadata` function and represents known\n    /// metadata about a file such as its permissions, size, modification\n    /// times, etc.\n    struct FsMetadata {\n        // True if this metadata is for a directory.\n        bool isDir;\n        // True if this metadata is for a symlink.\n        bool isSymlink;\n        // The size of the file, in bytes, this metadata is for.\n        uint256 length;\n        // True if this metadata is for a readonly (unwritable) file.\n        bool readOnly;\n        // The last modification time listed in this metadata.\n        uint256 modified;\n        // The last access time of this metadata.\n        uint256 accessed;\n        // The creation time listed in this metadata.\n        uint256 created;\n    }\n\n    /// A wallet with a public and private key.\n    struct Wallet {\n        // The wallet's address.\n        address addr;\n        // The wallet's public key `X`.\n        uint256 publicKeyX;\n        // The wallet's public key `Y`.\n        uint256 publicKeyY;\n        // The wallet's private key.\n        uint256 privateKey;\n    }\n\n    /// The result of a `tryFfi` call.\n    struct FfiResult {\n        // The exit code of the call.\n        int32 exitCode;\n        // The optionally hex-decoded `stdout` data.\n        bytes stdout;\n        // The `stderr` data.\n        bytes stderr;\n    }\n\n    /// Information on the chain and fork.\n    struct ChainInfo {\n        // The fork identifier. Set to zero if no fork is active.\n        uint256 forkId;\n        // The chain ID of the current fork.\n        uint256 chainId;\n    }\n\n    /// The result of a `stopAndReturnStateDiff` call.\n    struct AccountAccess {\n        // The chain and fork the access occurred.\n        ChainInfo chainInfo;\n        // The kind of account access that determines what the account is.\n        // If kind is Call, DelegateCall, StaticCall or CallCode, then the account is the callee.\n        // If kind is Create, then the account is the newly created account.\n        // If kind is SelfDestruct, then the account is the selfdestruct recipient.\n        // If kind is a Resume, then account represents a account context that has resumed.\n        AccountAccessKind kind;\n        // The account that was accessed.\n        // It's either the account created, callee or a selfdestruct recipient for CREATE, CALL or SELFDESTRUCT.\n        address account;\n        // What accessed the account.\n        address accessor;\n        // If the account was initialized or empty prior to the access.\n        // An account is considered initialized if it has code, a\n        // non-zero nonce, or a non-zero balance.\n        bool initialized;\n        // The previous balance of the accessed account.\n        uint256 oldBalance;\n        // The potential new balance of the accessed account.\n        // That is, all balance changes are recorded here, even if reverts occurred.\n        uint256 newBalance;\n        // Code of the account deployed by CREATE.\n        bytes deployedCode;\n        // Value passed along with the account access\n        uint256 value;\n        // Input data provided to the CREATE or CALL\n        bytes data;\n        // If this access reverted in either the current or parent context.\n        bool reverted;\n        // An ordered list of storage accesses made during an account access operation.\n        StorageAccess[] storageAccesses;\n        // Call depth traversed during the recording of state differences\n        uint64 depth;\n    }\n\n    /// The storage accessed during an `AccountAccess`.\n    struct StorageAccess {\n        // The account whose storage was accessed.\n        address account;\n        // The slot that was accessed.\n        bytes32 slot;\n        // If the access was a write.\n        bool isWrite;\n        // The previous value of the slot.\n        bytes32 previousValue;\n        // The new value of the slot.\n        bytes32 newValue;\n        // If the access was reverted.\n        bool reverted;\n    }\n\n    // ======== Environment ========\n\n    /// Gets the environment variable `name` and parses it as `address`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envAddress(string calldata name) external view returns (address value);\n\n    /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envAddress(\n        string calldata name,\n        string calldata delim\n    ) external view returns (address[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bool`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBool(string calldata name) external view returns (bool value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBool(\n        string calldata name,\n        string calldata delim\n    ) external view returns (bool[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bytes32`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes32(string calldata name) external view returns (bytes32 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes32(\n        string calldata name,\n        string calldata delim\n    ) external view returns (bytes32[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bytes`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes(string calldata name) external view returns (bytes memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes(\n        string calldata name,\n        string calldata delim\n    ) external view returns (bytes[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `int256`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envInt(string calldata name) external view returns (int256 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envInt(\n        string calldata name,\n        string calldata delim\n    ) external view returns (int256[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bool`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, bool defaultValue) external view returns (bool value);\n\n    /// Gets the environment variable `name` and parses it as `uint256`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(\n        string calldata name,\n        uint256 defaultValue\n    ) external view returns (uint256 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(\n        string calldata name,\n        string calldata delim,\n        address[] calldata defaultValue\n    ) external view returns (address[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(\n        string calldata name,\n        string calldata delim,\n        bytes32[] calldata defaultValue\n    ) external view returns (bytes32[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(\n        string calldata name,\n        string calldata delim,\n        string[] calldata defaultValue\n    ) external view returns (string[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(\n        string calldata name,\n        string calldata delim,\n        bytes[] calldata defaultValue\n    ) external view returns (bytes[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `int256`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, int256 defaultValue) external view returns (int256 value);\n\n    /// Gets the environment variable `name` and parses it as `address`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(\n        string calldata name,\n        address defaultValue\n    ) external view returns (address value);\n\n    /// Gets the environment variable `name` and parses it as `bytes32`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(\n        string calldata name,\n        bytes32 defaultValue\n    ) external view returns (bytes32 value);\n\n    /// Gets the environment variable `name` and parses it as `string`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(\n        string calldata name,\n        string calldata defaultValue\n    ) external view returns (string memory value);\n\n    /// Gets the environment variable `name` and parses it as `bytes`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(\n        string calldata name,\n        bytes calldata defaultValue\n    ) external view returns (bytes memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(\n        string calldata name,\n        string calldata delim,\n        bool[] calldata defaultValue\n    ) external view returns (bool[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(\n        string calldata name,\n        string calldata delim,\n        uint256[] calldata defaultValue\n    ) external view returns (uint256[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(\n        string calldata name,\n        string calldata delim,\n        int256[] calldata defaultValue\n    ) external view returns (int256[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `string`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envString(string calldata name) external view returns (string memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envString(\n        string calldata name,\n        string calldata delim\n    ) external view returns (string[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `uint256`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envUint(string calldata name) external view returns (uint256 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envUint(\n        string calldata name,\n        string calldata delim\n    ) external view returns (uint256[] memory value);\n\n    /// Sets environment variables.\n    function setEnv(string calldata name, string calldata value) external;\n\n    // ======== EVM ========\n\n    /// Gets all accessed reads and write slot from a `vm.record` session, for a given address.\n    function accesses(\n        address target\n    ) external returns (bytes32[] memory readSlots, bytes32[] memory writeSlots);\n\n    /// Gets the address for a given private key.\n    function addr(uint256 privateKey) external pure returns (address keyAddr);\n\n    /// Gets all the logs according to specified filter.\n    function eth_getLogs(\n        uint256 fromBlock,\n        uint256 toBlock,\n        address target,\n        bytes32[] calldata topics\n    ) external returns (EthGetLogs[] memory logs);\n\n    /// Gets the current `block.number`.\n    /// You should use this instead of `block.number` if you use `vm.roll`, as `block.number` is assumed to be constant across a transaction,\n    /// and as a result will get optimized out by the compiler.\n    /// See https://github.com/foundry-rs/foundry/issues/6180\n    function getBlockNumber() external view returns (uint256 height);\n\n    /// Gets the current `block.timestamp`.\n    /// You should use this instead of `block.timestamp` if you use `vm.warp`, as `block.timestamp` is assumed to be constant across a transaction,\n    /// and as a result will get optimized out by the compiler.\n    /// See https://github.com/foundry-rs/foundry/issues/6180\n    function getBlockTimestamp() external view returns (uint256 timestamp);\n\n    /// Gets the map key and parent of a mapping at a given slot, for a given address.\n    function getMappingKeyAndParentOf(\n        address target,\n        bytes32 elementSlot\n    ) external returns (bool found, bytes32 key, bytes32 parent);\n\n    /// Gets the number of elements in the mapping at the given slot, for a given address.\n    function getMappingLength(\n        address target,\n        bytes32 mappingSlot\n    ) external returns (uint256 length);\n\n    /// Gets the elements at index idx of the mapping at the given slot, for a given address. The\n    /// index must be less than the length of the mapping (i.e. the number of keys in the mapping).\n    function getMappingSlotAt(\n        address target,\n        bytes32 mappingSlot,\n        uint256 idx\n    ) external returns (bytes32 value);\n\n    /// Gets the nonce of an account.\n    function getNonce(address account) external view returns (uint64 nonce);\n\n    /// Gets all the recorded logs.\n    function getRecordedLogs() external returns (Log[] memory logs);\n\n    /// Loads a storage slot from an address.\n    function load(address target, bytes32 slot) external view returns (bytes32 data);\n\n    /// Pauses gas metering (i.e. gas usage is not counted). Noop if already paused.\n    function pauseGasMetering() external;\n\n    /// Records all storage reads and writes.\n    function record() external;\n\n    /// Record all the transaction logs.\n    function recordLogs() external;\n\n    /// Resumes gas metering (i.e. gas usage is counted again). Noop if already on.\n    function resumeGasMetering() external;\n\n    /// Performs an Ethereum JSON-RPC request to the current fork URL.\n    function rpc(\n        string calldata method,\n        string calldata params\n    ) external returns (bytes memory data);\n\n    /// Signs `digest` with `privateKey` using the secp256r1 curve.\n    function signP256(\n        uint256 privateKey,\n        bytes32 digest\n    ) external pure returns (bytes32 r, bytes32 s);\n\n    /// Signs `digest` with `privateKey` using the secp256k1 curve.\n    function sign(\n        uint256 privateKey,\n        bytes32 digest\n    ) external pure returns (uint8 v, bytes32 r, bytes32 s);\n\n    /// Starts recording all map SSTOREs for later retrieval.\n    function startMappingRecording() external;\n\n    /// Record all account accesses as part of CREATE, CALL or SELFDESTRUCT opcodes in order,\n    /// along with the context of the calls\n    function startStateDiffRecording() external;\n\n    /// Returns an ordered array of all account accesses from a `vm.startStateDiffRecording` session.\n    function stopAndReturnStateDiff() external returns (AccountAccess[] memory accountAccesses);\n\n    /// Stops recording all map SSTOREs for later retrieval and clears the recorded data.\n    function stopMappingRecording() external;\n\n    // ======== Filesystem ========\n\n    /// Closes file for reading, resetting the offset and allowing to read it from beginning with readLine.\n    /// `path` is relative to the project root.\n    function closeFile(string calldata path) external;\n\n    /// Copies the contents of one file to another. This function will **overwrite** the contents of `to`.\n    /// On success, the total number of bytes copied is returned and it is equal to the length of the `to` file as reported by `metadata`.\n    /// Both `from` and `to` are relative to the project root.\n    function copyFile(string calldata from, string calldata to) external returns (uint64 copied);\n\n    /// Creates a new, empty directory at the provided path.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - User lacks permissions to modify `path`.\n    /// - A parent of the given path doesn't exist and `recursive` is false.\n    /// - `path` already exists and `recursive` is false.\n    /// `path` is relative to the project root.\n    function createDir(string calldata path, bool recursive) external;\n\n    /// Returns true if the given path points to an existing entity, else returns false.\n    function exists(string calldata path) external returns (bool result);\n\n    /// Performs a foreign function call via the terminal.\n    function ffi(string[] calldata commandInput) external returns (bytes memory result);\n\n    /// Given a path, query the file system to get information about a file, directory, etc.\n    function fsMetadata(string calldata path) external view returns (FsMetadata memory metadata);\n\n    /// Gets the creation bytecode from an artifact file. Takes in the relative path to the json file.\n    function getCode(\n        string calldata artifactPath\n    ) external view returns (bytes memory creationBytecode);\n\n    /// Gets the deployed bytecode from an artifact file. Takes in the relative path to the json file.\n    function getDeployedCode(\n        string calldata artifactPath\n    ) external view returns (bytes memory runtimeBytecode);\n\n    /// Returns true if the path exists on disk and is pointing at a directory, else returns false.\n    function isDir(string calldata path) external returns (bool result);\n\n    /// Returns true if the path exists on disk and is pointing at a regular file, else returns false.\n    function isFile(string calldata path) external returns (bool result);\n\n    /// Get the path of the current project root.\n    function projectRoot() external view returns (string memory path);\n\n    /// Reads the directory at the given path recursively, up to `maxDepth`.\n    /// `maxDepth` defaults to 1, meaning only the direct children of the given directory will be returned.\n    /// Follows symbolic links if `followLinks` is true.\n    function readDir(string calldata path) external view returns (DirEntry[] memory entries);\n\n    /// See `readDir(string)`.\n    function readDir(\n        string calldata path,\n        uint64 maxDepth\n    ) external view returns (DirEntry[] memory entries);\n\n    /// See `readDir(string)`.\n    function readDir(\n        string calldata path,\n        uint64 maxDepth,\n        bool followLinks\n    ) external view returns (DirEntry[] memory entries);\n\n    /// Reads the entire content of file to string. `path` is relative to the project root.\n    function readFile(string calldata path) external view returns (string memory data);\n\n    /// Reads the entire content of file as binary. `path` is relative to the project root.\n    function readFileBinary(string calldata path) external view returns (bytes memory data);\n\n    /// Reads next line of file to string.\n    function readLine(string calldata path) external view returns (string memory line);\n\n    /// Reads a symbolic link, returning the path that the link points to.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - `path` is not a symbolic link.\n    /// - `path` does not exist.\n    function readLink(string calldata linkPath) external view returns (string memory targetPath);\n\n    /// Removes a directory at the provided path.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - `path` doesn't exist.\n    /// - `path` isn't a directory.\n    /// - User lacks permissions to modify `path`.\n    /// - The directory is not empty and `recursive` is false.\n    /// `path` is relative to the project root.\n    function removeDir(string calldata path, bool recursive) external;\n\n    /// Removes a file from the filesystem.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - `path` points to a directory.\n    /// - The file doesn't exist.\n    /// - The user lacks permissions to remove the file.\n    /// `path` is relative to the project root.\n    function removeFile(string calldata path) external;\n\n    /// Performs a foreign function call via terminal and returns the exit code, stdout, and stderr.\n    function tryFfi(string[] calldata commandInput) external returns (FfiResult memory result);\n\n    /// Returns the time since unix epoch in milliseconds.\n    function unixTime() external returns (uint256 milliseconds);\n\n    /// Writes data to file, creating a file if it does not exist, and entirely replacing its contents if it does.\n    /// `path` is relative to the project root.\n    function writeFile(string calldata path, string calldata data) external;\n\n    /// Writes binary data to a file, creating a file if it does not exist, and entirely replacing its contents if it does.\n    /// `path` is relative to the project root.\n    function writeFileBinary(string calldata path, bytes calldata data) external;\n\n    /// Writes line to file, creating a file if it does not exist.\n    /// `path` is relative to the project root.\n    function writeLine(string calldata path, string calldata data) external;\n\n    // ======== JSON ========\n\n    /// Checks if `key` exists in a JSON object.\n    function keyExists(string calldata json, string calldata key) external view returns (bool);\n\n    /// Parses a string of JSON data at `key` and coerces it to `address`.\n    function parseJsonAddress(\n        string calldata json,\n        string calldata key\n    ) external pure returns (address);\n\n    /// Parses a string of JSON data at `key` and coerces it to `address[]`.\n    function parseJsonAddressArray(\n        string calldata json,\n        string calldata key\n    ) external pure returns (address[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bool`.\n    function parseJsonBool(string calldata json, string calldata key) external pure returns (bool);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bool[]`.\n    function parseJsonBoolArray(\n        string calldata json,\n        string calldata key\n    ) external pure returns (bool[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes`.\n    function parseJsonBytes(\n        string calldata json,\n        string calldata key\n    ) external pure returns (bytes memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes32`.\n    function parseJsonBytes32(\n        string calldata json,\n        string calldata key\n    ) external pure returns (bytes32);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes32[]`.\n    function parseJsonBytes32Array(\n        string calldata json,\n        string calldata key\n    ) external pure returns (bytes32[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes[]`.\n    function parseJsonBytesArray(\n        string calldata json,\n        string calldata key\n    ) external pure returns (bytes[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `int256`.\n    function parseJsonInt(string calldata json, string calldata key) external pure returns (int256);\n\n    /// Parses a string of JSON data at `key` and coerces it to `int256[]`.\n    function parseJsonIntArray(\n        string calldata json,\n        string calldata key\n    ) external pure returns (int256[] memory);\n\n    /// Returns an array of all the keys in a JSON object.\n    function parseJsonKeys(\n        string calldata json,\n        string calldata key\n    ) external pure returns (string[] memory keys);\n\n    /// Parses a string of JSON data at `key` and coerces it to `string`.\n    function parseJsonString(\n        string calldata json,\n        string calldata key\n    ) external pure returns (string memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `string[]`.\n    function parseJsonStringArray(\n        string calldata json,\n        string calldata key\n    ) external pure returns (string[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `uint256`.\n    function parseJsonUint(\n        string calldata json,\n        string calldata key\n    ) external pure returns (uint256);\n\n    /// Parses a string of JSON data at `key` and coerces it to `uint256[]`.\n    function parseJsonUintArray(\n        string calldata json,\n        string calldata key\n    ) external pure returns (uint256[] memory);\n\n    /// ABI-encodes a JSON object.\n    function parseJson(string calldata json) external pure returns (bytes memory abiEncodedData);\n\n    /// ABI-encodes a JSON object at `key`.\n    function parseJson(\n        string calldata json,\n        string calldata key\n    ) external pure returns (bytes memory abiEncodedData);\n\n    /// See `serializeJson`.\n    function serializeAddress(\n        string calldata objectKey,\n        string calldata valueKey,\n        address value\n    ) external returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeAddress(\n        string calldata objectKey,\n        string calldata valueKey,\n        address[] calldata values\n    ) external returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBool(\n        string calldata objectKey,\n        string calldata valueKey,\n        bool value\n    ) external returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBool(\n        string calldata objectKey,\n        string calldata valueKey,\n        bool[] calldata values\n    ) external returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes32(\n        string calldata objectKey,\n        string calldata valueKey,\n        bytes32 value\n    ) external returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes32(\n        string calldata objectKey,\n        string calldata valueKey,\n        bytes32[] calldata values\n    ) external returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes(\n        string calldata objectKey,\n        string calldata valueKey,\n        bytes calldata value\n    ) external returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes(\n        string calldata objectKey,\n        string calldata valueKey,\n        bytes[] calldata values\n    ) external returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeInt(\n        string calldata objectKey,\n        string calldata valueKey,\n        int256 value\n    ) external returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeInt(\n        string calldata objectKey,\n        string calldata valueKey,\n        int256[] calldata values\n    ) external returns (string memory json);\n\n    /// Serializes a key and value to a JSON object stored in-memory that can be later written to a file.\n    /// Returns the stringified version of the specific JSON file up to that moment.\n    function serializeJson(\n        string calldata objectKey,\n        string calldata value\n    ) external returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeString(\n        string calldata objectKey,\n        string calldata valueKey,\n        string calldata value\n    ) external returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeString(\n        string calldata objectKey,\n        string calldata valueKey,\n        string[] calldata values\n    ) external returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeUint(\n        string calldata objectKey,\n        string calldata valueKey,\n        uint256 value\n    ) external returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeUint(\n        string calldata objectKey,\n        string calldata valueKey,\n        uint256[] calldata values\n    ) external returns (string memory json);\n\n    /// Write a serialized JSON object to a file. If the file exists, it will be overwritten.\n    function writeJson(string calldata json, string calldata path) external;\n\n    /// Write a serialized JSON object to an **existing** JSON file, replacing a value with key = <value_key.>\n    /// This is useful to replace a specific value of a JSON file, without having to parse the entire thing.\n    function writeJson(\n        string calldata json,\n        string calldata path,\n        string calldata valueKey\n    ) external;\n\n    // ======== Scripting ========\n\n    /// Using the address that calls the test contract, has the next call (at this call depth only)\n    /// create a transaction that can later be signed and sent onchain.\n    function broadcast() external;\n\n    /// Has the next call (at this call depth only) create a transaction with the address provided\n    /// as the sender that can later be signed and sent onchain.\n    function broadcast(address signer) external;\n\n    /// Has the next call (at this call depth only) create a transaction with the private key\n    /// provided as the sender that can later be signed and sent onchain.\n    function broadcast(uint256 privateKey) external;\n\n    /// Using the address that calls the test contract, has all subsequent calls\n    /// (at this call depth only) create transactions that can later be signed and sent onchain.\n    function startBroadcast() external;\n\n    /// Has all subsequent calls (at this call depth only) create transactions with the address\n    /// provided that can later be signed and sent onchain.\n    function startBroadcast(address signer) external;\n\n    /// Has all subsequent calls (at this call depth only) create transactions with the private key\n    /// provided that can later be signed and sent onchain.\n    function startBroadcast(uint256 privateKey) external;\n\n    /// Stops collecting onchain transactions.\n    function stopBroadcast() external;\n\n    // ======== String ========\n\n    /// Parses the given `string` into an `address`.\n    function parseAddress(\n        string calldata stringifiedValue\n    ) external pure returns (address parsedValue);\n\n    /// Parses the given `string` into a `bool`.\n    function parseBool(string calldata stringifiedValue) external pure returns (bool parsedValue);\n\n    /// Parses the given `string` into `bytes`.\n    function parseBytes(\n        string calldata stringifiedValue\n    ) external pure returns (bytes memory parsedValue);\n\n    /// Parses the given `string` into a `bytes32`.\n    function parseBytes32(\n        string calldata stringifiedValue\n    ) external pure returns (bytes32 parsedValue);\n\n    /// Parses the given `string` into a `int256`.\n    function parseInt(string calldata stringifiedValue) external pure returns (int256 parsedValue);\n\n    /// Parses the given `string` into a `uint256`.\n    function parseUint(\n        string calldata stringifiedValue\n    ) external pure returns (uint256 parsedValue);\n\n    /// Replaces occurrences of `from` in the given `string` with `to`.\n    function replace(\n        string calldata input,\n        string calldata from,\n        string calldata to\n    ) external pure returns (string memory output);\n\n    /// Splits the given `string` into an array of strings divided by the `delimiter`.\n    function split(\n        string calldata input,\n        string calldata delimiter\n    ) external pure returns (string[] memory outputs);\n\n    /// Converts the given `string` value to Lowercase.\n    function toLowercase(string calldata input) external pure returns (string memory output);\n\n    /// Converts the given value to a `string`.\n    function toString(address value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(bytes calldata value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(bytes32 value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(bool value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(uint256 value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(int256 value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given `string` value to Uppercase.\n    function toUppercase(string calldata input) external pure returns (string memory output);\n\n    /// Trims leading and trailing whitespace from the given `string` value.\n    function trim(string calldata input) external pure returns (string memory output);\n\n    // ======== Testing ========\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message.\n    function assertApproxEqAbsDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxDelta,\n        uint256 decimals\n    ) external pure;\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqAbsDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message.\n    function assertApproxEqAbsDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxDelta,\n        uint256 decimals\n    ) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqAbsDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) external pure;\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Includes error message into revert string on failure.\n    function assertApproxEqAbs(\n        uint256 left,\n        uint256 right,\n        uint256 maxDelta,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Includes error message into revert string on failure.\n    function assertApproxEqAbs(\n        int256 left,\n        int256 right,\n        uint256 maxDelta,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message.\n    function assertApproxEqRelDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta,\n        uint256 decimals\n    ) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqRelDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message.\n    function assertApproxEqRelDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxPercentDelta,\n        uint256 decimals\n    ) external pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqRelDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxPercentDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Includes error message into revert string on failure.\n    function assertApproxEqRel(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) external pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Includes error message into revert string on failure.\n    function assertApproxEqRel(\n        int256 left,\n        int256 right,\n        uint256 maxPercentDelta,\n        string calldata error\n    ) external pure;\n\n    /// Asserts that two `uint256` values are equal, formatting them with decimals in failure message.\n    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `uint256` values are equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertEqDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Asserts that two `int256` values are equal, formatting them with decimals in failure message.\n    function assertEqDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `int256` values are equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertEqDecimal(\n        int256 left,\n        int256 right,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Asserts that two `bool` values are equal.\n    function assertEq(bool left, bool right) external pure;\n\n    /// Asserts that two `bool` values are equal and includes error message into revert string on failure.\n    function assertEq(bool left, bool right, string calldata error) external pure;\n\n    /// Asserts that two `string` values are equal.\n    function assertEq(string calldata left, string calldata right) external pure;\n\n    /// Asserts that two `string` values are equal and includes error message into revert string on failure.\n    function assertEq(\n        string calldata left,\n        string calldata right,\n        string calldata error\n    ) external pure;\n\n    /// Asserts that two `bytes` values are equal.\n    function assertEq(bytes calldata left, bytes calldata right) external pure;\n\n    /// Asserts that two `bytes` values are equal and includes error message into revert string on failure.\n    function assertEq(\n        bytes calldata left,\n        bytes calldata right,\n        string calldata error\n    ) external pure;\n\n    /// Asserts that two arrays of `bool` values are equal.\n    function assertEq(bool[] calldata left, bool[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bool` values are equal and includes error message into revert string on failure.\n    function assertEq(\n        bool[] calldata left,\n        bool[] calldata right,\n        string calldata error\n    ) external pure;\n\n    /// Asserts that two arrays of `uint256 values are equal.\n    function assertEq(uint256[] calldata left, uint256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `uint256` values are equal and includes error message into revert string on failure.\n    function assertEq(\n        uint256[] calldata left,\n        uint256[] calldata right,\n        string calldata error\n    ) external pure;\n\n    /// Asserts that two arrays of `int256` values are equal.\n    function assertEq(int256[] calldata left, int256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `int256` values are equal and includes error message into revert string on failure.\n    function assertEq(\n        int256[] calldata left,\n        int256[] calldata right,\n        string calldata error\n    ) external pure;\n\n    /// Asserts that two `uint256` values are equal.\n    function assertEq(uint256 left, uint256 right) external pure;\n\n    /// Asserts that two arrays of `address` values are equal.\n    function assertEq(address[] calldata left, address[] calldata right) external pure;\n\n    /// Asserts that two arrays of `address` values are equal and includes error message into revert string on failure.\n    function assertEq(\n        address[] calldata left,\n        address[] calldata right,\n        string calldata error\n    ) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are equal.\n    function assertEq(bytes32[] calldata left, bytes32[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are equal and includes error message into revert string on failure.\n    function assertEq(\n        bytes32[] calldata left,\n        bytes32[] calldata right,\n        string calldata error\n    ) external pure;\n\n    /// Asserts that two arrays of `string` values are equal.\n    function assertEq(string[] calldata left, string[] calldata right) external pure;\n\n    /// Asserts that two arrays of `string` values are equal and includes error message into revert string on failure.\n    function assertEq(\n        string[] calldata left,\n        string[] calldata right,\n        string calldata error\n    ) external pure;\n\n    /// Asserts that two arrays of `bytes` values are equal.\n    function assertEq(bytes[] calldata left, bytes[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes` values are equal and includes error message into revert string on failure.\n    function assertEq(\n        bytes[] calldata left,\n        bytes[] calldata right,\n        string calldata error\n    ) external pure;\n\n    /// Asserts that two `uint256` values are equal and includes error message into revert string on failure.\n    function assertEq(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are equal.\n    function assertEq(int256 left, int256 right) external pure;\n\n    /// Asserts that two `int256` values are equal and includes error message into revert string on failure.\n    function assertEq(int256 left, int256 right, string calldata error) external pure;\n\n    /// Asserts that two `address` values are equal.\n    function assertEq(address left, address right) external pure;\n\n    /// Asserts that two `address` values are equal and includes error message into revert string on failure.\n    function assertEq(address left, address right, string calldata error) external pure;\n\n    /// Asserts that two `bytes32` values are equal.\n    function assertEq(bytes32 left, bytes32 right) external pure;\n\n    /// Asserts that two `bytes32` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes32 left, bytes32 right, string calldata error) external pure;\n\n    /// Asserts that the given condition is false.\n    function assertFalse(bool condition) external pure;\n\n    /// Asserts that the given condition is false and includes error message into revert string on failure.\n    function assertFalse(bool condition, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGeDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertGeDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGeDecimal(\n        int256 left,\n        int256 right,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    function assertGe(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertGe(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    function assertGe(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertGe(int256 left, int256 right, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message.\n    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGtDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message.\n    function assertGtDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGtDecimal(\n        int256 left,\n        int256 right,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    function assertGt(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    /// Includes error message into revert string on failure.\n    function assertGt(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    function assertGt(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    /// Includes error message into revert string on failure.\n    function assertGt(int256 left, int256 right, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLeDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertLeDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLeDecimal(\n        int256 left,\n        int256 right,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    function assertLe(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertLe(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    function assertLe(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertLe(int256 left, int256 right, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message.\n    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLtDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message.\n    function assertLtDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLtDecimal(\n        int256 left,\n        int256 right,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    function assertLt(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    /// Includes error message into revert string on failure.\n    function assertLt(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    function assertLt(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    /// Includes error message into revert string on failure.\n    function assertLt(int256 left, int256 right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.\n    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertNotEqDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Asserts that two `int256` values are not equal, formatting them with decimals in failure message.\n    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `int256` values are not equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertNotEqDecimal(\n        int256 left,\n        int256 right,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Asserts that two `bool` values are not equal.\n    function assertNotEq(bool left, bool right) external pure;\n\n    /// Asserts that two `bool` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bool left, bool right, string calldata error) external pure;\n\n    /// Asserts that two `string` values are not equal.\n    function assertNotEq(string calldata left, string calldata right) external pure;\n\n    /// Asserts that two `string` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(\n        string calldata left,\n        string calldata right,\n        string calldata error\n    ) external pure;\n\n    /// Asserts that two `bytes` values are not equal.\n    function assertNotEq(bytes calldata left, bytes calldata right) external pure;\n\n    /// Asserts that two `bytes` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(\n        bytes calldata left,\n        bytes calldata right,\n        string calldata error\n    ) external pure;\n\n    /// Asserts that two arrays of `bool` values are not equal.\n    function assertNotEq(bool[] calldata left, bool[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bool` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(\n        bool[] calldata left,\n        bool[] calldata right,\n        string calldata error\n    ) external pure;\n\n    /// Asserts that two arrays of `uint256` values are not equal.\n    function assertNotEq(uint256[] calldata left, uint256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `uint256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(\n        uint256[] calldata left,\n        uint256[] calldata right,\n        string calldata error\n    ) external pure;\n\n    /// Asserts that two arrays of `int256` values are not equal.\n    function assertNotEq(int256[] calldata left, int256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `int256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(\n        int256[] calldata left,\n        int256[] calldata right,\n        string calldata error\n    ) external pure;\n\n    /// Asserts that two `uint256` values are not equal.\n    function assertNotEq(uint256 left, uint256 right) external pure;\n\n    /// Asserts that two arrays of `address` values are not equal.\n    function assertNotEq(address[] calldata left, address[] calldata right) external pure;\n\n    /// Asserts that two arrays of `address` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(\n        address[] calldata left,\n        address[] calldata right,\n        string calldata error\n    ) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are not equal.\n    function assertNotEq(bytes32[] calldata left, bytes32[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(\n        bytes32[] calldata left,\n        bytes32[] calldata right,\n        string calldata error\n    ) external pure;\n\n    /// Asserts that two arrays of `string` values are not equal.\n    function assertNotEq(string[] calldata left, string[] calldata right) external pure;\n\n    /// Asserts that two arrays of `string` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(\n        string[] calldata left,\n        string[] calldata right,\n        string calldata error\n    ) external pure;\n\n    /// Asserts that two arrays of `bytes` values are not equal.\n    function assertNotEq(bytes[] calldata left, bytes[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(\n        bytes[] calldata left,\n        bytes[] calldata right,\n        string calldata error\n    ) external pure;\n\n    /// Asserts that two `uint256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are not equal.\n    function assertNotEq(int256 left, int256 right) external pure;\n\n    /// Asserts that two `int256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(int256 left, int256 right, string calldata error) external pure;\n\n    /// Asserts that two `address` values are not equal.\n    function assertNotEq(address left, address right) external pure;\n\n    /// Asserts that two `address` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(address left, address right, string calldata error) external pure;\n\n    /// Asserts that two `bytes32` values are not equal.\n    function assertNotEq(bytes32 left, bytes32 right) external pure;\n\n    /// Asserts that two `bytes32` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes32 left, bytes32 right, string calldata error) external pure;\n\n    /// Asserts that the given condition is true.\n    function assertTrue(bool condition) external pure;\n\n    /// Asserts that the given condition is true and includes error message into revert string on failure.\n    function assertTrue(bool condition, string calldata error) external pure;\n\n    /// If the condition is false, discard this run's fuzz inputs and generate new ones.\n    function assume(bool condition) external pure;\n\n    /// Writes a breakpoint to jump to in the debugger.\n    function breakpoint(string calldata char) external;\n\n    /// Writes a conditional breakpoint to jump to in the debugger.\n    function breakpoint(string calldata char, bool value) external;\n\n    /// Returns the RPC url for the given alias.\n    function rpcUrl(string calldata rpcAlias) external view returns (string memory json);\n\n    /// Returns all rpc urls and their aliases as structs.\n    function rpcUrlStructs() external view returns (Rpc[] memory urls);\n\n    /// Returns all rpc urls and their aliases `[alias, url][]`.\n    function rpcUrls() external view returns (string[2][] memory urls);\n\n    /// Suspends execution of the main thread for `duration` milliseconds.\n    function sleep(uint256 duration) external;\n\n    // ======== Utilities ========\n\n    /// Compute the address of a contract created with CREATE2 using the given CREATE2 deployer.\n    function computeCreate2Address(\n        bytes32 salt,\n        bytes32 initCodeHash,\n        address deployer\n    ) external pure returns (address);\n\n    /// Compute the address of a contract created with CREATE2 using the default CREATE2 deployer.\n    function computeCreate2Address(\n        bytes32 salt,\n        bytes32 initCodeHash\n    ) external pure returns (address);\n\n    /// Compute the address a contract will be deployed at for a given deployer address and nonce.\n    function computeCreateAddress(address deployer, uint256 nonce) external pure returns (address);\n\n    /// Derives a private key from the name, labels the account with that name, and returns the wallet.\n    function createWallet(string calldata walletLabel) external returns (Wallet memory wallet);\n\n    /// Generates a wallet from the private key and returns the wallet.\n    function createWallet(uint256 privateKey) external returns (Wallet memory wallet);\n\n    /// Generates a wallet from the private key, labels the account with that name, and returns the wallet.\n    function createWallet(\n        uint256 privateKey,\n        string calldata walletLabel\n    ) external returns (Wallet memory wallet);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path)\n    /// at the derivation path `m/44'/60'/0'/0/{index}`.\n    function deriveKey(\n        string calldata mnemonic,\n        uint32 index\n    ) external pure returns (uint256 privateKey);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path)\n    /// at `{derivationPath}{index}`.\n    function deriveKey(\n        string calldata mnemonic,\n        string calldata derivationPath,\n        uint32 index\n    ) external pure returns (uint256 privateKey);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language\n    /// at the derivation path `m/44'/60'/0'/0/{index}`.\n    function deriveKey(\n        string calldata mnemonic,\n        uint32 index,\n        string calldata language\n    ) external pure returns (uint256 privateKey);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language\n    /// at `{derivationPath}{index}`.\n    function deriveKey(\n        string calldata mnemonic,\n        string calldata derivationPath,\n        uint32 index,\n        string calldata language\n    ) external pure returns (uint256 privateKey);\n\n    /// Gets the label for the specified address.\n    function getLabel(address account) external view returns (string memory currentLabel);\n\n    /// Get a `Wallet`'s nonce.\n    function getNonce(Wallet calldata wallet) external returns (uint64 nonce);\n\n    /// Labels an address in call traces.\n    function label(address account, string calldata newLabel) external;\n\n    /// Adds a private key to the local forge wallet and returns the address.\n    function rememberKey(uint256 privateKey) external returns (address keyAddr);\n\n    /// Signs data with a `Wallet`.\n    function sign(\n        Wallet calldata wallet,\n        bytes32 digest\n    ) external returns (uint8 v, bytes32 r, bytes32 s);\n\n    /// Encodes a `bytes` value to a base64url string.\n    function toBase64URL(bytes calldata data) external pure returns (string memory);\n\n    /// Encodes a `string` value to a base64url string.\n    function toBase64URL(string calldata data) external pure returns (string memory);\n\n    /// Encodes a `bytes` value to a base64 string.\n    function toBase64(bytes calldata data) external pure returns (string memory);\n\n    /// Encodes a `string` value to a base64 string.\n    function toBase64(string calldata data) external pure returns (string memory);\n}\n\n/// The `Vm` interface does allow manipulation of the EVM state. These are all intended to be used\n/// in tests, but it is not recommended to use these cheats in scripts.\ninterface Vm is VmSafe {\n    // ======== EVM ========\n\n    /// Returns the identifier of the currently active fork. Reverts if no fork is currently active.\n    function activeFork() external view returns (uint256 forkId);\n\n    /// In forking mode, explicitly grant the given address cheatcode access.\n    function allowCheatcodes(address account) external;\n\n    /// Sets `block.chainid`.\n    function chainId(uint256 newChainId) external;\n\n    /// Clears all mocked calls.\n    function clearMockedCalls() external;\n\n    /// Sets `block.coinbase`.\n    function coinbase(address newCoinbase) external;\n\n    /// Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork.\n    function createFork(string calldata urlOrAlias) external returns (uint256 forkId);\n\n    /// Creates a new fork with the given endpoint and block and returns the identifier of the fork.\n    function createFork(\n        string calldata urlOrAlias,\n        uint256 blockNumber\n    ) external returns (uint256 forkId);\n\n    /// Creates a new fork with the given endpoint and at the block the given transaction was mined in,\n    /// replays all transaction mined in the block before the transaction, and returns the identifier of the fork.\n    function createFork(\n        string calldata urlOrAlias,\n        bytes32 txHash\n    ) external returns (uint256 forkId);\n\n    /// Creates and also selects a new fork with the given endpoint and the latest block and returns the identifier of the fork.\n    function createSelectFork(string calldata urlOrAlias) external returns (uint256 forkId);\n\n    /// Creates and also selects a new fork with the given endpoint and block and returns the identifier of the fork.\n    function createSelectFork(\n        string calldata urlOrAlias,\n        uint256 blockNumber\n    ) external returns (uint256 forkId);\n\n    /// Creates and also selects new fork with the given endpoint and at the block the given transaction was mined in,\n    /// replays all transaction mined in the block before the transaction, returns the identifier of the fork.\n    function createSelectFork(\n        string calldata urlOrAlias,\n        bytes32 txHash\n    ) external returns (uint256 forkId);\n\n    /// Sets an address' balance.\n    function deal(address account, uint256 newBalance) external;\n\n    /// Removes the snapshot with the given ID created by `snapshot`.\n    /// Takes the snapshot ID to delete.\n    /// Returns `true` if the snapshot was successfully deleted.\n    /// Returns `false` if the snapshot does not exist.\n    function deleteSnapshot(uint256 snapshotId) external returns (bool success);\n\n    /// Removes _all_ snapshots previously created by `snapshot`.\n    function deleteSnapshots() external;\n\n    /// Sets `block.difficulty`.\n    /// Not available on EVM versions from Paris onwards. Use `prevrandao` instead.\n    /// Reverts if used on unsupported EVM versions.\n    function difficulty(uint256 newDifficulty) external;\n\n    /// Dump a genesis JSON file's `allocs` to disk.\n    function dumpState(string calldata pathToStateJson) external;\n\n    /// Sets an address' code.\n    function etch(address target, bytes calldata newRuntimeBytecode) external;\n\n    /// Sets `block.basefee`.\n    function fee(uint256 newBasefee) external;\n\n    /// Returns true if the account is marked as persistent.\n    function isPersistent(address account) external view returns (bool persistent);\n\n    /// Load a genesis JSON file's `allocs` into the in-memory revm state.\n    function loadAllocs(string calldata pathToAllocsJson) external;\n\n    /// Marks that the account(s) should use persistent storage across fork swaps in a multifork setup\n    /// Meaning, changes made to the state of this account will be kept when switching forks.\n    function makePersistent(address account) external;\n\n    /// See `makePersistent(address)`.\n    function makePersistent(address account0, address account1) external;\n\n    /// See `makePersistent(address)`.\n    function makePersistent(address account0, address account1, address account2) external;\n\n    /// See `makePersistent(address)`.\n    function makePersistent(address[] calldata accounts) external;\n\n    /// Reverts a call to an address with specified revert data.\n    function mockCallRevert(\n        address callee,\n        bytes calldata data,\n        bytes calldata revertData\n    ) external;\n\n    /// Reverts a call to an address with a specific `msg.value`, with specified revert data.\n    function mockCallRevert(\n        address callee,\n        uint256 msgValue,\n        bytes calldata data,\n        bytes calldata revertData\n    ) external;\n\n    /// Mocks a call to an address, returning specified data.\n    /// Calldata can either be strict or a partial match, e.g. if you only\n    /// pass a Solidity selector to the expected calldata, then the entire Solidity\n    /// function will be mocked.\n    function mockCall(address callee, bytes calldata data, bytes calldata returnData) external;\n\n    /// Mocks a call to an address with a specific `msg.value`, returning specified data.\n    /// Calldata match takes precedence over `msg.value` in case of ambiguity.\n    function mockCall(\n        address callee,\n        uint256 msgValue,\n        bytes calldata data,\n        bytes calldata returnData\n    ) external;\n\n    /// Sets the *next* call's `msg.sender` to be the input address.\n    function prank(address msgSender) external;\n\n    /// Sets the *next* call's `msg.sender` to be the input address, and the `tx.origin` to be the second input.\n    function prank(address msgSender, address txOrigin) external;\n\n    /// Sets `block.prevrandao`.\n    /// Not available on EVM versions before Paris. Use `difficulty` instead.\n    /// If used on unsupported EVM versions it will revert.\n    function prevrandao(bytes32 newPrevrandao) external;\n\n    /// Reads the current `msg.sender` and `tx.origin` from state and reports if there is any active caller modification.\n    function readCallers()\n        external\n        returns (CallerMode callerMode, address msgSender, address txOrigin);\n\n    /// Resets the nonce of an account to 0 for EOAs and 1 for contract accounts.\n    function resetNonce(address account) external;\n\n    /// Revert the state of the EVM to a previous snapshot\n    /// Takes the snapshot ID to revert to.\n    /// Returns `true` if the snapshot was successfully reverted.\n    /// Returns `false` if the snapshot does not exist.\n    /// **Note:** This does not automatically delete the snapshot. To delete the snapshot use `deleteSnapshot`.\n    function revertTo(uint256 snapshotId) external returns (bool success);\n\n    /// Revert the state of the EVM to a previous snapshot and automatically deletes the snapshots\n    /// Takes the snapshot ID to revert to.\n    /// Returns `true` if the snapshot was successfully reverted and deleted.\n    /// Returns `false` if the snapshot does not exist.\n    function revertToAndDelete(uint256 snapshotId) external returns (bool success);\n\n    /// Revokes persistent status from the address, previously added via `makePersistent`.\n    function revokePersistent(address account) external;\n\n    /// See `revokePersistent(address)`.\n    function revokePersistent(address[] calldata accounts) external;\n\n    /// Sets `block.height`.\n    function roll(uint256 newHeight) external;\n\n    /// Updates the currently active fork to given block number\n    /// This is similar to `roll` but for the currently active fork.\n    function rollFork(uint256 blockNumber) external;\n\n    /// Updates the currently active fork to given transaction. This will `rollFork` with the number\n    /// of the block the transaction was mined in and replays all transaction mined before it in the block.\n    function rollFork(bytes32 txHash) external;\n\n    /// Updates the given fork to given block number.\n    function rollFork(uint256 forkId, uint256 blockNumber) external;\n\n    /// Updates the given fork to block number of the given transaction and replays all transaction mined before it in the block.\n    function rollFork(uint256 forkId, bytes32 txHash) external;\n\n    /// Takes a fork identifier created by `createFork` and sets the corresponding forked state as active.\n    function selectFork(uint256 forkId) external;\n\n    /// Sets the nonce of an account. Must be higher than the current nonce of the account.\n    function setNonce(address account, uint64 newNonce) external;\n\n    /// Sets the nonce of an account to an arbitrary value.\n    function setNonceUnsafe(address account, uint64 newNonce) external;\n\n    /// Snapshot the current state of the evm.\n    /// Returns the ID of the snapshot that was created.\n    /// To revert a snapshot use `revertTo`.\n    function snapshot() external returns (uint256 snapshotId);\n\n    /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called.\n    function startPrank(address msgSender) external;\n\n    /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called, and the `tx.origin` to be the second input.\n    function startPrank(address msgSender, address txOrigin) external;\n\n    /// Resets subsequent calls' `msg.sender` to be `address(this)`.\n    function stopPrank() external;\n\n    /// Stores a value to an address' storage slot.\n    function store(address target, bytes32 slot, bytes32 value) external;\n\n    /// Fetches the given transaction from the active fork and executes it on the current state.\n    function transact(bytes32 txHash) external;\n\n    /// Fetches the given transaction from the given fork and executes it on the current state.\n    function transact(uint256 forkId, bytes32 txHash) external;\n\n    /// Sets `tx.gasprice`.\n    function txGasPrice(uint256 newGasPrice) external;\n\n    /// Sets `block.timestamp`.\n    function warp(uint256 newTimestamp) external;\n\n    // ======== Testing ========\n\n    /// Expect a call to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.\n    function expectCallMinGas(\n        address callee,\n        uint256 msgValue,\n        uint64 minGas,\n        bytes calldata data\n    ) external;\n\n    /// Expect given number of calls to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.\n    function expectCallMinGas(\n        address callee,\n        uint256 msgValue,\n        uint64 minGas,\n        bytes calldata data,\n        uint64 count\n    ) external;\n\n    /// Expects a call to an address with the specified calldata.\n    /// Calldata can either be a strict or a partial match.\n    function expectCall(address callee, bytes calldata data) external;\n\n    /// Expects given number of calls to an address with the specified calldata.\n    function expectCall(address callee, bytes calldata data, uint64 count) external;\n\n    /// Expects a call to an address with the specified `msg.value` and calldata.\n    function expectCall(address callee, uint256 msgValue, bytes calldata data) external;\n\n    /// Expects given number of calls to an address with the specified `msg.value` and calldata.\n    function expectCall(\n        address callee,\n        uint256 msgValue,\n        bytes calldata data,\n        uint64 count\n    ) external;\n\n    /// Expect a call to an address with the specified `msg.value`, gas, and calldata.\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data) external;\n\n    /// Expects given number of calls to an address with the specified `msg.value`, gas, and calldata.\n    function expectCall(\n        address callee,\n        uint256 msgValue,\n        uint64 gas,\n        bytes calldata data,\n        uint64 count\n    ) external;\n\n    /// Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData.).\n    /// Call this function, then emit an event, then call a function. Internally after the call, we check if\n    /// logs were emitted in the expected order with the expected topics and data (as specified by the booleans).\n    function expectEmit(\n        bool checkTopic1,\n        bool checkTopic2,\n        bool checkTopic3,\n        bool checkData\n    ) external;\n\n    /// Same as the previous method, but also checks supplied address against emitting contract.\n    function expectEmit(\n        bool checkTopic1,\n        bool checkTopic2,\n        bool checkTopic3,\n        bool checkData,\n        address emitter\n    ) external;\n\n    /// Prepare an expected log with all topic and data checks enabled.\n    /// Call this function, then emit an event, then call a function. Internally after the call, we check if\n    /// logs were emitted in the expected order with the expected topics and data.\n    function expectEmit() external;\n\n    /// Same as the previous method, but also checks supplied address against emitting contract.\n    function expectEmit(address emitter) external;\n\n    /// Expects an error on next call with any revert data.\n    function expectRevert() external;\n\n    /// Expects an error on next call that starts with the revert data.\n    function expectRevert(bytes4 revertData) external;\n\n    /// Expects an error on next call that exactly matches the revert data.\n    function expectRevert(bytes calldata revertData) external;\n\n    /// Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the current subcontext. If any other\n    /// memory is written to, the test will fail. Can be called multiple times to add more ranges to the set.\n    function expectSafeMemory(uint64 min, uint64 max) external;\n\n    /// Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the next created subcontext.\n    /// If any other memory is written to, the test will fail. Can be called multiple times to add more ranges\n    /// to the set.\n    function expectSafeMemoryCall(uint64 min, uint64 max) external;\n\n    /// Marks a test as skipped. Must be called at the top of the test.\n    function skip(bool skipTest) external;\n\n    /// Stops all safe memory expectation in the current subcontext.\n    function stopExpectSafeMemory() external;\n}\n"
          },
          "lib/sphinx/packages/contracts/contracts/forge-std/src/interfaces/IERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\ninterface IERC165 {\n    /// @notice Query if a contract implements an interface\n    /// @param interfaceID The interface identifier, as specified in ERC-165\n    /// @dev Interface identification is specified in ERC-165. This function\n    /// uses less than 30,000 gas.\n    /// @return `true` if the contract implements `interfaceID` and\n    /// `interfaceID` is not 0xffffffff, `false` otherwise\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n"
          },
          "lib/sphinx/packages/contracts/contracts/forge-std/src/interfaces/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\n/// @dev Interface of the ERC20 standard as defined in the EIP.\n/// @dev This includes the optional name, symbol, and decimals metadata.\ninterface IERC20 {\n    /// @dev Emitted when `value` tokens are moved from one account (`from`) to another (`to`).\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @dev Emitted when the allowance of a `spender` for an `owner` is set, where `value`\n    /// is the new allowance.\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice Returns the amount of tokens in existence.\n    function totalSupply() external view returns (uint256);\n\n    /// @notice Returns the amount of tokens owned by `account`.\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Moves `amount` tokens from the caller's account to `to`.\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /// @notice Returns the remaining number of tokens that `spender` is allowed\n    /// to spend on behalf of `owner`\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Sets `amount` as the allowance of `spender` over the caller's tokens.\n    /// @dev Be aware of front-running risks: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Moves `amount` tokens from `from` to `to` using the allowance mechanism.\n    /// `amount` is then deducted from the caller's allowance.\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n\n    /// @notice Returns the name of the token.\n    function name() external view returns (string memory);\n\n    /// @notice Returns the symbol of the token.\n    function symbol() external view returns (string memory);\n\n    /// @notice Returns the decimals places of the token.\n    function decimals() external view returns (uint8);\n}\n"
          },
          "lib/sphinx/packages/contracts/contracts/forge-std/src/interfaces/IERC721.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\nimport \"./IERC165.sol\";\n\n/// @title ERC-721 Non-Fungible Token Standard\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// Note: the ERC-165 identifier for this interface is 0x80ac58cd.\ninterface IERC721 is IERC165 {\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\n    /// This event emits when NFTs are created (`from` == 0) and destroyed\n    /// (`to` == 0). Exception: during contract creation, any number of NFTs\n    /// may be created and assigned without emitting Transfer. At the time of\n    /// any transfer, the approved address for that NFT (if any) is reset to none.\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    /// @dev This emits when the approved address for an NFT is changed or\n    /// reaffirmed. The zero address indicates there is no approved address.\n    /// When a Transfer event emits, this also indicates that the approved\n    /// address for that NFT (if any) is reset to none.\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    /// The operator can manage all NFTs of the owner.\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /// @notice Count all NFTs assigned to an owner\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\n    /// function throws for queries about the zero address.\n    /// @param _owner An address for whom to query the balance\n    /// @return The number of NFTs owned by `_owner`, possibly zero\n    function balanceOf(address _owner) external view returns (uint256);\n\n    /// @notice Find the owner of an NFT\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\n    /// about them do throw.\n    /// @param _tokenId The identifier for an NFT\n    /// @return The address of the owner of the NFT\n    function ownerOf(uint256 _tokenId) external view returns (address);\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    /// operator, or the approved address for this NFT. Throws if `_from` is\n    /// not the current owner. Throws if `_to` is the zero address. Throws if\n    /// `_tokenId` is not a valid NFT. When transfer is complete, this function\n    /// checks if `_to` is a smart contract (code size > 0). If so, it calls\n    /// `onERC721Received` on `_to` and throws if the return value is not\n    /// `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    /// @param data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId,\n        bytes calldata data\n    ) external payable;\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev This works identically to the other function with an extra data parameter,\n    /// except this function just sets data to \"\".\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n    /// TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n    /// THEY MAY BE PERMANENTLY LOST\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    /// operator, or the approved address for this NFT. Throws if `_from` is\n    /// not the current owner. Throws if `_to` is the zero address. Throws if\n    /// `_tokenId` is not a valid NFT.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /// @notice Change or reaffirm the approved address for an NFT\n    /// @dev The zero address indicates there is no approved address.\n    /// Throws unless `msg.sender` is the current NFT owner, or an authorized\n    /// operator of the current owner.\n    /// @param _approved The new approved NFT controller\n    /// @param _tokenId The NFT to approve\n    function approve(address _approved, uint256 _tokenId) external payable;\n\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\n    /// all of `msg.sender`'s assets\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\n    /// multiple operators per owner.\n    /// @param _operator Address to add to the set of authorized operators\n    /// @param _approved True if the operator is approved, false to revoke approval\n    function setApprovalForAll(address _operator, bool _approved) external;\n\n    /// @notice Get the approved address for a single NFT\n    /// @dev Throws if `_tokenId` is not a valid NFT.\n    /// @param _tokenId The NFT to find the approved address for\n    /// @return The approved address for this NFT, or the zero address if there is none\n    function getApproved(uint256 _tokenId) external view returns (address);\n\n    /// @notice Query if an address is an authorized operator for another address\n    /// @param _owner The address that owns the NFTs\n    /// @param _operator The address that acts on behalf of the owner\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\ninterface IERC721TokenReceiver {\n    /// @notice Handle the receipt of an NFT\n    /// @dev The ERC721 smart contract calls this function on the recipient\n    /// after a `transfer`. This function MAY throw to revert and reject the\n    /// transfer. Return of other than the magic value MUST result in the\n    /// transaction being reverted.\n    /// Note: the contract address is always the message sender.\n    /// @param _operator The address which called `safeTransferFrom` function\n    /// @param _from The address which previously owned the token\n    /// @param _tokenId The NFT identifier which is being transferred\n    /// @param _data Additional data with no specified format\n    /// @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    ///  unless throwing\n    function onERC721Received(\n        address _operator,\n        address _from,\n        uint256 _tokenId,\n        bytes calldata _data\n    ) external returns (bytes4);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// Note: the ERC-165 identifier for this interface is 0x5b5e139f.\ninterface IERC721Metadata is IERC721 {\n    /// @notice A descriptive name for a collection of NFTs in this contract\n    function name() external view returns (string memory _name);\n\n    /// @notice An abbreviated name for NFTs in this contract\n    function symbol() external view returns (string memory _symbol);\n\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n    /// 3986. The URI may point to a JSON file that conforms to the \"ERC721\n    /// Metadata JSON Schema\".\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// Note: the ERC-165 identifier for this interface is 0x780e9d63.\ninterface IERC721Enumerable is IERC721 {\n    /// @notice Count NFTs tracked by this contract\n    /// @return A count of valid NFTs tracked by this contract, where each one of\n    /// them has an assigned and queryable owner not equal to the zero address\n    function totalSupply() external view returns (uint256);\n\n    /// @notice Enumerate valid NFTs\n    /// @dev Throws if `_index` >= `totalSupply()`.\n    /// @param _index A counter less than `totalSupply()`\n    /// @return The token identifier for the `_index`th NFT,\n    /// (sort order not specified)\n    function tokenByIndex(uint256 _index) external view returns (uint256);\n\n    /// @notice Enumerate NFTs assigned to an owner\n    /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\n    /// `_owner` is the zero address, representing invalid NFTs.\n    /// @param _owner An address where we are interested in NFTs owned by them\n    /// @param _index A counter less than `balanceOf(_owner)`\n    /// @return The token identifier for the `_index`th NFT assigned to `_owner`,\n    /// (sort order not specified)\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\n}\n"
          },
          "lib/sphinx/packages/contracts/contracts/forge-std/src/interfaces/IMulticall3.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\ninterface IMulticall3 {\n    struct Call {\n        address target;\n        bytes callData;\n    }\n\n    struct Call3 {\n        address target;\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Call3Value {\n        address target;\n        bool allowFailure;\n        uint256 value;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    function aggregate(\n        Call[] calldata calls\n    ) external payable returns (uint256 blockNumber, bytes[] memory returnData);\n\n    function aggregate3(\n        Call3[] calldata calls\n    ) external payable returns (Result[] memory returnData);\n\n    function aggregate3Value(\n        Call3Value[] calldata calls\n    ) external payable returns (Result[] memory returnData);\n\n    function blockAndAggregate(\n        Call[] calldata calls\n    ) external payable returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);\n\n    function getBasefee() external view returns (uint256 basefee);\n\n    function getBlockHash(uint256 blockNumber) external view returns (bytes32 blockHash);\n\n    function getBlockNumber() external view returns (uint256 blockNumber);\n\n    function getChainId() external view returns (uint256 chainid);\n\n    function getCurrentBlockCoinbase() external view returns (address coinbase);\n\n    function getCurrentBlockDifficulty() external view returns (uint256 difficulty);\n\n    function getCurrentBlockGasLimit() external view returns (uint256 gaslimit);\n\n    function getCurrentBlockTimestamp() external view returns (uint256 timestamp);\n\n    function getEthBalance(address addr) external view returns (uint256 balance);\n\n    function getLastBlockHash() external view returns (bytes32 blockHash);\n\n    function tryAggregate(\n        bool requireSuccess,\n        Call[] calldata calls\n    ) external payable returns (Result[] memory returnData);\n\n    function tryBlockAndAggregate(\n        bool requireSuccess,\n        Call[] calldata calls\n    ) external payable returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);\n}\n"
          },
          "lib/sphinx/packages/contracts/contracts/forge-std/src/mocks/MockERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport { IERC20 } from \"../interfaces/IERC20.sol\";\n\n/// @notice This is a mock contract of the ERC20 standard for testing purposes only, it SHOULD NOT be used in production.\n/// @dev Forked from: https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC20.sol\ncontract MockERC20 is IERC20 {\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string internal _name;\n\n    string internal _symbol;\n\n    uint8 internal _decimals;\n\n    function name() external view override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external view override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() external view override returns (uint8) {\n        return _decimals;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal _totalSupply;\n\n    mapping(address => uint256) internal _balanceOf;\n\n    mapping(address => mapping(address => uint256)) internal _allowance;\n\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) external view override returns (uint256) {\n        return _balanceOf[owner];\n    }\n\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal INITIAL_CHAIN_ID;\n\n    bytes32 internal INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               INITIALIZE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev A bool to track whether the contract has been initialized.\n    bool private initialized;\n\n    /// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and\n    /// syntaxes, we add an initialization function that can be called only once.\n    function initialize(string memory name_, string memory symbol_, uint8 decimals_) public {\n        require(!initialized, \"ALREADY_INITIALIZED\");\n\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n\n        INITIAL_CHAIN_ID = _pureChainId();\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n\n        initialized = true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        _balanceOf[msg.sender] = _sub(_balanceOf[msg.sender], amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        uint256 allowed = _allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != ~uint256(0)) _allowance[from][msg.sender] = _sub(allowed, amount);\n\n        _balanceOf[from] = _sub(_balanceOf[from], amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        address recoveredAddress = ecrecover(\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(\n                        abi.encode(\n                            keccak256(\n                                \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                            ),\n                            owner,\n                            spender,\n                            value,\n                            nonces[owner]++,\n                            deadline\n                        )\n                    )\n                )\n            ),\n            v,\n            r,\n            s\n        );\n\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n        _allowance[recoveredAddress][spender] = value;\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return\n            _pureChainId() == INITIAL_CHAIN_ID\n                ? INITIAL_DOMAIN_SEPARATOR\n                : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\n                        \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n                    ),\n                    keccak256(bytes(_name)),\n                    keccak256(\"1\"),\n                    _pureChainId(),\n                    address(this)\n                )\n            );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        _totalSupply = _add(_totalSupply, amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        _balanceOf[from] = _sub(_balanceOf[from], amount);\n        _totalSupply = _sub(_totalSupply, amount);\n\n        emit Transfer(from, address(0), amount);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MATH LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"ERC20: addition overflow\");\n        return c;\n    }\n\n    function _sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(a >= b, \"ERC20: subtraction underflow\");\n        return a - b;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    // We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no\n    // compiler warnings when accessing chain ID in any solidity version supported by forge-std. We\n    // can't simply access the chain ID in a normal view or pure function because the solc View Pure\n    // Checker changed `chainid` from pure to view in 0.8.0.\n    function _viewChainId() private view returns (uint256 chainId) {\n        // Assembly required since `block.chainid` was introduced in 0.8.0.\n        assembly {\n            chainId := chainid()\n        }\n\n        address(this); // Silence warnings in older Solc versions.\n    }\n\n    function _pureChainId() private pure returns (uint256 chainId) {\n        function() internal view returns (uint256) fnIn = _viewChainId;\n        function() internal pure returns (uint256) pureChainId;\n        assembly {\n            pureChainId := fnIn\n        }\n        chainId = pureChainId();\n    }\n}\n"
          },
          "lib/sphinx/packages/contracts/contracts/forge-std/src/mocks/MockERC721.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport { IERC721Metadata } from \"../interfaces/IERC721.sol\";\n\n/// @notice This is a mock contract of the ERC721 standard for testing purposes only, it SHOULD NOT be used in production.\n/// @dev Forked from: https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC721.sol\ncontract MockERC721 is IERC721Metadata {\n    /*//////////////////////////////////////////////////////////////\n                         METADATA STORAGE/LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    string internal _name;\n\n    string internal _symbol;\n\n    function name() external view override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external view override returns (string memory) {\n        return _symbol;\n    }\n\n    function tokenURI(uint256 id) public view virtual override returns (string memory) {}\n\n    /*//////////////////////////////////////////////////////////////\n                      ERC721 BALANCE/OWNER STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) internal _ownerOf;\n\n    mapping(address => uint256) internal _balanceOf;\n\n    function ownerOf(uint256 id) public view virtual override returns (address owner) {\n        require((owner = _ownerOf[id]) != address(0), \"NOT_MINTED\");\n    }\n\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ZERO_ADDRESS\");\n\n        return _balanceOf[owner];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                         ERC721 APPROVAL STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) internal _getApproved;\n\n    mapping(address => mapping(address => bool)) internal _isApprovedForAll;\n\n    function getApproved(uint256 id) public view virtual override returns (address) {\n        return _getApproved[id];\n    }\n\n    function isApprovedForAll(\n        address owner,\n        address operator\n    ) public view virtual override returns (bool) {\n        return _isApprovedForAll[owner][operator];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               INITIALIZE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev A bool to track whether the contract has been initialized.\n    bool private initialized;\n\n    /// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and\n    /// syntaxes, we add an initialization function that can be called only once.\n    function initialize(string memory name_, string memory symbol_) public {\n        require(!initialized, \"ALREADY_INITIALIZED\");\n\n        _name = name_;\n        _symbol = symbol_;\n\n        initialized = true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC721 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 id) public payable virtual override {\n        address owner = _ownerOf[id];\n\n        require(msg.sender == owner || _isApprovedForAll[owner][msg.sender], \"NOT_AUTHORIZED\");\n\n        _getApproved[id] = spender;\n\n        emit Approval(owner, spender, id);\n    }\n\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function transferFrom(address from, address to, uint256 id) public payable virtual override {\n        require(from == _ownerOf[id], \"WRONG_FROM\");\n\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(\n            msg.sender == from ||\n                _isApprovedForAll[from][msg.sender] ||\n                msg.sender == _getApproved[id],\n            \"NOT_AUTHORIZED\"\n        );\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        _balanceOf[from]--;\n\n        _balanceOf[to]++;\n\n        _ownerOf[id] = to;\n\n        delete _getApproved[id];\n\n        emit Transfer(from, to, id);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public payable virtual override {\n        transferFrom(from, to, id);\n\n        require(\n            !_isContract(to) ||\n                IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\") ==\n                IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        bytes memory data\n    ) public payable virtual override {\n        transferFrom(from, to, id);\n\n        require(\n            !_isContract(to) ||\n                IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\n                IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC165 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 id) internal virtual {\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(_ownerOf[id] == address(0), \"ALREADY_MINTED\");\n\n        // Counter overflow is incredibly unrealistic.\n\n        _balanceOf[to]++;\n\n        _ownerOf[id] = to;\n\n        emit Transfer(address(0), to, id);\n    }\n\n    function _burn(uint256 id) internal virtual {\n        address owner = _ownerOf[id];\n\n        require(owner != address(0), \"NOT_MINTED\");\n\n        _balanceOf[owner]--;\n\n        delete _ownerOf[id];\n\n        delete _getApproved[id];\n\n        emit Transfer(owner, address(0), id);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MINT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _safeMint(address to, uint256 id) internal virtual {\n        _mint(to, id);\n\n        require(\n            !_isContract(to) ||\n                IERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \"\") ==\n                IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function _safeMint(address to, uint256 id, bytes memory data) internal virtual {\n        _mint(to, id);\n\n        require(\n            !_isContract(to) ||\n                IERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\n                IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function _isContract(address _addr) private view returns (bool) {\n        uint256 codeLength;\n\n        // Assembly required for versions < 0.8.0 to check extcodesize.\n        assembly {\n            codeLength := extcodesize(_addr)\n        }\n\n        return codeLength > 0;\n    }\n}\n\ninterface IERC721TokenReceiver {\n    function onERC721Received(address, address, uint256, bytes calldata) external returns (bytes4);\n}\n"
          },
          "lib/sphinx/packages/contracts/contracts/foundry/Sphinx.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// We chose not to use any remappings when importing the standard forge library. This is because when our library is installed in\n// the users project we will be subject to their configured remappings. Bugs can also occur if we rely on the users installation of\n// forge-std which may not be the same exact version our library expects. To resolve both of these issues, we install the version of\n// forge-std we need ourself. We then reference it using a relative import instead of a remapping because that prevents the user from\n// having to define a separate remapping just for our installation of forge-std.\nimport { VmSafe, Vm } from \"../../contracts/forge-std/src/Vm.sol\";\n\nimport { MerkleRootStatus, SphinxLeafWithProof } from \"../core/SphinxDataTypes.sol\";\nimport { ISphinxModule } from \"../core/interfaces/ISphinxModule.sol\";\nimport {\n    SphinxMerkleTree,\n    HumanReadableAction,\n    Network,\n    FoundryDeploymentInfo,\n    NetworkInfo,\n    Wallet,\n    GnosisSafeTransaction,\n    ExecutionMode,\n    SystemContractInfo,\n    UserSphinxConfig\n} from \"./SphinxPluginTypes.sol\";\nimport { SphinxUtils } from \"./SphinxUtils.sol\";\nimport { SphinxConstants } from \"./SphinxConstants.sol\";\nimport { IGnosisSafe } from \"./interfaces/IGnosisSafe.sol\";\nimport { IGnosisSafeProxyFactory } from \"./interfaces/IGnosisSafeProxyFactory.sol\";\nimport { SphinxForkCheck } from \"./SphinxForkCheck.sol\";\n\n/**\n * @notice An abstract contract that the user must inherit in order to deploy with Sphinx.\n *         The main user-facing element of this contract is the `sphinx` modifier, which\n *         the user must include in their entry point function. The rest of the logic is used\n *         internally by Sphinx to handle the process of collecting the user's contract\n *         deployments and function calls.\n *\n *         Functions in this contract are prefixed with \"sphinx\" to avoid name collisions with\n *         functions that the user defines in derived contracts. This applies to private functions\n *         too, since the compiler doesn't allow you to define a private function with the same\n *         signature in a parent contract and a child contract. This also applies to any state\n *         variables that aren't private. Private variables of the same name can be defined in a\n *         parent and child contract.\n *\n * @dev    We refer to this contract in Sphinx's documentation. Make sure to update the\n *         documentation if you change the name or location of this contract.\n */\nabstract contract Sphinx {\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    /**\n     * @dev The configuration options for the user's project. This variable must have `internal`\n     *      visibility so that the user can set fields on it.\n     */\n    UserSphinxConfig public sphinxConfig;\n\n    SphinxConstants private constants;\n\n    SphinxUtils private sphinxUtils;\n\n    bool private sphinxModifierEnabled;\n\n    /**\n     * @dev Tracks the amount of funding we need to transfer to the safe at the beginning of the deployment\n     *      We use a mapping for this and for the Safe starting balance because the user may have a complex\n     *      script that forks multiple different networks internally. See the `test_fundSafe_success_multifork`\n     *      test in Sphinx.t.sol for an example of this case.\n     *      chain => funds requested\n     */\n    mapping(uint256 => uint256) private fundsRequestedForSafe;\n\n    /**\n     * @dev Tracks the starting balance of the Safe.\n     *      chainId => starting balance\n     */\n    mapping(uint256 => uint256) private safeStartingBalance;\n\n    constructor() {\n        sphinxUtils = new SphinxUtils();\n        constants = new SphinxConstants();\n\n        // This ensures that these contracts stay deployed in a multi-fork environment (e.g. when\n        // calling `vm.createSelectFork`).\n        vm.makePersistent(address(constants));\n        vm.makePersistent(address(sphinxUtils));\n    }\n\n    function configureSphinx() public virtual;\n\n    /**\n     * Fetches the sphinxConfig state variable. We need this because we call into this contract\n     * from SphinxUtils to fetch the config. If we just called `sphinxConfig` directly, the dynamic\n     * arrays would not be included in the return value.\n     *\n     * This is an external function because it is only intended to be used by the SphinxUtils contract\n     * for fetching the unvalidated config from the sphinxConfig state variable.\n     *\n     * When fetching the config for normal usage in this contract, we should use the\n     * `sphinxUtils.fetchAndValidateConfig()` function.\n     */\n    function sphinxFetchConfig() external view returns (UserSphinxConfig memory) {\n        return sphinxConfig;\n    }\n\n    /**\n     * @notice Validates the user's Sphinx dependencies. Must be backwards compatible with previous\n     *         versions of the Sphinx plugin package and the Sphinx contracts library. Specifically:\n     *         - The function name must stay the same.\n     *         - There must be no input parameters.\n     *         - The returned values must not be removed or changed. However, new return values can\n     *           be added.\n     */\n    function sphinxValidate() external returns (string memory libraryVersion, bool forkInstalled) {\n        libraryVersion = sphinxUtils.sphinxLibraryVersion();\n\n        // Check that the user has a version of Foundry that records the state diff correctly\n        // We don't assume this because our fixes were merged only recently (Feb 2024)\n        vm.startStateDiffRecording();\n        new SphinxForkCheck{ salt: 0 }();\n        Vm.AccountAccess[] memory accountAccesses = vm.stopAndReturnStateDiff();\n        forkInstalled = sphinxUtils.checkAccesses(\n            accountAccesses,\n            keccak256(type(SphinxForkCheck).creationCode),\n            keccak256(type(SphinxForkCheck).runtimeCode)\n        );\n\n        return (libraryVersion, forkInstalled);\n    }\n\n    function sphinxCollectProposal(\n        bytes memory _scriptFunctionCalldata,\n        string memory _deploymentInfoPath,\n        uint64 _callDepth\n    ) external returns (FoundryDeploymentInfo memory) {\n        sphinxUtils.validateProposal(address(this));\n\n        FoundryDeploymentInfo memory deploymentInfo = sphinxCollect(\n            ExecutionMode.Platform,\n            constants.managedServiceAddress(),\n            _scriptFunctionCalldata,\n            _callDepth\n        );\n\n        vm.writeFile(\n            _deploymentInfoPath,\n            sphinxUtils.serializeFoundryDeploymentInfo(deploymentInfo)\n        );\n\n        return deploymentInfo;\n    }\n\n    function sphinxCollectDeployment(\n        bytes memory _scriptFunctionCalldata,\n        ExecutionMode _executionMode,\n        string memory _deploymentInfoPath,\n        string memory _systemContractsFilePath\n    ) external {\n        address deployer;\n        if (_executionMode == ExecutionMode.LiveNetworkCLI) {\n            sphinxUtils.validateLiveNetworkCLI(IGnosisSafe(safeAddress()), address(this));\n            deployer = vm.addr(vm.envUint(\"PRIVATE_KEY\"));\n        } else if (_executionMode == ExecutionMode.LocalNetworkCLI) {\n            // Set the `ManagedService` contract as the deployer. Although this isn't strictly\n            // necessary, it allows us to reuse the DevOps Platform logic for local network\n            // broadcasts.\n            deployer = constants.managedServiceAddress();\n        } else {\n            revert(\"Incorrect execution type.\");\n        }\n\n        SystemContractInfo[] memory systemContracts = abi.decode(\n            vm.parseBytes(vm.readFile(_systemContractsFilePath)),\n            (SystemContractInfo[])\n        );\n\n        // Deploy the Sphinx system contracts. This is necessary because several Sphinx and Gnosis\n        // Safe contracts are required to deploy a Gnosis Safe, which itself must be deployed\n        // because we're going to call the Gnosis Safe to estimate the gas. Also, deploying the\n        // Gnosis Safe ensures that its nonce is treated like a contract instead of an EOA.\n        sphinxUtils.deploySphinxSystem(systemContracts);\n\n        FoundryDeploymentInfo memory deploymentInfo = sphinxCollect(\n            _executionMode,\n            deployer,\n            _scriptFunctionCalldata,\n            2\n        );\n        vm.writeFile(\n            _deploymentInfoPath,\n            sphinxUtils.serializeFoundryDeploymentInfo(deploymentInfo)\n        );\n    }\n\n    function sphinxCollect(\n        ExecutionMode _executionMode,\n        address _executor,\n        bytes memory _scriptFunctionCalldata,\n        uint64 _callDepth\n    ) private returns (FoundryDeploymentInfo memory) {\n        address safe = safeAddress();\n\n        FoundryDeploymentInfo memory deploymentInfo = sphinxUtils.initializeDeploymentInfo(\n            sphinxConfig,\n            _executionMode,\n            _executor,\n            address(this)\n        );\n\n        // Deploy the Gnosis Safe if it's not already deployed. This is necessary because we're\n        // going to call the Gnosis Safe to estimate the gas.\n        // This also also ensures that the safe's nonce is incremented as a contract instead of an EOA.\n        if (address(safe).code.length == 0) {\n            sphinxUtils.deployModuleAndGnosisSafe(\n                deploymentInfo.newConfig.owners,\n                deploymentInfo.newConfig.threshold,\n                safe\n            );\n        }\n\n        // Take a snapshot of the current state. We'll revert to the snapshot after we run the\n        // user's script but before we execute the user's transactions via the Gnosis Safe to\n        // estimate the Merkle leaf gas fields. It's necessary to revert the snapshot because the\n        // gas estimation won't work if it runs against chain state where the user's transactions\n        // have already occurred.\n        uint256 snapshotId = vm.snapshot();\n\n        // Record the starting balance of the Safe\n        safeStartingBalance[deploymentInfo.chainId] = safeAddress().balance;\n\n        vm.startStateDiffRecording();\n        // Delegatecall the entry point function on this contract to collect the transactions.\n        (bool success, ) = address(this).delegatecall(_scriptFunctionCalldata);\n        // Throw an error if the deployment script fails. The error message in the user's script is\n        // displayed by Foundry's stack trace, so it'd be redundant to include the data returned by\n        // the delegatecall in our error message.\n        require(success, \"Sphinx: Deployment script failed.\");\n        Vm.AccountAccess[] memory accesses = vm.stopAndReturnStateDiff();\n        // Set the `deployedCode` field for each AccountAccess of kind `Create`. There may be a bug\n        // in Foundry that causes this field to not always be populated.\n        for (uint256 i = 0; i < accesses.length; i++) {\n            if (accesses[i].kind == VmSafe.AccountAccessKind.Create) {\n                accesses[i].deployedCode = accesses[i].account.code;\n            }\n        }\n\n        // We have to copy fundsRequestedForSafe and safeStartingBalance into deploymentInfo before\n        // calling vm.revertTo because that cheatcode will clear the state variables.\n        deploymentInfo.fundsRequestedForSafe = fundsRequestedForSafe[deploymentInfo.chainId];\n        deploymentInfo.safeStartingBalance = safeStartingBalance[deploymentInfo.chainId];\n\n        // Check that the amount of funds requested for the Safe is valid\n        sphinxUtils.checkValidSafeFundingRequest(\n            deploymentInfo.fundsRequestedForSafe,\n            deploymentInfo.chainId\n        );\n\n        vm.revertTo(snapshotId);\n\n        return\n            sphinxUtils.finalizeDeploymentInfo(deploymentInfo, accesses, _callDepth, address(this));\n    }\n\n    /**\n     * @notice A modifier that the user must include on their entry point function when using Sphinx.\n     *         This modifier mainly performs validation on the user's configuration and environment.\n     */\n    modifier sphinx() {\n        sphinxModifierEnabled = true;\n\n        (VmSafe.CallerMode callerMode, address msgSender, ) = vm.readCallers();\n        require(\n            callerMode != VmSafe.CallerMode.Broadcast,\n            \"Sphinx: You must broadcast deployments using the 'sphinx deploy' CLI command.\"\n        );\n        require(\n            callerMode != VmSafe.CallerMode.RecurrentBroadcast,\n            \"Sphinx: You must broadcast deployments using the 'sphinx deploy' CLI command.\"\n        );\n        require(\n            callerMode != VmSafe.CallerMode.Prank,\n            \"Sphinx: Cannot call Sphinx using vm.prank. Please use vm.startPrank instead.\"\n        );\n\n        // We allow users to call `vm.startPrank` before calling their `deploy` function so that\n        // they don't need to toggle it before and after calling `deploy`, which may be annoying for\n        // users who have complex deployment flows. However, we turn pranking off here because we'll\n        // prank the Gnosis Safe during the execution process, since this is the contract that\n        // deploys their contracts on live networks. If the user enabled pranking before calling\n        // `deploy`, then we'll turn it back on at the end of this modifier.\n        if (callerMode == VmSafe.CallerMode.RecurrentPrank) vm.stopPrank();\n\n        sphinxUtils.fetchAndValidateConfig(address(this));\n\n        // Prank the Gnosis Safe then execute the user's script. We prank the Gnosis\n        // Safe to replicate the production environment.\n        vm.startPrank(safeAddress());\n        _;\n        vm.stopPrank();\n\n        if (callerMode == VmSafe.CallerMode.RecurrentPrank) vm.startPrank(msgSender);\n\n        sphinxModifierEnabled = false;\n    }\n\n    /**\n     * @notice Get the address of the SphinxModule. Before calling this function, the\n     *         `sphinxConfig.owners` array and `sphinxConfig.threshold` must be set.\n     */\n    function sphinxModule() public returns (address) {\n        return sphinxUtils.getSphinxModuleAddress(address(this));\n    }\n\n    /**\n     * @notice Get the address of the Gnosis Safe. Before calling this function, the\n     *         `sphinxConfig.owners` array and `sphinxConfig.threshold` must be set.\n     */\n    function safeAddress() public returns (address) {\n        return sphinxUtils.getGnosisSafeProxyAddress(address(this));\n    }\n\n    /**\n     * @notice Utility function that allows the user to transfer funds to their Safe at\n     * the beginning of a deployment. A utility function is required for this (vs just\n     * using _to.call{value: _amount} or transfer()) because this features involves the\n     * DevOps platform transferring funds directly to the safe from an EOA as part of the\n     * deployment. _to.call{value: _amount} or transfer() can be used to transfer value\n     * from the Safe to other addresses.\n     */\n    function fundSafe(uint _value) public {\n        fundsRequestedForSafe[block.chainid] += _value;\n\n        // Update the balance of the safe to equal to Safe's current balance + the\n        // value that we will transfer to the Safe during the deployment.\n        address safe = safeAddress();\n        vm.deal(safe, safe.balance + _value);\n    }\n\n    function getSphinxNetwork(uint256 _chainId) public view returns (Network) {\n        NetworkInfo[] memory all = sphinxUtils.getNetworkInfoArray();\n        for (uint256 i = 0; i < all.length; i++) {\n            if (all[i].chainId == _chainId) {\n                return all[i].network;\n            }\n        }\n        revert(\n            string(abi.encodePacked(\"No network found with the chain ID: \", vm.toString(_chainId)))\n        );\n    }\n\n    /**\n     * @notice Return the user's config ABI encoded. This is useful for retrieving the config\n     *         off-chain. We ABI encode the config because it's difficult to decode complex\n     *         data types that are returned by invoking Forge scripts.\n     */\n    function userSphinxConfigABIEncoded() public returns (bytes memory) {\n        UserSphinxConfig memory config = sphinxUtils.fetchAndValidateConfig(address(this));\n        return abi.encode(config, safeAddress(), sphinxModule());\n    }\n}\n"
          },
          "lib/sphinx/packages/contracts/contracts/foundry/SphinxConstants.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport { NetworkInfo, NetworkType } from \"./SphinxPluginTypes.sol\";\n\ncontract SphinxConstants {\n  string public constant sphinxLibraryVersion = 'v0.1.22';\n  address public constant compatibilityFallbackHandlerAddress = 0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4;\n  address public constant multiSendAddress = 0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761;\n  address public constant createCallAddress = 0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4;\n  address public constant sphinxModuleProxyFactoryAddress = 0x8f3301c9Eada5642B5bB12FD047D3EBb2932E619;\n  address public constant managedServiceAddress = 0x7e16116661CA8d66C73612382833153911Fa03B1;\n  address public constant safeFactoryAddress = 0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2;\n  address public constant safeSingletonAddress = 0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552;\n  address public constant sphinxModuleImplAddress = 0x8f4E4d51B8050B0ff713eff1F88f3dD8b5e8a530;\n\n  uint8 internal constant numSupportedNetworks = 56;\n\n  function getNetworkInfoArray() public pure returns (NetworkInfo[] memory) {\n    NetworkInfo[] memory all = new NetworkInfo[](numSupportedNetworks);\n    all[0] = NetworkInfo({\n      network: Network.anvil,\n      name: \"anvil\",\n      chainId: 31337,\n      networkType: NetworkType.Local,\n      dripSize: 1000000000000000000,\n      dripSizeString: '1 ETH'\n    });\n    all[1] = NetworkInfo({\n      network: Network.ethereum,\n      name: \"ethereum\",\n      chainId: 1,\n      networkType: NetworkType.Mainnet,\n      dripSize: 150000000000000000,\n      dripSizeString: '0.15 ETH'\n    });\n    all[2] = NetworkInfo({\n      network: Network.sepolia,\n      name: \"sepolia\",\n      chainId: 11155111,\n      networkType: NetworkType.Testnet,\n      dripSize: 1000000000000000000,\n      dripSizeString: '1 ETH'\n    });\n    all[3] = NetworkInfo({\n      network: Network.optimism,\n      name: \"optimism\",\n      chainId: 10,\n      networkType: NetworkType.Mainnet,\n      dripSize: 25000000000000000,\n      dripSizeString: '0.025 ETH'\n    });\n    all[4] = NetworkInfo({\n      network: Network.optimism_sepolia,\n      name: \"optimism_sepolia\",\n      chainId: 11155420,\n      networkType: NetworkType.Testnet,\n      dripSize: 150000000000000000,\n      dripSizeString: '0.15 ETH'\n    });\n    all[5] = NetworkInfo({\n      network: Network.arbitrum,\n      name: \"arbitrum\",\n      chainId: 42161,\n      networkType: NetworkType.Mainnet,\n      dripSize: 25000000000000000,\n      dripSizeString: '0.025 ETH'\n    });\n    all[6] = NetworkInfo({\n      network: Network.arbitrum_sepolia,\n      name: \"arbitrum_sepolia\",\n      chainId: 421614,\n      networkType: NetworkType.Testnet,\n      dripSize: 150000000000000000,\n      dripSizeString: '0.15 ETH'\n    });\n    all[7] = NetworkInfo({\n      network: Network.polygon,\n      name: \"polygon\",\n      chainId: 137,\n      networkType: NetworkType.Mainnet,\n      dripSize: 1000000000000000000,\n      dripSizeString: '1 MATIC'\n    });\n    all[8] = NetworkInfo({\n      network: Network.polygon_amoy,\n      name: \"polygon_amoy\",\n      chainId: 80002,\n      networkType: NetworkType.Testnet,\n      dripSize: 1000000000000000000,\n      dripSizeString: '1 MATIC'\n    });\n    all[9] = NetworkInfo({\n      network: Network.bnb,\n      name: \"bnb\",\n      chainId: 56,\n      networkType: NetworkType.Mainnet,\n      dripSize: 50000000000000000,\n      dripSizeString: '0.05 BNB'\n    });\n    all[10] = NetworkInfo({\n      network: Network.bnb_testnet,\n      name: \"bnb_testnet\",\n      chainId: 97,\n      networkType: NetworkType.Testnet,\n      dripSize: 150000000000000000,\n      dripSizeString: '0.15 BNB'\n    });\n    all[11] = NetworkInfo({\n      network: Network.gnosis,\n      name: \"gnosis\",\n      chainId: 100,\n      networkType: NetworkType.Mainnet,\n      dripSize: 1000000000000000000,\n      dripSizeString: '1 xDAI'\n    });\n    all[12] = NetworkInfo({\n      network: Network.gnosis_chiado,\n      name: \"gnosis_chiado\",\n      chainId: 10200,\n      networkType: NetworkType.Testnet,\n      dripSize: 150000000000000000,\n      dripSizeString: '0.15 xDAI'\n    });\n    all[13] = NetworkInfo({\n      network: Network.linea,\n      name: \"linea\",\n      chainId: 59144,\n      networkType: NetworkType.Mainnet,\n      dripSize: 25000000000000000,\n      dripSizeString: '0.025 ETH'\n    });\n    all[14] = NetworkInfo({\n      network: Network.linea_sepolia,\n      name: \"linea_sepolia\",\n      chainId: 59141,\n      networkType: NetworkType.Testnet,\n      dripSize: 150000000000000000,\n      dripSizeString: '0.15 ETH'\n    });\n    all[15] = NetworkInfo({\n      network: Network.polygon_zkevm,\n      name: \"polygon_zkevm\",\n      chainId: 1101,\n      networkType: NetworkType.Mainnet,\n      dripSize: 25000000000000000,\n      dripSizeString: '0.025 ETH'\n    });\n    all[16] = NetworkInfo({\n      network: Network.polygon_zkevm_cardona,\n      name: \"polygon_zkevm_cardona\",\n      chainId: 2442,\n      networkType: NetworkType.Testnet,\n      dripSize: 150000000000000000,\n      dripSizeString: '0.15 ETH'\n    });\n    all[17] = NetworkInfo({\n      network: Network.avalanche,\n      name: \"avalanche\",\n      chainId: 43114,\n      networkType: NetworkType.Mainnet,\n      dripSize: 1000000000000000000,\n      dripSizeString: '1 AVAX'\n    });\n    all[18] = NetworkInfo({\n      network: Network.avalanche_fuji,\n      name: \"avalanche_fuji\",\n      chainId: 43113,\n      networkType: NetworkType.Testnet,\n      dripSize: 1000000000000000000,\n      dripSizeString: '1 AVAX'\n    });\n    all[19] = NetworkInfo({\n      network: Network.fantom,\n      name: \"fantom\",\n      chainId: 250,\n      networkType: NetworkType.Mainnet,\n      dripSize: 1000000000000000000,\n      dripSizeString: '1 FTM'\n    });\n    all[20] = NetworkInfo({\n      network: Network.fantom_testnet,\n      name: \"fantom_testnet\",\n      chainId: 4002,\n      networkType: NetworkType.Testnet,\n      dripSize: 1000000000000000000,\n      dripSizeString: '1 FTM'\n    });\n    all[21] = NetworkInfo({\n      network: Network.base,\n      name: \"base\",\n      chainId: 8453,\n      networkType: NetworkType.Mainnet,\n      dripSize: 25000000000000000,\n      dripSizeString: '0.025 ETH'\n    });\n    all[22] = NetworkInfo({\n      network: Network.base_sepolia,\n      name: \"base_sepolia\",\n      chainId: 84532,\n      networkType: NetworkType.Testnet,\n      dripSize: 150000000000000000,\n      dripSizeString: '0.15 ETH'\n    });\n    all[23] = NetworkInfo({\n      network: Network.celo,\n      name: \"celo\",\n      chainId: 42220,\n      networkType: NetworkType.Mainnet,\n      dripSize: 1000000000000000000,\n      dripSizeString: '1 CELO'\n    });\n    all[24] = NetworkInfo({\n      network: Network.celo_alfajores,\n      name: \"celo_alfajores\",\n      chainId: 44787,\n      networkType: NetworkType.Testnet,\n      dripSize: 150000000000000000,\n      dripSizeString: '0.15 CELO'\n    });\n    all[25] = NetworkInfo({\n      network: Network.moonriver,\n      name: \"moonriver\",\n      chainId: 1285,\n      networkType: NetworkType.Mainnet,\n      dripSize: 150000000000000000,\n      dripSizeString: '0.15 MOVR'\n    });\n    all[26] = NetworkInfo({\n      network: Network.moonbeam,\n      name: \"moonbeam\",\n      chainId: 1284,\n      networkType: NetworkType.Mainnet,\n      dripSize: 1000000000000000000,\n      dripSizeString: '1 GLMR'\n    });\n    all[27] = NetworkInfo({\n      network: Network.moonbase_alpha,\n      name: \"moonbase_alpha\",\n      chainId: 1287,\n      networkType: NetworkType.Testnet,\n      dripSize: 50000000000000000,\n      dripSizeString: '0.05 GLMR'\n    });\n    all[28] = NetworkInfo({\n      network: Network.fuse,\n      name: \"fuse\",\n      chainId: 122,\n      networkType: NetworkType.Mainnet,\n      dripSize: 1000000000000000000,\n      dripSizeString: '1 FUSE'\n    });\n    all[29] = NetworkInfo({\n      network: Network.evmos,\n      name: \"evmos\",\n      chainId: 9001,\n      networkType: NetworkType.Mainnet,\n      dripSize: 1000000000000000000,\n      dripSizeString: '1 EVMOS'\n    });\n    all[30] = NetworkInfo({\n      network: Network.evmos_testnet,\n      name: \"evmos_testnet\",\n      chainId: 9000,\n      networkType: NetworkType.Testnet,\n      dripSize: 15000000000000000,\n      dripSizeString: '0.015 EVMOS'\n    });\n    all[31] = NetworkInfo({\n      network: Network.kava,\n      name: \"kava\",\n      chainId: 2222,\n      networkType: NetworkType.Mainnet,\n      dripSize: 1000000000000000000,\n      dripSizeString: '1 KAVA'\n    });\n    all[32] = NetworkInfo({\n      network: Network.kava_testnet,\n      name: \"kava_testnet\",\n      chainId: 2221,\n      networkType: NetworkType.Testnet,\n      dripSize: 1000000000000000000,\n      dripSizeString: '1 KAVA'\n    });\n    all[33] = NetworkInfo({\n      network: Network.scroll,\n      name: \"scroll\",\n      chainId: 534352,\n      networkType: NetworkType.Mainnet,\n      dripSize: 25000000000000000,\n      dripSizeString: '0.025 ETH'\n    });\n    all[34] = NetworkInfo({\n      network: Network.scroll_sepolia,\n      name: \"scroll_sepolia\",\n      chainId: 534351,\n      networkType: NetworkType.Testnet,\n      dripSize: 150000000000000000,\n      dripSizeString: '0.15 ETH'\n    });\n    all[35] = NetworkInfo({\n      network: Network.rootstock,\n      name: \"rootstock\",\n      chainId: 30,\n      networkType: NetworkType.Mainnet,\n      dripSize: 1000000000000000,\n      dripSizeString: '0.001 RBTC'\n    });\n    all[36] = NetworkInfo({\n      network: Network.rootstock_testnet,\n      name: \"rootstock_testnet\",\n      chainId: 31,\n      networkType: NetworkType.Testnet,\n      dripSize: 1000000000000000,\n      dripSizeString: '0.001 RBTC'\n    });\n    all[37] = NetworkInfo({\n      network: Network.zora,\n      name: \"zora\",\n      chainId: 7777777,\n      networkType: NetworkType.Mainnet,\n      dripSize: 25000000000000000,\n      dripSizeString: '0.025 ETH'\n    });\n    all[38] = NetworkInfo({\n      network: Network.zora_sepolia,\n      name: \"zora_sepolia\",\n      chainId: 999999999,\n      networkType: NetworkType.Testnet,\n      dripSize: 150000000000000000,\n      dripSizeString: '0.15 ETH'\n    });\n    all[39] = NetworkInfo({\n      network: Network.rari,\n      name: \"rari\",\n      chainId: 1380012617,\n      networkType: NetworkType.Mainnet,\n      dripSize: 25000000000000000,\n      dripSizeString: '0.025 ETH'\n    });\n    all[40] = NetworkInfo({\n      network: Network.rari_sepolia,\n      name: \"rari_sepolia\",\n      chainId: 1918988905,\n      networkType: NetworkType.Testnet,\n      dripSize: 150000000000000000,\n      dripSizeString: '0.15 ETH'\n    });\n    all[41] = NetworkInfo({\n      network: Network.blast_sepolia,\n      name: \"blast_sepolia\",\n      chainId: 168587773,\n      networkType: NetworkType.Testnet,\n      dripSize: 25000000000000000,\n      dripSizeString: '0.025 ETH'\n    });\n    all[42] = NetworkInfo({\n      network: Network.blast,\n      name: \"blast\",\n      chainId: 81457,\n      networkType: NetworkType.Mainnet,\n      dripSize: 25000000000000000,\n      dripSizeString: '0.025 ETH'\n    });\n    all[43] = NetworkInfo({\n      network: Network.taiko_hekla,\n      name: \"taiko_hekla\",\n      chainId: 167009,\n      networkType: NetworkType.Testnet,\n      dripSize: 150000000000000000,\n      dripSizeString: '0.15 ETH'\n    });\n    all[44] = NetworkInfo({\n      network: Network.mode_sepolia,\n      name: \"mode_sepolia\",\n      chainId: 919,\n      networkType: NetworkType.Testnet,\n      dripSize: 150000000000000000,\n      dripSizeString: '0.15 ETH'\n    });\n    all[45] = NetworkInfo({\n      network: Network.mode,\n      name: \"mode\",\n      chainId: 34443,\n      networkType: NetworkType.Mainnet,\n      dripSize: 25000000000000000,\n      dripSizeString: '0.025 ETH'\n    });\n    all[46] = NetworkInfo({\n      network: Network.darwinia_koi,\n      name: \"darwinia_koi\",\n      chainId: 701,\n      networkType: NetworkType.Testnet,\n      dripSize: 1000000000000000000,\n      dripSizeString: '1 KRING'\n    });\n    all[47] = NetworkInfo({\n      network: Network.tanssi_pangoro,\n      name: \"tanssi_pangoro\",\n      chainId: 45,\n      networkType: NetworkType.Testnet,\n      dripSize: 1000000000000000000,\n      dripSizeString: '1 ORING'\n    });\n    all[48] = NetworkInfo({\n      network: Network.mantle_sepolia,\n      name: \"mantle_sepolia\",\n      chainId: 5003,\n      networkType: NetworkType.Testnet,\n      dripSize: 5000000000000000000,\n      dripSizeString: '5 MNT'\n    });\n    all[49] = NetworkInfo({\n      network: Network.mantle,\n      name: \"mantle\",\n      chainId: 5000,\n      networkType: NetworkType.Mainnet,\n      dripSize: 5000000000000000000,\n      dripSizeString: '5 MNT'\n    });\n    all[50] = NetworkInfo({\n      network: Network.astar_zkyoto,\n      name: \"astar_zkyoto\",\n      chainId: 6038361,\n      networkType: NetworkType.Testnet,\n      dripSize: 150000000000000000,\n      dripSizeString: '0.15 ETH'\n    });\n    all[51] = NetworkInfo({\n      network: Network.astar,\n      name: \"astar\",\n      chainId: 3776,\n      networkType: NetworkType.Mainnet,\n      dripSize: 25000000000000000,\n      dripSizeString: '0.025 ETH'\n    });\n    all[52] = NetworkInfo({\n      network: Network.crab,\n      name: \"crab\",\n      chainId: 44,\n      networkType: NetworkType.Mainnet,\n      dripSize: 1000000000000000000,\n      dripSizeString: '1 CRAB'\n    });\n    all[53] = NetworkInfo({\n      network: Network.darwinia,\n      name: \"darwinia\",\n      chainId: 46,\n      networkType: NetworkType.Mainnet,\n      dripSize: 1000000000000000000,\n      dripSizeString: '1 RING'\n    });\n    all[54] = NetworkInfo({\n      network: Network.zircuit,\n      name: \"zircuit\",\n      chainId: 48900,\n      networkType: NetworkType.Mainnet,\n      dripSize: 1000000000000000,\n      dripSizeString: '0.001 ETH'\n    });\n    all[55] = NetworkInfo({\n      network: Network.morph,\n      name: \"morph\",\n      chainId: 2818,\n      networkType: NetworkType.Mainnet,\n      dripSize: 1000000000000000,\n      dripSizeString: '0.001 ETH'\n    });\n    return all;\n  }\n}\n\nenum Network {\n  anvil,\n  ethereum,\n  sepolia,\n  optimism,\n  optimism_sepolia,\n  arbitrum,\n  arbitrum_sepolia,\n  polygon,\n  polygon_amoy,\n  bnb,\n  bnb_testnet,\n  gnosis,\n  gnosis_chiado,\n  linea,\n  linea_sepolia,\n  polygon_zkevm,\n  polygon_zkevm_cardona,\n  avalanche,\n  avalanche_fuji,\n  fantom,\n  fantom_testnet,\n  base,\n  base_sepolia,\n  celo,\n  celo_alfajores,\n  moonriver,\n  moonbeam,\n  moonbase_alpha,\n  fuse,\n  evmos,\n  evmos_testnet,\n  kava,\n  kava_testnet,\n  scroll,\n  scroll_sepolia,\n  rootstock,\n  rootstock_testnet,\n  zora,\n  zora_sepolia,\n  rari,\n  rari_sepolia,\n  blast_sepolia,\n  blast,\n  taiko_hekla,\n  mode_sepolia,\n  mode,\n  darwinia_koi,\n  tanssi_pangoro,\n  mantle_sepolia,\n  mantle,\n  astar_zkyoto,\n  astar,\n  crab,\n  darwinia,\n  zircuit,\n  morph\n}\n"
          },
          "lib/sphinx/packages/contracts/contracts/foundry/SphinxForkCheck.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SphinxForkCheck {\n    constructor() {}\n}\n"
          },
          "lib/sphinx/packages/contracts/contracts/foundry/SphinxPlugin.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// This file allows the user to import all Sphinx contracts and data structures from a single file\n// instead of needing to find the exact location of the file they need to import. We currently only\n// import items that we have mentioned in the user-facing documentation.\n\nimport { Sphinx } from \"./Sphinx.sol\";\nimport { Network } from \"./SphinxConstants.sol\";\n"
          },
          "lib/sphinx/packages/contracts/contracts/foundry/SphinxPluginTypes.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { SphinxLeafType, SphinxLeaf, SphinxLeafWithProof } from \"../core/SphinxDataTypes.sol\";\nimport { Network } from \"./SphinxConstants.sol\";\nimport { IEnum } from \"./interfaces/IEnum.sol\";\nimport { Vm, VmSafe } from \"../../contracts/forge-std/src/Vm.sol\";\n\nstruct HumanReadableAction {\n    string reason;\n    uint256 actionIndex;\n}\n\nstruct SphinxMerkleTree {\n    bytes32 root;\n    SphinxLeafWithProof[] leavesWithProofs;\n}\n\nstruct GnosisSafeTransaction {\n    address to;\n    uint256 value;\n    bytes txData;\n    IEnum.GnosisSafeOperation operation;\n}\n\nstruct FoundryContractConfig {\n    string referenceName;\n    address addr;\n    ContractKindEnum kind;\n    bytes32 userSaltHash;\n}\n\nstruct ParsedCallAction {\n    address to;\n    bytes data;\n    uint256 nonce;\n}\n\nenum ContractKindEnum {\n    INTERNAL_DEFAULT,\n    OZ_TRANSPARENT,\n    OZ_OWNABLE_UUPS,\n    OZ_ACCESS_CONTROL_UUPS,\n    EXTERNAL_DEFAULT,\n    IMMUTABLE\n}\n\nstruct ConfigContractInfo {\n    string referenceName;\n    address contractAddress;\n}\n\nstruct OptionalAddress {\n    address value;\n    bool exists;\n}\n\nstruct OptionalBool {\n    bool value;\n    bool exists;\n}\n\nstruct OptionalString {\n    string value;\n    bool exists;\n}\n\nstruct OptionalBytes32 {\n    bytes32 value;\n    bool exists;\n}\n\nstruct ParsedAccountAccess {\n    Vm.AccountAccess root;\n    Vm.AccountAccess[] nested;\n}\n\n/**\n * @notice Contains all of the information that's collected in a deployment on a single chain.\n *         The only difference between this struct and the TypeScript `DeploymentInfo` object is\n *         that the latter has an `accountAccesses` array of `ParsedAccountAccess` elements, whereas\n *         this struct has an `encodedAccountAccesses` bytes array of `ParsedAccountAccess`\n *         elements.\n *\n * @custom:field encodedAccountAccesses An array of ABI encoded `ParsedAccountAccess` structs. We\n *                                      ABI encode each `ParsedAccountAccess` struct individually so\n *                                      that we can decode them in TypeScript. Specifically, if we\n *                                      ABI encode the entire array of `ParsedAccountAccess`\n *                                      elements, the encoded bytes will be too large for EthersJS\n *                                      to ABI decode, which causes an error. This occurs for large\n *                                      deployments, i.e. greater than 50 contracts.\n */\nstruct FoundryDeploymentInfo {\n    address safeAddress;\n    address moduleAddress;\n    address executorAddress;\n    uint256 nonce;\n    uint256 chainId;\n    uint256 blockGasLimit;\n    uint256 blockNumber;\n    bytes safeInitData;\n    bool requireSuccess;\n    InternalSphinxConfig newConfig;\n    ExecutionMode executionMode;\n    InitialChainState initialState;\n    bool arbitraryChain;\n    string sphinxLibraryVersion;\n    bytes[] encodedAccountAccesses;\n    uint256[] gasEstimates;\n    uint fundsRequestedForSafe;\n    uint safeStartingBalance;\n}\n\nenum ExecutionMode {\n    LocalNetworkCLI,\n    LiveNetworkCLI,\n    Platform\n}\n\n/**\n * @notice Contains the values of a few state variables which are retrieved on-chain *before* the\n *         deployment occurs. These determine various aspects of the deployment.\n *\n * @custom:field isSafeDeployed   True if the user's Safe has been deployed. If false, we'll\n *                                need to deploy the Safe before the deployment occurs.\n * @custom:field isModuleDeployed True if the `SphinxModuleProxy` has been deployed.\n * @custom:field isExecuting      True if there's currently an active deployment in the user's\n *                                SphinxModuleProxy. If so, we cancel the existing deployment, since\n *                                an existing active deployment implies that an error occurred in\n *                                one of the user's contracts during that deployment.\n */\nstruct InitialChainState {\n    bool isSafeDeployed;\n    bool isModuleDeployed;\n    bool isExecuting;\n}\n\nstruct UserSphinxConfig {\n    string projectName;\n    string[] mainnets;\n    string[] testnets;\n}\n\nstruct InternalSphinxConfig {\n    string projectName;\n    address[] owners;\n    uint256 threshold;\n    string orgId;\n    string[] mainnets;\n    string[] testnets;\n    uint256 saltNonce;\n}\n\nstruct DeployOptions {\n    bytes32 salt;\n    string referenceName;\n}\n\nenum NetworkType {\n    Mainnet,\n    Testnet,\n    Local\n}\n\nstruct NetworkInfo {\n    Network network;\n    string name;\n    uint256 chainId;\n    NetworkType networkType;\n    uint256 dripSize;\n    string dripSizeString;\n}\n\nstruct Wallet {\n    uint256 privateKey;\n    address addr;\n}\n\n/**\n * @notice Version number as a struct.\n *\n * @custom:field major Major version number.\n * @custom:field minor Minor version number.\n * @custom:field patch Patch version number.\n */\nstruct Version {\n    uint256 major;\n    uint256 minor;\n    uint256 patch;\n}\n\n/**\n * @notice Contract info for a contract that's required for Sphinx to work on a network. These are\n *         mostly Gnosis Safe contracts.\n */\nstruct SystemContractInfo {\n    bytes initCodeWithArgs;\n    address expectedAddress;\n}\n\n/**\n * @notice The DefaultSafe is the Gnosis Safe that is used by default when deploying with a project.\n * In the future, we will likely support having multiple Safes that can be shared between different\n * projects.\n *\n * Currently, we only support a 1-to-1 relationship between projects and Safes, so we only track the\n * default Safe for each project.\n */\nstruct DefaultSafe {\n    address[] owners;\n    string safeName;\n    uint saltNonce;\n    uint threshold;\n}\n\nstruct SphinxLockProject {\n    DefaultSafe defaultSafe;\n    string projectName;\n    string orgId;\n}\n\n/**\n * @notice Provides an easy way to get complex data types off-chain (via the ABI) without\n *         needing to hard-code them.\n */\ncontract SphinxPluginTypes {\n    function sphinxMerkleTreeType()\n        external\n        pure\n        returns (SphinxMerkleTree memory merkleTreeType)\n    {}\n\n    function humanReadableActionsType()\n        external\n        pure\n        returns (HumanReadableAction[] memory humanReadableActions)\n    {}\n\n    function deployTaskInputsType()\n        external\n        pure\n        returns (\n            SphinxMerkleTree memory merkleTree,\n            HumanReadableAction[] memory humanReadableActions\n        )\n    {}\n\n    function parsedAccountAccessType()\n        external\n        view\n        returns (ParsedAccountAccess memory parsedAccountAccess)\n    {}\n\n    function getDeploymentInfo()\n        external\n        view\n        returns (FoundryDeploymentInfo memory deploymentInfo)\n    {}\n\n    function getDeploymentInfoArray()\n        external\n        view\n        returns (FoundryDeploymentInfo[] memory deploymentInfoArray)\n    {}\n\n    function userSphinxConfigType()\n        external\n        view\n        returns (UserSphinxConfig memory userSphinxConfig)\n    {}\n\n    function systemContractInfoArrayType()\n        external\n        view\n        returns (SystemContractInfo[] memory systemContracts)\n    {}\n\n    function sphinxLeafWithProofType()\n        external\n        view\n        returns (SphinxLeafWithProof memory leafWithProof)\n    {}\n\n    function leafWithProofBatchesType()\n        external\n        view\n        returns (SphinxLeafWithProof[][] memory batches)\n    {}\n}\n"
          },
          "lib/sphinx/packages/contracts/contracts/foundry/SphinxUtils.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { Vm, VmSafe } from \"../../contracts/forge-std/src/Vm.sol\";\nimport { StdUtils } from \"../../contracts/forge-std/src/StdUtils.sol\";\n\nimport { ISphinxModule } from \"../core/interfaces/ISphinxModule.sol\";\nimport { ISphinxModuleProxyFactory } from \"../core/interfaces/ISphinxModuleProxyFactory.sol\";\nimport {\n    SphinxLeafWithProof,\n    SphinxLeaf,\n    SphinxLeafType,\n    MerkleRootStatus\n} from \"../core/SphinxDataTypes.sol\";\nimport {\n    SphinxMerkleTree,\n    FoundryDeploymentInfo,\n    HumanReadableAction,\n    NetworkInfo,\n    NetworkType,\n    Network,\n    InternalSphinxConfig,\n    InitialChainState,\n    OptionalAddress,\n    Wallet,\n    ExecutionMode,\n    SystemContractInfo,\n    GnosisSafeTransaction,\n    ParsedAccountAccess,\n    SphinxLockProject,\n    DefaultSafe,\n    SphinxLockProject,\n    UserSphinxConfig\n} from \"./SphinxPluginTypes.sol\";\nimport { SphinxConstants } from \"./SphinxConstants.sol\";\nimport { ICreateCall } from \"./interfaces/ICreateCall.sol\";\nimport { IGnosisSafeProxyFactory } from \"./interfaces/IGnosisSafeProxyFactory.sol\";\nimport { IGnosisSafe } from \"./interfaces/IGnosisSafe.sol\";\nimport { IMultiSend } from \"./interfaces/IMultiSend.sol\";\nimport { IEnum } from \"./interfaces/IEnum.sol\";\n\ninterface ISphinxScript {\n    function sphinxFetchConfig() external view returns (UserSphinxConfig memory);\n    function configureSphinx() external;\n}\n\ncontract SphinxUtils is SphinxConstants {\n    // Ensures that this contract doesn't cause `forge build --sizes` to fail if this command is\n    // executed by the user. For context, see: https://github.com/foundry-rs/foundry/issues/4615\n    // Resolves:\n    // https://linear.app/chugsplash/issue/CHU-891/prevent-the-users-forge-build-sizes-call-from-failing-due-to\n    bool public IS_SCRIPT = true;\n\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    // Source: https://github.com/Arachnid/deterministic-deployment-proxy\n    address public constant DETERMINISTIC_DEPLOYMENT_PROXY =\n        0x4e59b44847b379578588920cA78FbF26c0B4956C;\n\n    // Object keys for the JSON serialization functions in this contract.\n    string internal initialStateKey = \"Sphinx_Internal__InitialChainState\";\n    string internal deploymentInfoKey = \"Sphinx_Internal__FoundryDeploymentInfo\";\n    string internal sphinxConfigKey = \"Sphinx_Internal__SphinxConfig\";\n\n    // Tracks if we've called the users `configureSphinx()` function yet\n    bool internal calledConfigureSphinx = false;\n\n    function checkValidSafeFundingRequest(uint _value, uint _chainId) public pure {\n        NetworkInfo memory info = findNetworkInfoByChainId(_chainId);\n        if (info.dripSize < _value) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"Sphinx: Gnosis Safe funding request exceeds the maximum value allowed on \",\n                        info.name,\n                        \". Please update your script to request less than or equal to the maximum value of \",\n                        info.dripSizeString\n                    )\n                )\n            );\n        }\n    }\n\n    function checkAccesses(\n        Vm.AccountAccess[] memory accountAccesses,\n        bytes32 creationCodeHash,\n        bytes32 runtimeCodeHash\n    ) public view returns (bool) {\n        // If there aren't two calls, (one to the deployment proxy, and another to deploy the contract)\n        // then return false.\n        if (accountAccesses.length < 2) {\n            return false;\n        }\n\n        // If the first access does not record calling deterministic deployment proxy, then return false.\n        if (accountAccesses[0].account != DETERMINISTIC_DEPLOYMENT_PROXY) {\n            return false;\n        }\n\n        address expectedAddress = vm.computeCreate2Address(\n            0,\n            creationCodeHash,\n            DETERMINISTIC_DEPLOYMENT_PROXY\n        );\n        if (accountAccesses[1].account != expectedAddress) {\n            return false;\n        }\n\n        // If the second access did not come from the deterministic deployment proxy, then return false\n        if (accountAccesses[1].accessor != DETERMINISTIC_DEPLOYMENT_PROXY) {\n            return false;\n        }\n\n        // If the deployed code at the calculated address is incorrect, then return false.\n        // This confirms the deterministic deployment proxy is in fact being used for the\n        // internal simulation.\n        if (keccak256(address(expectedAddress).code) != runtimeCodeHash) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function sortAddresses(address[] memory _unsorted) private pure returns (address[] memory) {\n        address[] memory sorted = _unsorted;\n        for (uint256 i = 0; i < sorted.length; i++) {\n            for (uint256 j = i + 1; j < sorted.length; j++) {\n                if (sorted[i] > sorted[j]) {\n                    address temp = sorted[i];\n                    sorted[i] = sorted[j];\n                    sorted[j] = temp;\n                }\n            }\n        }\n        return sorted;\n    }\n\n    function getSphinxWalletPrivateKey(uint256 _num) private pure returns (uint256) {\n        return uint256(keccak256(abi.encode(\"sphinx.wallet\", _num)));\n    }\n\n    function getSphinxLibraryVersion() public pure returns (string memory) {\n        return sphinxLibraryVersion;\n    }\n\n    /**\n     * @notice Get auto-generated wallets sorted in ascending order according to their addresses.\n     *         We don't use `vm.createWallet` because this function must be view/pure, since it may\n     *         be called during a broadcast. If it's not view/pure, then this call would be\n     *         broadcasted, which is not what we want.\n     */\n    function getSphinxWalletsSortedByAddress(\n        uint256 _numWallets\n    ) internal pure returns (Wallet[] memory) {\n        Wallet[] memory wallets = new Wallet[](_numWallets);\n        for (uint256 i = 0; i < _numWallets; i++) {\n            uint256 privateKey = getSphinxWalletPrivateKey(i);\n            wallets[i] = Wallet({ addr: vm.addr(privateKey), privateKey: privateKey });\n        }\n\n        // Sort the wallets by address\n        for (uint256 i = 0; i < wallets.length; i++) {\n            for (uint256 j = i + 1; j < wallets.length; j++) {\n                if (wallets[i].addr > wallets[j].addr) {\n                    Wallet memory temp = wallets[i];\n                    wallets[i] = wallets[j];\n                    wallets[j] = temp;\n                }\n            }\n        }\n\n        return wallets;\n    }\n\n    function decodeApproveLeafData(\n        SphinxLeaf memory leaf\n    )\n        internal\n        pure\n        returns (\n            address leafSafeProxy,\n            address moduleProxy,\n            uint256 leafMerkleRootNonce,\n            uint256 numLeaves,\n            address executor,\n            string memory uri,\n            bool arbitraryChain\n        )\n    {\n        return abi.decode(leaf.data, (address, address, uint256, uint256, address, string, bool));\n    }\n\n    function findNetworkInfoByChainId(uint256 _chainId) internal pure returns (NetworkInfo memory) {\n        NetworkInfo[] memory all = getNetworkInfoArray();\n        for (uint256 i = 0; i < all.length; i++) {\n            if (all[i].chainId == _chainId) {\n                return all[i];\n            }\n        }\n        revert(\n            string(\n                abi.encodePacked(\n                    \"Sphinx: No network found with the given chain ID: \",\n                    vm.toString(_chainId)\n                )\n            )\n        );\n    }\n\n    function toString(address[] memory _ary) public pure returns (string memory) {\n        string memory result = \"\\n\";\n        for (uint256 i = 0; i < _ary.length; i++) {\n            result = string(abi.encodePacked(result, vm.toString(_ary[i])));\n            if (i != _ary.length - 1) {\n                result = string(abi.encodePacked(result, \"\\n\"));\n            }\n        }\n        result = string(abi.encodePacked(result));\n        return result;\n    }\n\n    function computeCreate3Address(address _deployer, bytes32 _salt) public pure returns (address) {\n        // Hard-coded bytecode of the proxy used by Create3 to deploy the contract. See the\n        // `CREATE3.sol`\n        // library for details.\n        bytes memory proxyBytecode = hex\"67363d3d37363d34f03d5260086018f3\";\n\n        address proxy = vm.computeCreate2Address(_salt, keccak256(proxyBytecode), _deployer);\n        return vm.computeCreateAddress(proxy, 1);\n    }\n\n    /**\n     * @notice Returns an array of addresses that appear more than once in the given array.\n     * @param _ary The unfiltered elements.\n     * @return duplicates The duplicated elements.\n     */\n    function getDuplicatedElements(address[] memory _ary) public pure returns (address[] memory) {\n        // We return early here because the for-loop below will throw an underflow error if the\n        // array is empty.\n        if (_ary.length == 0) return new address[](0);\n\n        address[] memory sorted = sortAddresses(_ary);\n        address[] memory duplicates = new address[](_ary.length);\n        uint256 numDuplicates = 0;\n        for (uint256 i = 0; i < sorted.length - 1; i++) {\n            if (sorted[i] == sorted[i + 1]) {\n                duplicates[numDuplicates] = sorted[i];\n                numDuplicates++;\n            }\n        }\n        address[] memory trimmed = new address[](numDuplicates);\n        for (uint256 i = 0; i < numDuplicates; i++) {\n            trimmed[i] = duplicates[i];\n        }\n        return trimmed;\n    }\n\n    function isConfigObjectEmpty(UserSphinxConfig memory _config) internal pure returns (bool) {\n        if (\n            _config.mainnets.length == 0 &&\n            _config.testnets.length == 0 &&\n            bytes(_config.projectName).length == 0\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function fetchAndValidateConfig(address _script) public returns (UserSphinxConfig memory) {\n        // We keep track of if we've called the configureSphinx() function yet or not so we\n        // can avoid situations where there would be an infinite loop due to user calling\n        // safeAddress() from their configureSphinx() function.\n        if (calledConfigureSphinx == false) {\n            calledConfigureSphinx = true;\n            ISphinxScript(_script).configureSphinx();\n        }\n\n        UserSphinxConfig memory config = ISphinxScript(_script).sphinxFetchConfig();\n        validate(config);\n        return config;\n    }\n\n    /**\n     * @notice Performs validation on the user's deployment. This mainly checks that the user's\n     *         configuration is valid. This validation occurs regardless of the `SphinxMode` (e.g.\n     *         proposals, broadcasting, etc).\n     */\n    function validate(UserSphinxConfig memory _config) public pure {\n        // We still explicitly check if the config is empty b/c you could define the sphinxConfig\n        // function, but not actually configure any options in it.\n        if (isConfigObjectEmpty(_config)) {\n            revert(\n                \"Sphinx: Detected missing Sphinx config. Are you sure you implemented the `configureSphinx` function correctly?\\nSee the configuration options reference for more information:\\nhttps://github.com/hujw77/sphinx/blob/master/docs/writing-scripts.md#configuration-options\"\n            );\n        }\n\n        require(\n            bytes(_config.projectName).length > 0,\n            \"Sphinx: Your 'sphinxConfig.projectName' cannot be an empty string. Please retrieve it from Sphinx's UI.\"\n        );\n    }\n\n    /**\n     * @notice Performs validation for a broadcast on a live network (i.e. not an Anvil or Hardhat\n     *         node).\n     */\n    function validateLiveNetworkCLI(IGnosisSafe _safe, address _script) external {\n        SphinxLockProject memory _project = fetchProjectFromLock(_script);\n        require(\n            _project.defaultSafe.owners.length == 1,\n            \"Sphinx: You cannot use the Deploy CLI with projects that have multiple owners.\"\n        );\n\n        // We use a try/catch instead of `vm.envOr` because `vm.envOr` is a potentially\n        // state-changing operation, which means this entire function would need to be marked as\n        // state-changing. However, we shouldn't do that because this call would be broadcasted.\n        uint256 privateKey;\n        try vm.envUint(\"PRIVATE_KEY\") returns (uint256 _privateKey) {\n            privateKey = _privateKey;\n        } catch {\n            revert(\"Sphinx: Did not detect 'PRIVATE_KEY' environment variable.\");\n        }\n\n        address deployer = vm.addr(privateKey);\n        require(\n            deployer == _project.defaultSafe.owners[0],\n            string(\n                abi.encodePacked(\n                    \"Sphinx: The address corresponding to your 'PRIVATE_KEY' environment variable must match the address in the 'owners' array.\\n\",\n                    \"Address of your env variable: \",\n                    vm.toString(deployer),\n                    \"\\n\",\n                    \"Address in the 'owners' array: \",\n                    vm.toString(_project.defaultSafe.owners[0])\n                )\n            )\n        );\n\n        if (address(_safe).code.length > 0) {\n            // Check that the deployer is the sole owner of the Gnosis Safe.\n            require(\n                _safe.isOwner(deployer),\n                \"Sphinx: The deployer must be an owner of the Gnosis Safe.\"\n            );\n            require(\n                _safe.getOwners().length == 1,\n                \"Sphinx: The deployer must be the only owner of the Gnosis Safe.\"\n            );\n        }\n    }\n\n    function getInitialChainState(\n        address _safe,\n        ISphinxModule _sphinxModule\n    ) private view returns (InitialChainState memory) {\n        if (address(_safe).code.length == 0) {\n            return\n                InitialChainState({\n                    isSafeDeployed: false,\n                    isModuleDeployed: false,\n                    isExecuting: false\n                });\n        } else {\n            bool isModuleDeployed = address(_sphinxModule).code.length > 0;\n            return\n                InitialChainState({\n                    isSafeDeployed: true,\n                    isModuleDeployed: isModuleDeployed,\n                    isExecuting: isModuleDeployed\n                        ? _sphinxModule.activeMerkleRoot() != bytes32(0)\n                        : false\n                });\n        }\n    }\n\n    function validateProposal(address _script) external {\n        fetchAndValidateConfig(_script);\n    }\n\n    function getGnosisSafeProxyInitCode() internal pure returns (bytes memory) {\n        return\n            hex\"608060405234801561001057600080fd5b506040516101e63803806101e68339818101604052602081101561003357600080fd5b8101908080519060200190929190505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156100ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806101c46022913960400191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060ab806101196000396000f3fe608060405273ffffffffffffffffffffffffffffffffffffffff600054167fa619486e0000000000000000000000000000000000000000000000000000000060003514156050578060005260206000f35b3660008037600080366000845af43d6000803e60008114156070573d6000fd5b3d6000f3fea2646970667358221220d1429297349653a4918076d650332de1a1068c5f3e07c5c82360c277770b955264736f6c63430007060033496e76616c69642073696e676c65746f6e20616464726573732070726f7669646564\";\n    }\n\n    function getGnosisSafeProxyAddress(address _script) public returns (address) {\n        (\n            bytes memory safeInitializerData,\n            SphinxLockProject memory project\n        ) = getGnosisSafeInitializerData(_script);\n\n        bytes32 salt = keccak256(\n            abi.encodePacked(keccak256(safeInitializerData), project.defaultSafe.saltNonce)\n        );\n        bytes memory safeProxyInitCode = getGnosisSafeProxyInitCode();\n        bytes memory deploymentData = abi.encodePacked(\n            safeProxyInitCode,\n            uint256(uint160(safeSingletonAddress))\n        );\n        address addr = vm.computeCreate2Address(\n            salt,\n            keccak256(deploymentData),\n            safeFactoryAddress\n        );\n        return addr;\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     *\n     * Note: Copied from openzeppelin/contracts\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    function getSphinxModuleAddress(address _script) public returns (address) {\n        address safeProxyAddress = getGnosisSafeProxyAddress(_script);\n        bytes32 salt = keccak256(\n            abi.encode(\n                safeProxyAddress,\n                safeProxyAddress,\n                // We always set the `saltNonce` of the Sphinx Module to `0` because the\n                // `sphinxConfig.saltNonce` field is only used when deploying the Gnosis Safe. It's\n                // not necessary to include the `saltNonce` here because a new Sphinx Module will be\n                // deployed if the user sets the `sphinxConfig.saltNonce` to a new value and then\n                // deploys a new Gnosis Safe using Sphinx's standard deployment method. A new Sphinx\n                // Module is deployed in this scenario because its address is determined by the\n                // address of the Gnosis Safe. It'd only be necessary to include a `saltNonce` for\n                // the Sphinx Module if a single Gnosis Safe wants to enable multiple Sphinx\n                // Modules, which isn't a feature that we currently support.\n                0\n            )\n        );\n        address addr = predictDeterministicAddress(\n            sphinxModuleImplAddress,\n            salt,\n            sphinxModuleProxyFactoryAddress\n        );\n        return addr;\n    }\n\n    /**\n     * @notice Encodes initializer data that will be submitted to a Gnosis Safe Proxy Factory to\n     *         deploy a Gnosis Safe, deploy a Sphinx Module, and enable the Sphinx Module in the\n     *         Gnosis Safe. We're able to deploy and enable the Sphinx Module in the same\n     *         transaction that we deploy the Gnosis Safe by executing a transaction in the\n     *         Gnosis Safe's `setup` function. Specifically, the `setup` function calls into\n     *         the Gnosis Safe's `setupModules` function, which calls into its `execute` function.\n     *         In the `execute` function, we batch two calls to the `SphinxModuleProxyFactory`:\n     *         1. `deploySphinxModuleProxyFromSafe`\n     *         2. `enableSphinxModuleProxyFromSafe`\n     *         We're able to these calls by using Gnosis Safe's `MultiSend` contract.\n     *\n     * @dev    We refer to this function in Sphinx's documentation. Make sure to update the\n     *         documentation if you change the name of this function or change its file\n     *         location.\n     */\n    function getGnosisSafeInitializerData(\n        address _script\n    ) internal returns (bytes memory safeInitializerData, SphinxLockProject memory project) {\n        project = fetchProjectFromLock(_script);\n\n        // Sort the owner addresses. This provides a consistent ordering, which makes it easier\n        // to calculate the `CREATE2` address of the Gnosis Safe off-chain.\n        address[] memory sortedOwners = sortAddresses(project.defaultSafe.owners);\n\n        ISphinxModuleProxyFactory moduleProxyFactory = ISphinxModuleProxyFactory(\n            sphinxModuleProxyFactoryAddress\n        );\n\n        // Encode the data that will deploy the Sphinx Module.\n        bytes memory encodedDeployModuleCall = abi.encodeWithSelector(\n            moduleProxyFactory.deploySphinxModuleProxyFromSafe.selector,\n            // Use the zero-hash as the salt.\n            bytes32(0)\n        );\n        // Encode the data in a format that can be executed using `MultiSend`.\n        bytes memory deployModuleMultiSendData = abi.encodePacked(\n            // We use `Call` so that the Gnosis Safe calls the `SphinxModuleProxyFactory` to deploy\n            // the Sphinx Module. This makes it easier for off-chain tooling to calculate the\n            // deployed Sphinx Module address because the `SphinxModuleProxyFactory`'s address is a\n            // global constant.\n            uint8(IEnum.GnosisSafeOperation.Call),\n            moduleProxyFactory,\n            uint256(0),\n            encodedDeployModuleCall.length,\n            encodedDeployModuleCall\n        );\n\n        // Encode the data that will enable the Sphinx Module in the Gnosis Safe.\n        bytes memory encodedEnableModuleCall = abi.encodeWithSelector(\n            moduleProxyFactory.enableSphinxModuleProxyFromSafe.selector,\n            // Use the zero-hash as the salt.\n            bytes32(0)\n        );\n        // Encode the data in a format that can be executed using `MultiSend`.\n        bytes memory enableModuleMultiSendData = abi.encodePacked(\n            // We can only enable the module by delegatecalling the `SphinxModuleProxyFactory`\n            // from the Gnosis Safe.\n            uint8(IEnum.GnosisSafeOperation.DelegateCall),\n            moduleProxyFactory,\n            uint256(0),\n            encodedEnableModuleCall.length,\n            encodedEnableModuleCall\n        );\n\n        // Encode the entire `MultiSend` data.\n        bytes memory multiSendData = abi.encodeWithSelector(\n            IMultiSend.multiSend.selector,\n            abi.encodePacked(deployModuleMultiSendData, enableModuleMultiSendData)\n        );\n\n        // Encode the call to the Gnosis Safe's `setup` function, which we'll submit to the Gnosis\n        // Safe Proxy Factory. This data contains the `MultiSend` data that we created above.\n        safeInitializerData = abi.encodePacked(\n            IGnosisSafe.setup.selector,\n            abi.encode(\n                sortedOwners,\n                project.defaultSafe.threshold,\n                multiSendAddress,\n                multiSendData,\n                // This is the default fallback handler used by Gnosis Safe during their\n                // standard deployments.\n                compatibilityFallbackHandlerAddress,\n                // The following fields are for specifying an optional payment as part of the\n                // deployment. We don't use them.\n                address(0),\n                0,\n                address(0)\n            )\n        );\n    }\n\n    function getMerkleRootNonce(ISphinxModule _module) public view returns (uint) {\n        if (address(_module).code.length == 0) {\n            return 0;\n        } else {\n            return _module.merkleRootNonce();\n        }\n    }\n\n    function create2Deploy(bytes memory _initCodeWithArgs) public returns (address) {\n        address addr = vm.computeCreate2Address(\n            bytes32(0),\n            keccak256(_initCodeWithArgs),\n            DETERMINISTIC_DEPLOYMENT_PROXY\n        );\n\n        if (addr.code.length == 0) {\n            bytes memory code = abi.encodePacked(bytes32(0), _initCodeWithArgs);\n            (bool success, ) = DETERMINISTIC_DEPLOYMENT_PROXY.call(code);\n            require(\n                success,\n                string(\n                    abi.encodePacked(\n                        \"failed to deploy contract. expected address: \",\n                        vm.toString(addr)\n                    )\n                )\n            );\n        }\n\n        return addr;\n    }\n\n    function deploySphinxSystem(SystemContractInfo[] memory _contracts) public {\n        vm.etch(\n            DETERMINISTIC_DEPLOYMENT_PROXY,\n            hex\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf3\"\n        );\n\n        for (uint256 i = 0; i < _contracts.length; i++) {\n            SystemContractInfo memory ct = _contracts[i];\n            address addr = create2Deploy(ct.initCodeWithArgs);\n            require(\n                addr == ct.expectedAddress,\n                string(\n                    abi.encodePacked(\n                        \"Sphinx: address mismatch. expected address: \",\n                        vm.toString(ct.expectedAddress)\n                    )\n                )\n            );\n        }\n    }\n\n    function getNumRootAccountAccesses(\n        Vm.AccountAccess[] memory _accesses,\n        address _safeAddress,\n        uint64 _callDepth,\n        uint256 _chainId\n    ) private view returns (uint256) {\n        uint256 count = 0;\n        for (uint256 i = 0; i < _accesses.length; i++) {\n            Vm.AccountAccess memory access = _accesses[i];\n\n            if (isRootAccountAccess(access, _safeAddress, _callDepth, _chainId)) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n\n    /**\n     * This function checks if a given AccountAccess struct is a \"root\" access meaning that it\n     * is a transaction in the users script that originates from their Safe.\n     *\n     * We consider an AccountAccess struct to be a root access if fits these conditions:\n     * - The accessor is the safe address, meaning the transaction originated from the safe.\n     * - The AccountAccessKind is either Call or Create. These types are the only ones that\n     * represent real transactions. However, if Foundry added support for deploying with the\n     * CREATE2 opcode instead of the default CREATE2 factory, then Create2 would probably be\n     * added as a kind here.\n     * - The call depth is equal to the input call depth, which has a default value of 2. The\n     * expected depth is 2 because the depth value starts at 1 and because we initiate the\n     * collection process by doing a delegatecall to the entry point function so the depth is 2 by\n     * the time any transactions get sent in the users script. The call depth will be greater than\n     * 2 in Forge tests, which is why this is an input parameter instead of a constant.\n     * - The target contract is not `SphinxUtils`. This can occur if the user calls a function\n     * that calls into this contract during their script. I.e calling safeAddress().\n     * - The chain ID of the account access is correct. It will differ if the user forks other\n     * networks in their script.\n     */\n    function isRootAccountAccess(\n        Vm.AccountAccess memory _access,\n        address _safeAddress,\n        uint64 _callDepth,\n        uint256 _chainId\n    ) private view returns (bool) {\n        return\n            _access.accessor == _safeAddress &&\n            _access.depth == _callDepth &&\n            _access.chainInfo.chainId == _chainId &&\n            _access.account != address(this) &&\n            (_access.kind == VmSafe.AccountAccessKind.Call ||\n                _access.kind == VmSafe.AccountAccessKind.Create);\n    }\n\n    function getNumNestedAccountAccesses(\n        Vm.AccountAccess[] memory _accesses,\n        uint256 _rootIdx,\n        address _safeAddress,\n        uint64 _callDepth,\n        uint256 _chainId\n    ) internal view returns (uint256) {\n        uint256 count = 0;\n        for (uint256 i = _rootIdx + 1; i < _accesses.length; i++) {\n            Vm.AccountAccess memory access = _accesses[i];\n            // If the current account access is a new root account access or exists on a different\n            // chain, we'll return from this function.\n            if (\n                isRootAccountAccess(access, _safeAddress, _callDepth, _chainId) ||\n                _chainId != access.chainInfo.chainId\n            ) {\n                return count;\n            } else {\n                count += 1;\n            }\n        }\n        return count;\n    }\n\n    /**\n     * @notice Serializes the `FoundryDeploymentInfo` struct. The serialized string is the\n     *         same structure as the `FoundryDeploymentInfo` struct except all `uint` and `string`\n     *         fields are ABI encoded (see inline docs for details).\n     */\n    function serializeFoundryDeploymentInfo(\n        FoundryDeploymentInfo memory _deployment\n    ) public returns (string memory) {\n        // Set the object key to an empty JSON, which ensures that there aren't any existing values\n        // stored in memory for the object key.\n        vm.serializeJson(deploymentInfoKey, \"{}\");\n\n        // Serialize simple fields\n        vm.serializeAddress(deploymentInfoKey, \"safeAddress\", _deployment.safeAddress);\n        vm.serializeAddress(deploymentInfoKey, \"moduleAddress\", _deployment.moduleAddress);\n        vm.serializeAddress(deploymentInfoKey, \"executorAddress\", _deployment.executorAddress);\n        vm.serializeBytes(deploymentInfoKey, \"safeInitData\", _deployment.safeInitData);\n        vm.serializeBool(deploymentInfoKey, \"requireSuccess\", _deployment.requireSuccess);\n        vm.serializeBool(deploymentInfoKey, \"arbitraryChain\", _deployment.arbitraryChain);\n        vm.serializeBytes(\n            deploymentInfoKey,\n            \"encodedAccountAccesses\",\n            _deployment.encodedAccountAccesses\n        );\n\n        // Next, we'll serialize `uint` values as ABI encoded bytes. We don't serialize them as\n        // numbers to prevent the possibility that they lose precision due JavaScript's relatively\n        // low integer size limit. We'll ABI decode these values in TypeScript. It'd be simpler to\n        // serialize the numbers as strings without ABI encoding them, but that strategy is blocked\n        // by a Foundry bug: https://github.com/foundry-rs/foundry/issues/6533\n        vm.serializeBytes(deploymentInfoKey, \"nonce\", abi.encode(_deployment.nonce));\n        vm.serializeBytes(deploymentInfoKey, \"chainId\", abi.encode(_deployment.chainId));\n        vm.serializeBytes(\n            deploymentInfoKey,\n            \"blockGasLimit\",\n            abi.encode(_deployment.blockGasLimit)\n        );\n        vm.serializeBytes(deploymentInfoKey, \"blockNumber\", abi.encode(_deployment.blockNumber));\n        vm.serializeBytes(\n            deploymentInfoKey,\n            \"executionMode\",\n            abi.encode(uint256(_deployment.executionMode))\n        );\n        vm.serializeBytes(\n            deploymentInfoKey,\n            \"fundsRequestedForSafe\",\n            abi.encode(_deployment.fundsRequestedForSafe)\n        );\n        vm.serializeBytes(\n            deploymentInfoKey,\n            \"safeStartingBalance\",\n            abi.encode(_deployment.safeStartingBalance)\n        );\n        // Serialize the gas estimates as an ABI encoded `uint256` array.\n        vm.serializeBytes(deploymentInfoKey, \"gasEstimates\", abi.encode(_deployment.gasEstimates));\n        // Serialize the Sphinx library version as an ABI encoded string. We ABI encode it to ensure\n        // that Foundry doesn't serialize it as a number, which will happen if the\n        // `sphinxLibraryVersion` consists only of numbers. If Foundry serializes it as a number,\n        // it'll be prone to the same precision loss due to JavaScript's low integer size limit.\n        vm.serializeBytes(\n            deploymentInfoKey,\n            \"sphinxLibraryVersion\",\n            abi.encode(_deployment.sphinxLibraryVersion)\n        );\n\n        // Serialize structs\n        vm.serializeString(\n            deploymentInfoKey,\n            \"newConfig\",\n            serializeSphinxConfig(_deployment.newConfig)\n        );\n        string memory finalJson = vm.serializeString(\n            deploymentInfoKey,\n            \"initialState\",\n            serializeInitialChainState(_deployment.initialState)\n        );\n\n        return finalJson;\n    }\n\n    function serializeSphinxConfig(\n        InternalSphinxConfig memory config\n    ) internal returns (string memory) {\n        // Set the object key to an empty JSON, which ensures that there aren't any existing values\n        // stored in memory for the object key.\n        vm.serializeJson(sphinxConfigKey, \"{}\");\n\n        vm.serializeAddress(sphinxConfigKey, \"owners\", config.owners);\n        vm.serializeString(sphinxConfigKey, \"mainnets\", config.mainnets);\n        vm.serializeString(sphinxConfigKey, \"testnets\", config.testnets);\n        // Serialize the string values as ABI encoded strings.\n        vm.serializeBytes(sphinxConfigKey, \"projectName\", abi.encode(config.projectName));\n        vm.serializeBytes(sphinxConfigKey, \"orgId\", abi.encode(config.orgId));\n        // Serialize the `uint` values as ABI encoded bytes.\n        vm.serializeBytes(sphinxConfigKey, \"saltNonce\", abi.encode(config.saltNonce));\n        string memory finalJson = vm.serializeBytes(\n            sphinxConfigKey,\n            \"threshold\",\n            abi.encode(config.threshold)\n        );\n\n        return finalJson;\n    }\n\n    function serializeInitialChainState(\n        InitialChainState memory _initialState\n    ) internal returns (string memory) {\n        // Set the object key to an empty JSON, which ensures that there aren't any existing values\n        // stored in memory for the object key.\n        vm.serializeJson(initialStateKey, \"{}\");\n\n        vm.serializeBool(initialStateKey, \"isSafeDeployed\", _initialState.isSafeDeployed);\n        vm.serializeBool(initialStateKey, \"isModuleDeployed\", _initialState.isModuleDeployed);\n        string memory finalJson = vm.serializeBool(\n            initialStateKey,\n            \"isExecuting\",\n            _initialState.isExecuting\n        );\n\n        return finalJson;\n    }\n\n    function fetchNumCreateAccesses(\n        Vm.AccountAccess[] memory _accesses,\n        uint256 _chainId\n    ) public pure returns (uint) {\n        uint numCreateAccesses = 0;\n        for (uint i = 0; i < _accesses.length; i++) {\n            if (isCreateAccountAccess(_accesses[i], _chainId)) {\n                numCreateAccesses += 1;\n            }\n        }\n        return numCreateAccesses;\n    }\n\n    function isCreateAccountAccess(\n        Vm.AccountAccess memory _access,\n        uint256 _chainId\n    ) private pure returns (bool) {\n        return\n            _access.kind == VmSafe.AccountAccessKind.Create &&\n            _access.chainInfo.chainId == _chainId;\n    }\n\n    function parseAccountAccesses(\n        Vm.AccountAccess[] memory _accesses,\n        address _safeAddress,\n        uint64 _callDepth,\n        uint256 _chainId\n    ) internal view returns (ParsedAccountAccess[] memory) {\n        uint256 numRoots = getNumRootAccountAccesses(_accesses, _safeAddress, _callDepth, _chainId);\n\n        ParsedAccountAccess[] memory parsed = new ParsedAccountAccess[](numRoots);\n        uint256 rootCount = 0;\n        for (uint256 rootIdx = 0; rootIdx < _accesses.length; rootIdx++) {\n            Vm.AccountAccess memory access = _accesses[rootIdx];\n\n            if (isRootAccountAccess(access, _safeAddress, _callDepth, _chainId)) {\n                uint256 numNested = getNumNestedAccountAccesses(\n                    _accesses,\n                    rootIdx,\n                    _safeAddress,\n                    _callDepth,\n                    _chainId\n                );\n                Vm.AccountAccess[] memory nested = new Vm.AccountAccess[](numNested);\n                for (uint256 nestedIdx = 0; nestedIdx < numNested; nestedIdx++) {\n                    // Calculate the index of the current nested `AccountAccess` in the `_accesses`\n                    // array. This index starts after the index of the root element (`rootIdx + 1`),\n                    // then adds the offset (`nestedIdx`) to iterate through subsequent nested\n                    // elements.\n                    uint256 accessesIndex = rootIdx + nestedIdx + 1;\n\n                    nested[nestedIdx] = _accesses[accessesIndex];\n                }\n                parsed[rootCount] = ParsedAccountAccess({ root: access, nested: nested });\n                rootCount += 1;\n            }\n        }\n        return parsed;\n    }\n\n    /**\n     * @notice Converts an `AccountAccess` struct to a struct that can be executed from a Gnosis Safe\n     *         via `GnosisSafe.execTransactionFromModule`.\n     */\n    function makeGnosisSafeTransaction(\n        Vm.AccountAccess memory _access\n    ) internal pure returns (GnosisSafeTransaction memory) {\n        if (_access.kind == VmSafe.AccountAccessKind.Create) {\n            // `Create` transactions are executed by delegatecalling the `CreateCall`\n            // contract from the Gnosis Safe.\n            return\n                GnosisSafeTransaction({\n                    operation: IEnum.GnosisSafeOperation.DelegateCall,\n                    // The `value` field is always unused for `DelegateCall` operations.\n                    // Instead, value is transferred via `performCreate` below.\n                    value: 0,\n                    to: createCallAddress,\n                    txData: abi.encodePacked(\n                        ICreateCall.performCreate.selector,\n                        abi.encode(_access.value, _access.data)\n                    )\n                });\n        } else if (_access.kind == VmSafe.AccountAccessKind.Call) {\n            return\n                GnosisSafeTransaction({\n                    operation: IEnum.GnosisSafeOperation.Call,\n                    value: _access.value,\n                    to: _access.account,\n                    txData: _access.data\n                });\n        } else {\n            revert(\"AccountAccess kind is incorrect. Should never happen.\");\n        }\n    }\n\n    function getModuleInitializerMultiSendData() private pure returns (bytes memory) {\n        ISphinxModuleProxyFactory moduleProxyFactory = ISphinxModuleProxyFactory(\n            sphinxModuleProxyFactoryAddress\n        );\n\n        // Encode the data that will deploy the Sphinx Module.\n        bytes memory encodedDeployModuleCall = abi.encodeWithSelector(\n            moduleProxyFactory.deploySphinxModuleProxyFromSafe.selector,\n            // Use the zero-hash as the salt.\n            bytes32(0)\n        );\n        // Encode the data in a format that can be executed using `MultiSend`.\n        bytes memory deployModuleMultiSendData = abi.encodePacked(\n            // We use `Call` so that the Gnosis Safe calls the `SphinxModuleProxyFactory` to deploy\n            // the Sphinx Module. This makes it easier for off-chain tooling to calculate the\n            // deployed Sphinx Module address because the `SphinxModuleProxyFactory`'s address is a\n            // global constant.\n            uint8(IEnum.GnosisSafeOperation.Call),\n            moduleProxyFactory,\n            uint256(0),\n            encodedDeployModuleCall.length,\n            encodedDeployModuleCall\n        );\n\n        // Encode the data that will enable the Sphinx Module in the Gnosis Safe.\n        bytes memory encodedEnableModuleCall = abi.encodeWithSelector(\n            moduleProxyFactory.enableSphinxModuleProxyFromSafe.selector,\n            // Use the zero-hash as the salt.\n            bytes32(0)\n        );\n        // Encode the data in a format that can be executed using `MultiSend`.\n        bytes memory enableModuleMultiSendData = abi.encodePacked(\n            // We can only enable the module by delegatecalling the `SphinxModuleProxyFactory`\n            // from the Gnosis Safe.\n            uint8(IEnum.GnosisSafeOperation.DelegateCall),\n            moduleProxyFactory,\n            uint256(0),\n            encodedEnableModuleCall.length,\n            encodedEnableModuleCall\n        );\n\n        // Encode the entire `MultiSend` data.\n        bytes memory multiSendData = abi.encodeWithSelector(\n            IMultiSend.multiSend.selector,\n            abi.encodePacked(deployModuleMultiSendData, enableModuleMultiSendData)\n        );\n\n        return multiSendData;\n    }\n\n    /**\n     * @notice Deploys a Gnosis Safe, deploys a Sphinx Module,\n     *         and enables the Sphinx Module in the Gnosis Safe\n     */\n    function deployModuleAndGnosisSafe(\n        address[] memory _owners,\n        uint256 _threshold,\n        address _safeAddress\n    ) public {\n        // Get the encoded data that'll be sent to the `MultiSend` contract to deploy and enable the\n        // Sphinx Module in the Gnosis Safe.\n        bytes memory multiSendData = getModuleInitializerMultiSendData();\n\n        // Deploy the Gnosis Safe Proxy to its expected address. We use cheatcodes to deploy the\n        // Gnosis Safe instead of the standard deployment process to avoid a bug in Foundry.\n        // Specifically, Foundry throws an error if we attempt to deploy a contract at the same\n        // address as the `FOUNDRY_SENDER`. We must set the Gnosis Safe as the `FOUNDRY_SENDER` so\n        // that deployed linked library addresses match the production environment. If we deploy the\n        // Gnosis Safe without using cheatcodes, Foundry would throw an error here.\n        deployContractTo(\n            getGnosisSafeProxyInitCode(),\n            abi.encode(safeSingletonAddress),\n            _safeAddress\n        );\n\n        // Initialize the Gnosis Safe proxy.\n        IGnosisSafe(_safeAddress).setup(\n            sortAddresses(_owners),\n            _threshold,\n            multiSendAddress,\n            multiSendData,\n            // This is the default fallback handler used by Gnosis Safe during their\n            // standard deployments.\n            compatibilityFallbackHandlerAddress,\n            // The following fields are for specifying an optional payment as part of the\n            // deployment. We don't use them.\n            address(0),\n            0,\n            payable(address(0))\n        );\n    }\n\n    /**\n     * @notice Deploy a contract to the given address. Slightly modified from\n     *         `StdCheats.sol:deployCodeTo`.\n     */\n    function deployContractTo(\n        bytes memory _initCode,\n        bytes memory _abiEncodedConstructorArgs,\n        address _where\n    ) public {\n        require(_where.code.length == 0, \"SphinxUtils: contract already exists\");\n        vm.etch(_where, abi.encodePacked(_initCode, _abiEncodedConstructorArgs));\n        (bool success, bytes memory runtimeBytecode) = _where.call(\"\");\n        require(success, \"SphinxUtils: failed to create runtime bytecode\");\n        vm.etch(_where, runtimeBytecode);\n        if (vm.getNonce(_where) == 0) {\n            // Set the nonce to be 1, which is the initial nonce for contracts.\n            vm.setNonce(_where, 1);\n        }\n    }\n\n    /**\n     * @notice Initializes the `FoundryDeploymentInfo` struct. Meant to be called before calling\n     *         the user's script. Does not include all of the fields of the `FoundryDeploymentInfo`\n     *         because some fields, like `gasEstimates`, must be assigned after the user's Forge\n     *         script is called.\n     */\n    function initializeDeploymentInfo(\n        UserSphinxConfig memory _config,\n        ExecutionMode _executionMode,\n        address _executor,\n        address _scriptAddress\n    ) external returns (FoundryDeploymentInfo memory) {\n        address safe = getGnosisSafeProxyAddress(_scriptAddress);\n        address module = getSphinxModuleAddress(_scriptAddress);\n\n        (\n            bytes memory safeInitData,\n            SphinxLockProject memory project\n        ) = getGnosisSafeInitializerData(_scriptAddress);\n        FoundryDeploymentInfo memory deploymentInfo;\n        deploymentInfo.executionMode = _executionMode;\n        deploymentInfo.executorAddress = _executor;\n        deploymentInfo.safeAddress = safe;\n        deploymentInfo.moduleAddress = module;\n        deploymentInfo.chainId = block.chainid;\n        deploymentInfo.blockGasLimit = block.gaslimit;\n        deploymentInfo.safeInitData = safeInitData;\n        deploymentInfo.newConfig = InternalSphinxConfig({\n            projectName: project.projectName,\n            mainnets: _config.mainnets,\n            testnets: _config.testnets,\n            threshold: project.defaultSafe.threshold,\n            saltNonce: project.defaultSafe.saltNonce,\n            owners: project.defaultSafe.owners,\n            orgId: project.orgId\n        });\n        deploymentInfo.initialState = getInitialChainState(safe, ISphinxModule(module));\n        deploymentInfo.nonce = getMerkleRootNonce(ISphinxModule(module));\n        deploymentInfo.sphinxLibraryVersion = getSphinxLibraryVersion();\n        deploymentInfo.arbitraryChain = false;\n        deploymentInfo.requireSuccess = true;\n\n        // We fill the block number in later in Typescript. We have to do this using a call to the rpc provider\n        // instead of using `block.number` within forge b/c some networks have odd changes to what `block.number`\n        // means. For example, on Arbitrum` `block.number` returns the block number on ETH instead of Arbitrum.\n        // This could cause the simulation to use an invalid block number and fail.\n        deploymentInfo.blockNumber = 0;\n\n        return deploymentInfo;\n    }\n\n    /**\n     * @notice Estimates the values of the `gas` fields in the Merkle leaves using `gasleft`. This\n     *         provides a more accurate estimate than simulating the transactions for two reasons:\n     *         1. The `eth_estimateGas` RPC method includes the minimum gas limit (21k) and the\n     *            calldata cost of initiating the transaction, which shouldn't be factored into the\n     *            Merkle leaf's `gas` field because it's executed as a sub-call.\n     *         2. It could be possible to underestimate the Merkle leaf's gas using a simulation due\n     *            to gas refunds. Consider this (contrived) edge case: Say a user's transaction\n     *            deploys a contract, which costs ~2 million gas, and also involves a large gas\n     *            refund (~500k gas). Since gas refunds occur after the transaction is executed, the\n     *            broadcast file will have a gas estimate of ~1.5 million gas. However, the user's\n     *            transaction costs 2 million gas. This will cause Sphinx to underestimate the\n     *            Merkle leaf's gas, resulting in a failed deployment on-chain. This situation uses\n     *            contrived numbers, but the point is that using `gasleft` is accurate even if\n     *            there's a large gas refund.\n     */\n    function estimateMerkleLeafGas(\n        ParsedAccountAccess[] memory _accountAccesses,\n        address _scriptAddress,\n        FoundryDeploymentInfo memory _deploymentInfo\n    ) public returns (uint256[] memory) {\n        address safe = getGnosisSafeProxyAddress(_scriptAddress);\n        address module = getSphinxModuleAddress(_scriptAddress);\n\n        uint256[] memory gasEstimates = new uint256[](_accountAccesses.length);\n\n        // We prank the Sphinx Module to replicate the production environment. In prod, the Sphinx\n        // Module calls the Gnosis Safe.\n        vm.startPrank(module);\n\n        // Update the balance of the Safe to be equal to the starting balance + the amount of funds\n        // requested. This ensures the Safe is properly funded when we execute the transactions below.\n        vm.deal(\n            _deploymentInfo.safeAddress,\n            _deploymentInfo.safeStartingBalance + _deploymentInfo.fundsRequestedForSafe\n        );\n\n        for (uint256 i = 0; i < _accountAccesses.length; i++) {\n            ParsedAccountAccess memory parsed = _accountAccesses[i];\n            GnosisSafeTransaction memory txn = makeGnosisSafeTransaction(parsed.root);\n            uint256 startGas = gasleft();\n            bool success = IGnosisSafe(safe).execTransactionFromModule(\n                txn.to,\n                txn.value,\n                txn.txData,\n                txn.operation\n            );\n            uint256 finalGas = gasleft();\n\n            require(success, \"Sphinx: failed to call Gnosis Safe from Sphinx Module\");\n\n            // Include a buffer to ensure the user's transaction doesn't fail on-chain due to\n            // variations between the simulation and the live execution environment. There are a\n            // couple areas in particular that could lead to variations:\n            // 1. The on-chain state could vary, which could impact the cost of execution. This is\n            //    inherently a source of variation because there's a delay between the simulation\n            //    and execution.\n            // 2. Foundry's simulation is treated as a single transaction, which means SLOADs are\n            //    more likely to be \"warm\" (i.e. cheaper) than the production environment, where\n            //    transactions may be split between batches.\n            //\n            // Collecting the user's transactions in the same process as this function does not\n            // impact the Merkle leaf gas fields because we use `vm.snapshot`/`vm.revertTo`. Also,\n            // state changes on one fork do not impact the gas cost on other forks.\n            //\n            // We chose to multiply the gas by 10-20% because multiplying it by a higher number\n            // could make a very large transaction unexecutable on-chain. Since this multiplier\n            // doesn't impact small transactions very much, we add a constant amount too. We use\n            // smaller buffers on Rootstock because gas costs are slightly lower on these networks\n            // compared to the EVM. Also, the block gas limit is significantly lower on Rootstock.\n            if (_deploymentInfo.chainId == 30 || _deploymentInfo.chainId == 31) {\n                gasEstimates[i] = 60_000 + ((startGas - finalGas) * 11) / 10;\n            } else {\n                gasEstimates[i] = 120_000 + ((startGas - finalGas) * 12) / 10;\n            }\n        }\n\n        vm.stopPrank();\n\n        return gasEstimates;\n    }\n\n    /**\n     * Handles adding an execute action that confirms the Safe has received the requested funding from\n     * our backend. We only include this check if the user requests funds from our backend. This check\n     * just protects the user from an error occurring in our backend which causes the funds to fail to\n     * delivered. This check causes the deployment to immediately fail instead of potentially failing\n     * part of the way through.\n     *\n     * It's worth noting the following edge case which this check does not protect against:\n     * Say there are already funds in the Safe, the user then proposes a script that requires those\n     * funds, the user executes a transaction via the Safe using a third party interface that reduces\n     * the balance of the Safe. We then attempt to execute the deployment and it fails because the Safe\n     * does not have enough funds.\n     *\n     * This is a specific case of the more general problem that if a deployment depends on some specific\n     * on chain state, the deployment may end up failing if that state changes in between the deployment\n     * being approved and it getting executed.\n     */\n    function addBalanceCheckAction(\n        FoundryDeploymentInfo memory _deploymentInfo,\n        ParsedAccountAccess[] memory parsedAccesses,\n        uint64 _callDepth\n    ) private pure returns (ParsedAccountAccess[] memory) {\n        // We don't need a check balance action if the user did not request funds\n        if (_deploymentInfo.fundsRequestedForSafe == 0) {\n            return parsedAccesses;\n        }\n\n        ParsedAccountAccess memory checkFundsAccess = ParsedAccountAccess(\n            VmSafe.AccountAccess({\n                chainInfo: VmSafe.ChainInfo(0, _deploymentInfo.chainId),\n                kind: VmSafe.AccountAccessKind.Call,\n                account: _deploymentInfo.safeAddress,\n                accessor: _deploymentInfo.safeAddress,\n                initialized: true,\n                // The old balance is the starting balance + the amount of funds requested because\n                // this action is executed after we've already transferred the requested funds to\n                // the Safe.\n                oldBalance: _deploymentInfo.safeStartingBalance +\n                    _deploymentInfo.fundsRequestedForSafe,\n                newBalance: _deploymentInfo.safeStartingBalance +\n                    _deploymentInfo.fundsRequestedForSafe,\n                deployedCode: \"\",\n                // We transfer the current balance of the Safe + the amount of funds requested\n                // We include the starting balance in addition to the amount requested because the\n                // safe may already have a balance that exceeds the amount requested.\n                // The following case could occur if we just checked for the amount requested:\n                // 1. The user requestes 0.1 eth using a Safe that has 0.15 eth\n                // 2. Our backend executes the deployment and fails to transfer the requested 0.1 eth\n                // due to an error.\n                // 3. The rest of the deployment is executed and this check passed because the balance\n                // of the Safe is greater than the amount of funds requested.\n                // 4. Transactions in the rest of the deployment may fail because the Safe doesn't have\n                // the amount of funds expected.\n                value: _deploymentInfo.safeStartingBalance + _deploymentInfo.fundsRequestedForSafe,\n                data: \"\",\n                reverted: false,\n                storageAccesses: new VmSafe.StorageAccess[](0),\n                depth: _callDepth\n            }),\n            new VmSafe.AccountAccess[](0)\n        );\n\n        ParsedAccountAccess[] memory parsedAccessesWithCheck = new ParsedAccountAccess[](\n            parsedAccesses.length + 1\n        );\n        parsedAccessesWithCheck[0] = checkFundsAccess;\n        for (uint i = 1; i < parsedAccessesWithCheck.length; i++) {\n            parsedAccessesWithCheck[i] = parsedAccesses[i - 1];\n        }\n\n        return parsedAccessesWithCheck;\n    }\n\n    /**\n     * @notice Finishes creating the `FoundryDeploymentInfo` struct. Meant to be called after\n     *         running the user's script and after calling `initializeDeploymentInfo`.\n     *\n     * @param _deploymentInfo The `FoundryDeploymentInfo` struct, which contains the initial values.\n     *                        We'll modify this struct then return its final version.\n     */\n    function finalizeDeploymentInfo(\n        FoundryDeploymentInfo memory _deploymentInfo,\n        Vm.AccountAccess[] memory _accesses,\n        uint64 _callDepth,\n        address _scriptAddress\n    ) external returns (FoundryDeploymentInfo memory) {\n        ParsedAccountAccess[] memory parsedAccesses = parseAccountAccesses(\n            _accesses,\n            _deploymentInfo.safeAddress,\n            _callDepth,\n            // We use `deploymentInfo.chainId` instead of `block.chainid` because the user may have\n            // changed the current `block.chainid` in their script by forking a different network.\n            _deploymentInfo.chainId\n        );\n\n        parsedAccesses = addBalanceCheckAction(_deploymentInfo, parsedAccesses, _callDepth);\n\n        // ABI encode each `ParsedAccountAccess` element individually. If, instead, we ABI encode\n        // the entire array as a unit, the encoded bytes will be too large for EthersJS to ABI\n        // decode, which causes an error. This occurs for large deployments, i.e. greater than 50\n        // contracts.\n        _deploymentInfo.encodedAccountAccesses = new bytes[](parsedAccesses.length);\n        for (uint256 i = 0; i < parsedAccesses.length; i++) {\n            _deploymentInfo.encodedAccountAccesses[i] = abi.encode(parsedAccesses[i]);\n        }\n\n        _deploymentInfo.gasEstimates = estimateMerkleLeafGas(\n            parsedAccesses,\n            _scriptAddress,\n            _deploymentInfo\n        );\n\n        return _deploymentInfo;\n    }\n\n    function concatJsonPath(string memory a, string memory b) public pure returns (string memory) {\n        return string(abi.encodePacked(a, \".\", b));\n    }\n\n    function fetchProjectFromLock(address _script) public returns (SphinxLockProject memory) {\n        UserSphinxConfig memory _config = fetchAndValidateConfig(_script);\n        string memory root = vm.projectRoot();\n        string memory path = string(abi.encodePacked(root, \"/sphinx.lock\"));\n        string memory json = vm.readFile(path);\n\n        string memory basePath = concatJsonPath(\".projects\", _config.projectName);\n        bool exists = vm.keyExists(json, basePath);\n        if (!exists) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"Project with the name \",\n                        bytes(_config.projectName),\n                        \" was not found in the `sphinx.lock` file. You need to register this project in the Sphinx UI and then run `npx sphinx sync` to generate the latest `sphinx.lock` file. We recommend committing this file to version control.\"\n                    )\n                )\n            );\n        }\n\n        string memory safePath = concatJsonPath(basePath, \"defaultSafe\");\n        SphinxLockProject memory project = SphinxLockProject({\n            projectName: vm.parseJsonString(json, concatJsonPath(basePath, \"projectName\")),\n            orgId: vm.parseJsonString(json, \".orgId\"),\n            defaultSafe: DefaultSafe({\n                owners: vm.parseJsonAddressArray(json, concatJsonPath(safePath, \"owners\")),\n                safeName: vm.parseJsonString(json, concatJsonPath(safePath, \"safeName\")),\n                threshold: vm.parseJsonUint(json, concatJsonPath(safePath, \"threshold\")),\n                saltNonce: vm.parseJsonUint(json, concatJsonPath(safePath, \"saltNonce\"))\n            })\n        });\n\n        return project;\n    }\n}\n"
          },
          "lib/sphinx/packages/contracts/contracts/foundry/interfaces/ICreateCall.sol": {
            "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\ninterface ICreateCall {\n    function performCreate(\n        uint256 value,\n        bytes memory deploymentData\n    ) external returns (address newContract);\n}\n"
          },
          "lib/sphinx/packages/contracts/contracts/foundry/interfaces/IEnum.sol": {
            "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\ninterface IEnum {\n    // This needs to be a different name from Gnosis Safe's `Enum.sol` to avoid an \"Identifier already\n    // declared\" compiler error.\n    enum GnosisSafeOperation {\n        Call,\n        DelegateCall\n    }\n}\n"
          },
          "lib/sphinx/packages/contracts/contracts/foundry/interfaces/IGnosisSafe.sol": {
            "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport { IEnum } from \"./IEnum.sol\";\n\ninterface IGnosisSafe {\n    /**\n     * @notice Sets an initial storage of the Safe contract.\n     * @dev This method can only be called once.\n     *      If a proxy was created without setting up, anyone can call setup and claim the proxy.\n     * @param _owners List of Safe owners.\n     * @param _threshold Number of required confirmations for a Safe transaction.\n     * @param to Contract address for optional delegate call.\n     * @param data Data payload for optional delegate call.\n     * @param fallbackHandler Handler for fallback calls to this contract\n     * @param paymentToken Token that should be used for the payment (0 is ETH)\n     * @param payment Value that should be paid\n     * @param paymentReceiver Address that should receive the payment (or 0 if tx.origin)\n     */\n    function setup(\n        address[] calldata _owners,\n        uint256 _threshold,\n        address to,\n        bytes calldata data,\n        address fallbackHandler,\n        address paymentToken,\n        uint256 payment,\n        address payable paymentReceiver\n    ) external;\n\n    /**\n     * @notice Returns if `owner` is an owner of the Safe.\n     * @return Boolean if owner is an owner of the Safe.\n     */\n    function isOwner(address owner) external view returns (bool);\n\n    /**\n     * @notice Returns a list of Safe owners.\n     * @return Array of Safe owners.\n     */\n    function getOwners() external view returns (address[] memory);\n\n    /**\n     * @notice Returns an array of modules.\n     *         If all entries fit into a single page, the next pointer will be 0x1.\n     *         If another page is present, next will be the last element of the returned array.\n     * @param start Start of the page. Has to be a module or start pointer (0x1 address)\n     * @param pageSize Maximum number of modules that should be returned. Has to be > 0\n     * @return array Array of modules.\n     * @return next Start of the next page.\n     */\n    function getModulesPaginated(\n        address start,\n        uint256 pageSize\n    ) external view returns (address[] memory array, address next);\n\n    /**\n     * @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\n     * @return Threshold number.\n     */\n    function getThreshold() external view returns (uint256);\n\n    /**\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\n     * @dev Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\n     * @param to Destination address of module transaction.\n     * @param value Ether value of module transaction.\n     * @param data Data payload of module transaction.\n     * @param operation Operation type of module transaction.\n     * @return success Boolean flag indicating if the call succeeded.\n     */\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes memory data,\n        IEnum.GnosisSafeOperation operation\n    ) external returns (bool success);\n\n    /**\n     * @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\n     * @dev This can only be done via a Safe transaction.\n     * @param owner New owner address.\n     * @param _threshold New threshold.\n     */\n    function addOwnerWithThreshold(address owner, uint256 _threshold) external;\n\n    /**\n     * @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\n     * @dev This can only be done via a Safe transaction.\n     * @param prevOwner Owner that pointed to the owner to be removed in the linked list\n     * @param owner Owner address to be removed.\n     * @param _threshold New threshold.\n     */\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) external;\n}\n"
          },
          "lib/sphinx/packages/contracts/contracts/foundry/interfaces/IGnosisSafeProxy.sol": {
            "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\ninterface IGnosisSafeProxy {}\n"
          },
          "lib/sphinx/packages/contracts/contracts/foundry/interfaces/IGnosisSafeProxyFactory.sol": {
            "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport { IGnosisSafeProxy } from \"./IGnosisSafeProxy.sol\";\n\ninterface IGnosisSafeProxyFactory {\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n    /// @param _singleton Address of singleton contract.\n    /// @param initializer Payload for message call sent to new proxy contract.\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\n    function createProxyWithNonce(\n        address _singleton,\n        bytes memory initializer,\n        uint256 saltNonce\n    ) external returns (IGnosisSafeProxy proxy);\n\n    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is\n    // easily possible to calculate predicted address.\n    function proxyCreationCode() external pure returns (bytes memory);\n}\n"
          },
          "lib/sphinx/packages/contracts/contracts/foundry/interfaces/IMultiSend.sol": {
            "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\ninterface IMultiSend {\n    /// @dev Sends multiple transactions and reverts all if one fails.\n    /// @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\n    ///                     operation as a uint8 with 0 for a call or 1 for a delegatecall (=> 1 byte),\n    ///                     to as a address (=> 20 bytes),\n    ///                     value as a uint256 (=> 32 bytes),\n    ///                     data length as a uint256 (=> 32 bytes),\n    ///                     data as bytes.\n    ///                     see abi.encodePacked for more information on packed encoding\n    /// @notice This method is payable as delegatecalls keep the msg.value from the previous call\n    ///         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\n    function multiSend(bytes memory transactions) external payable;\n}\n"
          },
          "lib/subapi/lib/safe-smart-account/contracts/base/OwnerManager.sol": {
            "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport \"../common/SelfAuthorized.sol\";\n\n/// @title OwnerManager - Manages a set of owners and a threshold to perform actions.\n/// @author Stefan George - <stefan@gnosis.pm>\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract OwnerManager is SelfAuthorized {\n    event AddedOwner(address owner);\n    event RemovedOwner(address owner);\n    event ChangedThreshold(uint256 threshold);\n\n    address internal constant SENTINEL_OWNERS = address(0x1);\n\n    mapping(address => address) internal owners;\n    uint256 internal ownerCount;\n    uint256 internal threshold;\n\n    /// @dev Setup function sets initial storage of contract.\n    /// @param _owners List of Safe owners.\n    /// @param _threshold Number of required confirmations for a Safe transaction.\n    function setupOwners(address[] memory _owners, uint256 _threshold) internal {\n        // Threshold can only be 0 at initialization.\n        // Check ensures that setup function can only be called once.\n        require(threshold == 0, \"GS200\");\n        // Validate that threshold is smaller than number of added owners.\n        require(_threshold <= _owners.length, \"GS201\");\n        // There has to be at least one Safe owner.\n        require(_threshold >= 1, \"GS202\");\n        // Initializing Safe owners.\n        address currentOwner = SENTINEL_OWNERS;\n        for (uint256 i = 0; i < _owners.length; i++) {\n            // Owner address cannot be null.\n            address owner = _owners[i];\n            require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this) && currentOwner != owner, \"GS203\");\n            // No duplicate owners allowed.\n            require(owners[owner] == address(0), \"GS204\");\n            owners[currentOwner] = owner;\n            currentOwner = owner;\n        }\n        owners[currentOwner] = SENTINEL_OWNERS;\n        ownerCount = _owners.length;\n        threshold = _threshold;\n    }\n\n    /// @dev Allows to add a new owner to the Safe and update the threshold at the same time.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\n    /// @param owner New owner address.\n    /// @param _threshold New threshold.\n    function addOwnerWithThreshold(address owner, uint256 _threshold) public authorized {\n        // Owner address cannot be null, the sentinel or the Safe itself.\n        require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this), \"GS203\");\n        // No duplicate owners allowed.\n        require(owners[owner] == address(0), \"GS204\");\n        owners[owner] = owners[SENTINEL_OWNERS];\n        owners[SENTINEL_OWNERS] = owner;\n        ownerCount++;\n        emit AddedOwner(owner);\n        // Change threshold if threshold was changed.\n        if (threshold != _threshold) changeThreshold(_threshold);\n    }\n\n    /// @dev Allows to remove an owner from the Safe and update the threshold at the same time.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\n    /// @param prevOwner Owner that pointed to the owner to be removed in the linked list\n    /// @param owner Owner address to be removed.\n    /// @param _threshold New threshold.\n    function removeOwner(\n        address prevOwner,\n        address owner,\n        uint256 _threshold\n    ) public authorized {\n        // Only allow to remove an owner, if threshold can still be reached.\n        require(ownerCount - 1 >= _threshold, \"GS201\");\n        // Validate owner address and check that it corresponds to owner index.\n        require(owner != address(0) && owner != SENTINEL_OWNERS, \"GS203\");\n        require(owners[prevOwner] == owner, \"GS205\");\n        owners[prevOwner] = owners[owner];\n        owners[owner] = address(0);\n        ownerCount--;\n        emit RemovedOwner(owner);\n        // Change threshold if threshold was changed.\n        if (threshold != _threshold) changeThreshold(_threshold);\n    }\n\n    /// @dev Allows to swap/replace an owner from the Safe with another address.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\n    /// @param prevOwner Owner that pointed to the owner to be replaced in the linked list\n    /// @param oldOwner Owner address to be replaced.\n    /// @param newOwner New owner address.\n    function swapOwner(\n        address prevOwner,\n        address oldOwner,\n        address newOwner\n    ) public authorized {\n        // Owner address cannot be null, the sentinel or the Safe itself.\n        require(newOwner != address(0) && newOwner != SENTINEL_OWNERS && newOwner != address(this), \"GS203\");\n        // No duplicate owners allowed.\n        require(owners[newOwner] == address(0), \"GS204\");\n        // Validate oldOwner address and check that it corresponds to owner index.\n        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, \"GS203\");\n        require(owners[prevOwner] == oldOwner, \"GS205\");\n        owners[newOwner] = owners[oldOwner];\n        owners[prevOwner] = newOwner;\n        owners[oldOwner] = address(0);\n        emit RemovedOwner(oldOwner);\n        emit AddedOwner(newOwner);\n    }\n\n    /// @dev Allows to update the number of required confirmations by Safe owners.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Changes the threshold of the Safe to `_threshold`.\n    /// @param _threshold New threshold.\n    function changeThreshold(uint256 _threshold) public authorized {\n        // Validate that threshold is smaller than number of owners.\n        require(_threshold <= ownerCount, \"GS201\");\n        // There has to be at least one Safe owner.\n        require(_threshold >= 1, \"GS202\");\n        threshold = _threshold;\n        emit ChangedThreshold(threshold);\n    }\n\n    function getThreshold() public view returns (uint256) {\n        return threshold;\n    }\n\n    function isOwner(address owner) public view returns (bool) {\n        return owner != SENTINEL_OWNERS && owners[owner] != address(0);\n    }\n\n    /// @dev Returns array of owners.\n    /// @return Array of Safe owners.\n    function getOwners() public view returns (address[] memory) {\n        address[] memory array = new address[](ownerCount);\n\n        // populate return array\n        uint256 index = 0;\n        address currentOwner = owners[SENTINEL_OWNERS];\n        while (currentOwner != SENTINEL_OWNERS) {\n            array[index] = currentOwner;\n            currentOwner = owners[currentOwner];\n            index++;\n        }\n        return array;\n    }\n}\n"
          },
          "lib/subapi/lib/safe-smart-account/contracts/common/SelfAuthorized.sol": {
            "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title SelfAuthorized - authorizes current contract to perform actions\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract SelfAuthorized {\n    function requireSelfCall() private view {\n        require(msg.sender == address(this), \"GS031\");\n    }\n\n    modifier authorized() {\n        // This is a function call as it minimized the bytecode size\n        requireSelfCall();\n        _;\n    }\n}\n"
          },
          "lib/subapi/src/SubAPIMultiSig.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport {ECDSA} from \"@openzeppelin/contracts@4.9.2/utils/cryptography/ECDSA.sol\";\nimport {OwnerManager} from \"@safe-smart-account/base/OwnerManager.sol\";\n\ncontract SubAPIMultiSig is OwnerManager {\n    event ExecutionResult(bytes32 indexed hash, bool result);\n\n    mapping(bytes32 => bool) public doneOf;\n\n    receive() external payable {}\n\n    constructor(address[] memory signers, uint64 threshold) {\n        setupOwners(signers, threshold);\n    }\n\n    function verifySignatures(bytes32 hash, bytes calldata signatures) public view {\n        require(signatures.length == threshold * 65, \"invalid signature length\");\n        bytes32 messageDigest = ECDSA.toEthSignedMessageHash(hash);\n\n        address lastOwner = address(0);\n        for (uint256 i = 0; i < threshold; i++) {\n            bytes calldata signature = signatures[i * 65:(i + 1) * 65];\n            address currentOwner = ECDSA.recover(messageDigest, signature);\n            require(\n                currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS,\n                \"invalid signature\"\n            );\n            lastOwner = currentOwner;\n        }\n    }\n\n    function _checkSigs(uint256 expiration, bytes32 hash, bytes calldata signatures) internal view {\n        require(block.timestamp < expiration, \"operation expired\");\n        require(!doneOf[hash], \"hash already used\");\n        verifySignatures(hash, signatures);\n    }\n\n    function exec(address to, uint256 value, uint256 expiration, bytes memory data, bytes calldata signatures)\n        external\n        payable\n        returns (bool success)\n    {\n        bytes memory txData = abi.encode(block.chainid, address(this), to, value, expiration, data);\n        bytes32 hash = keccak256(txData);\n        _checkSigs(expiration, hash, signatures);\n        (success,) = to.call{value: value}(data);\n        doneOf[hash] = true;\n        emit ExecutionResult(hash, success);\n    }\n}\n"
          },
          "script/Proposal.s.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./msgport/OneClick.s.sol\";\n\ncontract Proposal is OneClickScript {}\n"
          },
          "script/common/Base.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@sphinx-labs/contracts/SphinxPlugin.sol\";\nimport {SphinxConstants, NetworkInfo} from \"@sphinx-labs/contracts/SphinxConstants.sol\";\nimport {Script} from \"forge-std/Script.sol\";\nimport {stdToml} from \"forge-std/StdToml.sol\";\n\nimport {CREATE3Factory, ICREATE3Factory} from \"create3-deploy/src/CREATE3Factory.sol\";\n\nabstract contract Base is Script, Sphinx, SphinxConstants {\n    using stdToml for string;\n\n    address immutable CREATE2_ADDR = 0x4e59b44847b379578588920cA78FbF26c0B4956C;\n\n    error CREATE2FactoryNotDeployed();\n\n    function configureSphinx() public override {\n        sphinxConfig.projectName = \"RING-DAO\";\n        sphinxConfig.testnets = [\"sepolia\", \"arbitrum_sepolia\"];\n        sphinxConfig.mainnets = [\"arbitrum\", \"blast\", \"crab\", \"darwinia\", \"ethereum\", \"polygon\", \"moonbeam\", \"morph\"];\n    }\n\n    function CREATE3() public returns (address create3) {\n        bytes memory byteCode = type(CREATE3Factory).creationCode;\n        bytes32 salt = bytes32(0);\n        create3 = computeAddress(salt, hash(byteCode));\n        if (create3.code.length == 0) _deploy2(salt, byteCode);\n    }\n\n    function _deploy3(bytes32 salt, bytes memory initCode) internal returns (address) {\n        return ICREATE3Factory(CREATE3()).deploy(salt, initCode);\n    }\n\n    function _deploy2(bytes32 salt, bytes memory initCode) internal returns (address) {\n        if (CREATE2_ADDR.code.length == 0) revert CREATE2FactoryNotDeployed();\n        bytes memory data = bytes.concat(salt, initCode);\n        (, bytes memory addr) = CREATE2_ADDR.call(data);\n        return address(uint160(bytes20(addr)));\n    }\n\n    function computeCreate3Address(bytes32 salt) internal returns (address) {\n        return ICREATE3Factory(CREATE3()).getDeployed(safeAddress(), salt);\n    }\n\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address addr) {\n        address deployer = CREATE2_ADDR;\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer)\n            let start := add(ptr, 0x0b)\n            mstore8(start, 0xff)\n            addr := and(keccak256(start, 85), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n    }\n\n    function hash(bytes memory data) internal pure returns (bytes32) {\n        return keccak256(data);\n    }\n\n    function hash(string memory data) internal pure returns (bytes32) {\n        return hash(bytes(data));\n    }\n\n    function isL2(uint256 chainId) internal pure returns (bool) {\n        if (chainId == 1) return false;\n        else return true;\n    }\n\n    function getChainId(string memory name) public pure returns (uint256 chaindId) {\n        return findNetworkInfoByName(name).chainId;\n    }\n\n    function findNetworkInfoByName(string memory _networkName) public pure returns (NetworkInfo memory) {\n        NetworkInfo[] memory all = getNetworkInfoArray();\n        for (uint256 i = 0; i < all.length; i++) {\n            if (keccak256(abi.encode(all[i].name)) == keccak256(abi.encode(_networkName))) {\n                return all[i];\n            }\n        }\n        revert(string(abi.encodePacked(\"Sphinx: No network found with the given name: \", _networkName)));\n    }\n}\n"
          },
          "script/common/TomlTools.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport {VmSafe} from \"forge-std/Vm.sol\";\nimport {stdToml} from \"forge-std/StdToml.sol\";\n\nlibrary TomlTools {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    string internal constant DEFAULT_DELIMITER = \",\";\n    string internal constant DELIMITER_OVERRIDE = \"DSSTEST_ARRAY_DELIMITER\";\n\n    function readInput(string memory name) internal view returns (string memory) {\n        string memory root = vm.projectRoot();\n        return readInput(root, name);\n    }\n\n    function readInput(string memory root, string memory name) internal view returns (string memory) {\n        return vm.readFile(string.concat(root, \"/script/input/\", name, \".toml\"));\n    }\n\n    function loadConfig(string memory name) internal view returns (string memory config) {\n        config = vm.envOr(\"FOUNDRY_SCRIPT_CONFIG_TEXT\", string(\"\"));\n        if (eq(config, \"\")) {\n            config = readInput(vm.envOr(\"FOUNDRY_SCRIPT_CONFIG\", name));\n        }\n    }\n\n    function loadConfig() internal view returns (string memory config) {\n        config = vm.envOr(\"FOUNDRY_SCRIPT_CONFIG_TEXT\", string(\"\"));\n        if (eq(config, \"\")) {\n            config = readInput(vm.envString(\"FOUNDRY_SCRIPT_CONFIG\"));\n        }\n    }\n\n    function eq(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n\n    // Read config variable, but allow for an environment variable override\n\n    function readUint(string memory json, string memory key, string memory envKey) internal view returns (uint256) {\n        return vm.envOr(envKey, stdToml.readUint(json, key));\n    }\n\n    function readUintArray(string memory json, string memory key, string memory envKey)\n        internal\n        view\n        returns (uint256[] memory)\n    {\n        return vm.envOr(envKey, vm.envOr(DELIMITER_OVERRIDE, DEFAULT_DELIMITER), stdToml.readUintArray(json, key));\n    }\n\n    function readInt(string memory json, string memory key, string memory envKey) internal view returns (int256) {\n        return vm.envOr(envKey, stdToml.readInt(json, key));\n    }\n\n    function readIntArray(string memory json, string memory key, string memory envKey)\n        internal\n        view\n        returns (int256[] memory)\n    {\n        return vm.envOr(envKey, vm.envOr(DELIMITER_OVERRIDE, DEFAULT_DELIMITER), stdToml.readIntArray(json, key));\n    }\n\n    function readBytes32(string memory json, string memory key, string memory envKey) internal view returns (bytes32) {\n        return vm.envOr(envKey, stdToml.readBytes32(json, key));\n    }\n\n    function readBytes32Array(string memory json, string memory key, string memory envKey)\n        internal\n        view\n        returns (bytes32[] memory)\n    {\n        return vm.envOr(envKey, vm.envOr(DELIMITER_OVERRIDE, DEFAULT_DELIMITER), stdToml.readBytes32Array(json, key));\n    }\n\n    function readString(string memory json, string memory key, string memory envKey)\n        internal\n        view\n        returns (string memory)\n    {\n        return vm.envOr(envKey, stdToml.readString(json, key));\n    }\n\n    function readStringArray(string memory json, string memory key, string memory envKey)\n        internal\n        view\n        returns (string[] memory)\n    {\n        return vm.envOr(envKey, vm.envOr(DELIMITER_OVERRIDE, DEFAULT_DELIMITER), stdToml.readStringArray(json, key));\n    }\n\n    function readAddress(string memory json, string memory key, string memory envKey) internal view returns (address) {\n        return vm.envOr(envKey, stdToml.readAddress(json, key));\n    }\n\n    function readAddressArray(string memory json, string memory key, string memory envKey)\n        internal\n        view\n        returns (address[] memory)\n    {\n        return vm.envOr(envKey, vm.envOr(DELIMITER_OVERRIDE, DEFAULT_DELIMITER), stdToml.readAddressArray(json, key));\n    }\n\n    function readBool(string memory json, string memory key, string memory envKey) internal view returns (bool) {\n        return vm.envOr(envKey, stdToml.readBool(json, key));\n    }\n\n    function readBoolArray(string memory json, string memory key, string memory envKey)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        return vm.envOr(envKey, vm.envOr(DELIMITER_OVERRIDE, DEFAULT_DELIMITER), stdToml.readBoolArray(json, key));\n    }\n\n    function readBytes(string memory json, string memory key, string memory envKey)\n        internal\n        view\n        returns (bytes memory)\n    {\n        return vm.envOr(envKey, stdToml.readBytes(json, key));\n    }\n\n    function readBytesArray(string memory json, string memory key, string memory envKey)\n        internal\n        view\n        returns (bytes[] memory)\n    {\n        return vm.envOr(envKey, vm.envOr(DELIMITER_OVERRIDE, DEFAULT_DELIMITER), stdToml.readBytesArray(json, key));\n    }\n}\n"
          },
          "script/msgport/Connect.s.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {Base} from \"../common/Base.sol\";\nimport {TomlTools} from \"../common/TomlTools.sol\";\nimport {OracleConfig} from \"../ormp/OracleConfig.sol\";\nimport {RelayerConfig} from \"../ormp/RelayerConfig.sol\";\n\nimport {safeconsole} from \"forge-std/safeconsole.sol\";\n\n// Msgport\nimport \"../../src/Msgport.sol\";\nimport \"./Deploy.s.sol\";\nimport {PortRegistry} from \"@darwinia-msgport/src/PortRegistry.sol\";\n\ninterface III {\n    function peerOf(uint256 chainId) external view returns (address);\n    function setPeer(uint256 chainId, address peer) external;\n}\n\ncontract ConnectScript is Base, OracleConfig, RelayerConfig {\n    Oracle oracle;\n    Relayer relayer;\n    address ormpUpgradeablePort;\n    address multiPort;\n    address xAccountFactory;\n    address registry;\n\n    string[] networks;\n\n    DeployScript deploy;\n\n    function setUp() public {\n        if (block.chainid == 31337) {\n            return;\n        }\n        uint256 local = block.chainid;\n        string memory config = TomlTools.loadConfig(vmSafe.toString(local));\n        init(local, config);\n        deploy = new DeployScript();\n        oracle = Oracle(payable(deploy.ORACLE()));\n        relayer = Relayer(payable(deploy.RELAYER()));\n        ormpUpgradeablePort = deploy.ORMPUPORT();\n        multiPort = deploy.MULTIPORT();\n        registry = deploy.REGISTRY();\n        xAccountFactory = deploy.XACCOUNTFACTORY();\n    }\n\n    function init(uint256 local, string memory config) public override(OracleConfig, RelayerConfig) {\n        OracleConfig.init(local, config);\n        RelayerConfig.init(local, config);\n    }\n\n    function _run() internal virtual {\n        bool IS_PROD = vmSafe.envOr(\"IS_PROD\", true);\n        if (IS_PROD) {\n            networks = sphinxConfig.mainnets;\n        } else {\n            networks = sphinxConfig.testnets;\n        }\n        connect(block.chainid);\n        // darwinia connect to tron\n        if (IS_PROD) {\n            if (block.chainid == 46) {\n                if (\n                    0x3Bc5362EC3a3DBc07292aEd4ef18Be18De02DA3a\n                        != III(0x2cd1867Fb8016f93710B6386f7f9F1D540A60812).peerOf(728126428)\n                ) {\n                    III(0x2cd1867Fb8016f93710B6386f7f9F1D540A60812).setPeer(\n                        728126428, 0x3Bc5362EC3a3DBc07292aEd4ef18Be18De02DA3a\n                    );\n                }\n            }\n        } else {\n            if (block.chainid == 701 || block.chainid == 11155111) {\n                if (\n                    0xb5F017129950C21d870019f6066C42E25acDAAe3\n                        != III(0x2cd1867Fb8016f93710B6386f7f9F1D540A60812).peerOf(2494104990)\n                ) {\n                    III(0x2cd1867Fb8016f93710B6386f7f9F1D540A60812).setPeer(\n                        2494104990, 0xb5F017129950C21d870019f6066C42E25acDAAe3\n                    );\n                }\n            }\n        }\n    }\n\n    function connect(uint256 localChainId) internal {\n        uint256 len = networks.length;\n        for (uint256 i = 0; i < len; i++) {\n            uint256 remoteChainId = getChainId(networks[i]);\n            // _setPortRegistry(remoteChainId);\n            if (remoteChainId == localChainId) continue;\n            if (isSupported[remoteChainId]) {\n                _setOracleFee(localChainId, remoteChainId);\n                _setRelayerFee(localChainId, remoteChainId);\n                _setPortLookup(localChainId, remoteChainId);\n            }\n        }\n    }\n\n    function _setOracleFee(uint256 localChainId, uint256 remoteChainId) internal {\n        if (block.chainid != localChainId) return;\n        uint256 fee = getOracleConfig(localChainId, remoteChainId);\n        if (fee != oracle.feeOf(remoteChainId)) {\n            oracle.setFee(remoteChainId, fee);\n        }\n    }\n\n    function _setRelayerFee(uint256 localChainId, uint256 remoteChainId) internal {\n        if (block.chainid != localChainId) return;\n        Config memory c = getRelayerConfig(localChainId, remoteChainId);\n\n        (uint128 ratio, uint128 price) = relayer.priceOf(remoteChainId);\n        if (ratio != c.dstPriceRatio || price != c.dstGasPriceInWei) {\n            relayer.setDstPrice(remoteChainId, c.dstPriceRatio, c.dstGasPriceInWei);\n        }\n        (uint64 b, uint64 g) = relayer.configOf(remoteChainId);\n        if (b != c.baseGas || g != c.gasPerByte) {\n            relayer.setDstConfig(remoteChainId, c.baseGas, c.gasPerByte);\n        }\n    }\n\n    function _setPortLookup(uint256 localChainId, uint256 remoteChainId) internal {\n        _setPortLookup(ormpUpgradeablePort, localChainId, remoteChainId);\n        // _setPortLookup(multiPort, localChainId, remoteChainId);\n    }\n\n    function _setPortLookup(address port, uint256 localChainId, uint256 remoteChainId) internal {\n        if (block.chainid != localChainId) return;\n        if (port != III(port).peerOf(remoteChainId)) {\n            III(port).setPeer(remoteChainId, port);\n        }\n    }\n\n    function _setPortRegistry(uint256 chainId) internal {\n        _setPortRegistry(ormpUpgradeablePort, chainId, \"ORMP-U\");\n        _setPortRegistry(multiPort, chainId, \"Multi\");\n        _setPortRegistry(xAccountFactory, chainId, \"xAccountFactory\");\n    }\n\n    function _setPortRegistry(address port, uint256 chainId, string memory name) internal {\n        if (port != PortRegistry(registry).get(chainId, name)) {\n            PortRegistry(registry).set(chainId, name, port);\n        }\n        require(PortRegistry(registry).get(chainId, name) == port);\n    }\n}\n"
          },
          "script/msgport/Deploy.s.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {Base} from \"../common/Base.sol\";\nimport {TomlTools} from \"../common/TomlTools.sol\";\nimport {stdJson} from \"forge-std/StdJson.sol\";\n\n// Msgport\nimport \"../../src/Msgport.sol\";\n\ncontract DeployScript is Base {\n    using stdJson for string;\n\n    bytes32 salt = bytes32(uint256(1));\n    bytes32 salt2 = bytes32(uint256(2));\n\n    address[] signers = [\n        0x1989D93Ec04037cA64e2af7e48FF5C8Fc2cEA7B8, // xavier\n        0x9F33a4809aA708d7a399fedBa514e0A0d15EfA85, // guantong\n        0xB9a0CaDD13C5d534b034d878b2fcA9E5a6e1e3A4, // echo\n        0xc1A3FEE4132e9285f41F5389570fD9Fbbcb10a1D, // yalin\n        0xFa5727bE643dba6599fC7F812fE60dA3264A8205  // nada\n    ];\n    uint64 quorum = 3;\n\n    function _run() internal virtual {\n        deployMsgport();\n        // deployXAccount();\n    }\n\n    function deployXAccount() public {\n        deployPortRegistry();\n        deployMultiPort();\n        deploySafeMsgportModule();\n        deployXAccountFactory();\n\n        configXAccount();\n    }\n\n    function configXAccount() public {\n        configMultiPort();\n    }\n\n    function configMultiPort() internal {\n        MultiPort multiPort = MultiPort(MULTIPORT());\n        address ormpPort = ORMPUPORT();\n        if (!multiPort.isTrustedPort(ormpPort)) {\n            multiPort.addTrustedPort(ormpPort);\n        }\n    }\n\n    function REGISTRY() public returns (address) {\n        bytes memory logicByteCode = type(PortRegistry).creationCode;\n        address logic = computeAddress(salt, hash(logicByteCode));\n        bytes memory proxyByteCode = type(PortRegistryProxy).creationCode;\n        bytes memory initData = abi.encodeWithSelector(PortRegistry.initialize.selector, DAO());\n        bytes memory initCode = bytes.concat(proxyByteCode, abi.encode(address(logic), initData));\n        return computeAddress(salt, hash(initCode));\n    }\n\n    function MODULE() public view returns (address) {\n        bytes memory byteCode = type(SafeMsgportModule).creationCode;\n        return computeAddress(salt, hash(byteCode));\n    }\n\n    function MULTIPORT() public returns (address) {\n        bytes memory byteCode = type(MultiPort).creationCode;\n        bytes memory initCode = bytes.concat(byteCode, abi.encode(DAO(), 1, \"Multi\"));\n        return computeAddress(salt, hash(initCode));\n    }\n\n    function XACCOUNTFACTORY() public returns (address) {\n        return computeCreate3Address(salt);\n    }\n\n    function deployPortRegistry() internal {\n        bytes memory logicByteCode = type(PortRegistry).creationCode;\n        address logic = computeAddress(salt, hash(logicByteCode));\n        if (logic.code.length == 0) _deploy2(salt, logicByteCode);\n        bytes memory proxyByteCode = type(PortRegistryProxy).creationCode;\n        bytes memory initData = abi.encodeWithSelector(PortRegistry.initialize.selector, DAO());\n        bytes memory initCode = bytes.concat(proxyByteCode, abi.encode(address(logic), initData));\n        address proxy = computeAddress(salt, hash(initCode));\n        if (proxy.code.length == 0) _deploy2(salt, initCode);\n    }\n\n    function deployMultiPort() internal {\n        bytes memory byteCode = type(MultiPort).creationCode;\n        bytes memory initCode = bytes.concat(byteCode, abi.encode(DAO(), 1, \"Multi\"));\n        address multiPort = computeAddress(salt, hash(initCode));\n        if (multiPort.code.length == 0) _deploy2(salt, initCode);\n    }\n\n    function deploySafeMsgportModule() internal {\n        bytes memory byteCode = type(SafeMsgportModule).creationCode;\n        address module = computeAddress(salt, hash(byteCode));\n        if (module.code.length == 0) _deploy2(salt, byteCode);\n    }\n\n    function deployXAccountFactory() internal {\n        (address safeFactory, address safeSingleton, address safeFallbackHandler) = readSafeDeployment();\n        bytes memory byteCode = type(XAccountFactory).creationCode;\n        bytes memory initCode = bytes.concat(\n            byteCode,\n            abi.encode(DAO(), MODULE(), safeFactory, safeSingleton, safeFallbackHandler, REGISTRY(), \"xAccountFactory\")\n        );\n        address factory = computeCreate3Address(salt);\n        if (factory.code.length == 0) _deploy3(salt, initCode);\n    }\n\n    function deployMsgport() public {\n        // Deploy SubAPIMultiSig\n        deploySubAPIMultiSig();\n\n        // Deploy ORMP\n        deployORMP();\n        deployOracle();\n        deployRelayer();\n\n        // Deploy ORMPUpgradeablePort\n        deployORMPUPort();\n\n        configMsgport();\n    }\n\n    function configMsgport() public {\n        configOracle();\n        configRelayer();\n        configORMP();\n        configORMPUPort();\n    }\n\n    function DAO() public returns (address) {\n        return safeAddress();\n    }\n\n    function SUBAPIMULTISIG() public view returns (address) {\n        bytes memory byteCode = type(SubAPIMultiSig).creationCode;\n        bytes memory initCode = bytes.concat(byteCode, abi.encode(signers, quorum));\n        return computeAddress(salt, hash(initCode));\n    }\n\n    function ORMPAddr() public returns (address) {\n        bytes memory byteCode = type(ORMP).creationCode;\n        bytes memory initCode = bytes.concat(byteCode, abi.encode(DAO()));\n        return computeAddress(salt, hash(initCode));\n    }\n\n    function ORACLE() public returns (address) {\n        bytes memory byteCode = type(Oracle).creationCode;\n        bytes memory initCode = bytes.concat(byteCode, abi.encode(DAO(), ORMPAddr()));\n\t\treturn computeAddress(salt2, hash(initCode));\n    }\n\n    function RELAYER() public returns (address) {\n        bytes memory byteCode = type(Relayer).creationCode;\n        bytes memory initCode = bytes.concat(byteCode, abi.encode(DAO(), ORMPAddr()));\n        return computeAddress(salt, hash(initCode));\n    }\n\n    function ORMPUPORT() public returns (address) {\n        string memory name = \"ORMP-U\";\n        bytes memory byteCode = type(ORMPUpgradeablePort).creationCode;\n        bytes memory initCode = bytes.concat(byteCode, abi.encode(DAO(), ORMPAddr(), name));\n        return computeAddress(salt, hash(initCode));\n    }\n\n    function deploySubAPIMultiSig() internal {\n        bytes memory byteCode = type(SubAPIMultiSig).creationCode;\n        bytes memory initCode = bytes.concat(byteCode, abi.encode(signers, quorum));\n        if (SUBAPIMULTISIG().code.length == 0) _deploy2(salt, initCode);\n    }\n\n    function deployORMP() internal {\n        bytes memory byteCode = type(ORMP).creationCode;\n        bytes memory initCode = bytes.concat(byteCode, abi.encode(DAO()));\n        if (ORMPAddr().code.length == 0) _deploy2(salt, initCode);\n    }\n\n    function deployOracle() internal {\n        bytes memory byteCode = type(Oracle).creationCode;\n        bytes memory initCode = bytes.concat(byteCode, abi.encode(DAO(), ORMPAddr()));\n        if (ORACLE().code.length == 0) _deploy2(salt2, initCode);\n    }\n\n    function deployRelayer() internal {\n        bytes memory byteCode = type(Relayer).creationCode;\n        bytes memory initCode = bytes.concat(byteCode, abi.encode(DAO(), ORMPAddr()));\n        if (RELAYER().code.length == 0) _deploy2(salt, initCode);\n    }\n\n    function deployORMPUPort() internal {\n        string memory name = \"ORMP-U\";\n        bytes memory byteCode = type(ORMPUpgradeablePort).creationCode;\n        bytes memory initCode = bytes.concat(byteCode, abi.encode(DAO(), ORMPAddr(), name));\n        if (ORMPUPORT().code.length == 0) _deploy2(salt, initCode);\n    }\n\n    function configOracle() internal {\n        Oracle o = Oracle(payable(ORACLE()));\n        address dao = DAO();\n        address subapiMultisig = SUBAPIMULTISIG();\n        address echo = 0x0f14341A7f464320319025540E8Fe48Ad0fe5aec;\n        address yalinOld = 0x178E699c9a6bB2Cd624557Fbd85ed219e6faBa77;\n        address yalinNew = 0xc1A3FEE4132e9285f41F5389570fD9Fbbcb10a1D;\n        if (!o.isApproved(dao)) {\n            o.setApproved(dao, true);\n        }\n        if (!o.isApproved(echo)) {\n            o.setApproved(echo, true);\n        }\n        if (o.isApproved(yalinOld)) {\n            o.setApproved(yalinOld, false);\n        }\n        if (!o.isApproved(yalinNew)) {\n            o.setApproved(yalinNew, true);\n        }\n        address owner = o.owner();\n        if (owner != subapiMultisig) {\n            o.changeOwner(subapiMultisig);\n        }\n    }\n\n    function configRelayer() internal {\n        Relayer r = Relayer(payable(RELAYER()));\n        address dao = DAO();\n        address echo = 0x0f14341A7f464320319025540E8Fe48Ad0fe5aec;\n        address yalinOld = 0x912D7601569cBc2DF8A7f0aaE50BFd18e8C64d05;\n        address yalinNew = 0x40C168503B9758540E18A79907F3Fd8678c13f03;\n        address guantong = 0x9F33a4809aA708d7a399fedBa514e0A0d15EfA85;\n        if (!r.isApproved(dao)) {\n            r.setApproved(dao, true);\n        }\n        if (!r.isApproved(echo)) {\n            r.setApproved(echo, true);\n        }\n        if (r.isApproved(yalinOld)) {\n            r.setApproved(yalinOld, false);\n        }\n        if (!r.isApproved(yalinNew)) {\n            r.setApproved(yalinNew, true);\n        }\n        if (!r.isApproved(guantong)) {\n            r.setApproved(guantong, true);\n        }\n    }\n\n    function configORMP() internal {\n        address ormp = ORMPAddr();\n        address oracle = ORACLE();\n        address relayer = RELAYER();\n        (address o, address r) = ORMP(ormp).defaultUC();\n        if (o != oracle || r != relayer) {\n            ORMP(ormp).setDefaultConfig(oracle, relayer);\n        }\n    }\n\n    function configORMPUPort() internal {\n        string memory uri = \"ipfs://bafybeidmfr357ouhgr3zwupkl66unzicf6kkies4bkq6fv5lmz5rtvrk5e\";\n        address ormpuport = ORMPUPORT();\n        if (!TomlTools.eq(uri, ORMPUpgradeablePort(ormpuport).uri())) {\n            ORMPUpgradeablePort(ormpuport).setURI(uri);\n        }\n    }\n\n    function readSafeDeployment()\n        internal\n        view\n        returns (address proxyFactory, address gnosisSafe, address fallbackHandler)\n    {\n        uint256 chainId = block.chainid;\n        string memory root = vm.projectRoot();\n        string memory safeFolder = string(abi.encodePacked(\"/lib/safe-deployments/src/assets/v1.3.0/\"));\n        string memory proxyFactoryFile = vm.readFile(string(abi.encodePacked(root, safeFolder, \"proxy_factory.json\")));\n        proxyFactory =\n            proxyFactoryFile.readAddress(string(abi.encodePacked(\".networkAddresses.\", vm.toString(chainId))));\n        string memory gasisSafeJson;\n        if (isL2(chainId)) {\n            gasisSafeJson = \"gnosis_safe_l2.json\";\n        } else {\n            gasisSafeJson = \"gnosis_safe.json\";\n        }\n\n        string memory fallbackHandlerFile =\n            vm.readFile(string(abi.encodePacked(root, safeFolder, \"compatibility_fallback_handler.json\")));\n        fallbackHandler =\n            fallbackHandlerFile.readAddress(string(abi.encodePacked(\".networkAddresses.\", vm.toString(chainId))));\n\n        string memory gnosisSageFile = vm.readFile(string(abi.encodePacked(root, safeFolder, gasisSafeJson)));\n        gnosisSafe = gnosisSageFile.readAddress(string(abi.encodePacked(\".networkAddresses.\", vm.toString(chainId))));\n    }\n}\n"
          },
          "script/msgport/OneClick.s.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./Connect.s.sol\";\nimport \"./Deploy.s.sol\";\nimport \"../self/SwapOwner.s.sol\";\n\ncontract OneClickScript is DeployScript, ConnectScript, SwapOwnerScript {\n    SwapOwnerScript swap = new SwapOwnerScript();\n\n    function run() public sphinx {\n        _run();\n    }\n\n    function _run() internal override(DeployScript, ConnectScript, SwapOwnerScript) {\n        DeployScript._run();\n        ConnectScript._run();\n        // SwapOwnerScript._run();\n    }\n}\n"
          },
          "script/ormp/OracleConfig.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {VmSafe} from \"forge-std/Vm.sol\";\nimport {stdToml} from \"forge-std/StdToml.sol\";\n\ncontract OracleConfig {\n    using stdToml for string;\n\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    // local => remote\n    mapping(uint256 => mapping(uint256 => uint256)) public oracleFeeOf;\n    // remote => true\n    mapping(uint256 => bool) public isSupported;\n\n    error NotFoundOracleConfig(uint256 local, uint256 remote);\n\n    function init(uint256 local, string memory config) public virtual {\n        uint256[] memory remotes = config.readUintArray(\".remote.chains\");\n        uint256 len = remotes.length;\n        for (uint256 i = 0; i < len; i++) {\n            uint256 remote = remotes[i];\n            isSupported[remote] = true;\n            string memory key = string.concat(\".ormp.oracle.\", vm.toString(remote), \".fee\");\n            uint256 fee = config.readUint(key);\n            setOracleConfig(local, remote, fee);\n        }\n    }\n\n    function setOracleConfig(uint256 local, uint256 remote, uint256 fee) public {\n        oracleFeeOf[local][remote] = fee;\n    }\n\n    function getOracleConfig(uint256 local, uint256 remote) public view returns (uint256 fee) {\n        fee = oracleFeeOf[local][remote];\n        if (fee == 0) revert NotFoundOracleConfig(local, remote);\n    }\n}\n"
          },
          "script/ormp/RelayerConfig.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {VmSafe} from \"forge-std/Vm.sol\";\nimport {stdToml} from \"forge-std/StdToml.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\ncontract RelayerConfig {\n    using stdToml for string;\n    using SafeCast for uint256;\n\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    struct Config {\n        uint128 dstPriceRatio; // dstPrice / localPrice * 10^10\n        uint128 dstGasPriceInWei;\n        uint64 baseGas;\n        uint64 gasPerByte;\n    }\n\n    // local => remote => ...\n    mapping(uint256 => mapping(uint256 => Config)) public configOf;\n\n    error NotFoundRelayerConfig(uint256 local, uint256 remote);\n\n    function init(uint256 local, string memory config) public virtual {\n        uint256[] memory remotes = config.readUintArray(\".remote.chains\");\n        uint256 len = remotes.length;\n        for (uint256 i = 0; i < len; i++) {\n            uint256 remote = remotes[i];\n            string memory key = string.concat(\".ormp.relayer.\", vm.toString(remote));\n            string memory key1 = string.concat(key, \".dstPriceRatio\");\n            string memory key2 = string.concat(key, \".dstGasPriceInWei\");\n            string memory key3 = string.concat(key, \".baseGas\");\n            string memory key4 = string.concat(key, \".gasPerByte\");\n            uint256 dstPriceRatio = config.readUint(key1);\n            uint256 dstGasPriceInWei = config.readUint(key2);\n            uint256 baseGas = config.readUint(key3);\n            uint256 gasPerByte = config.readUint(key4);\n            setRelayerConfig(\n                local,\n                remote,\n                dstPriceRatio.toUint128(),\n                dstGasPriceInWei.toUint128(),\n                baseGas.toUint64(),\n                gasPerByte.toUint64()\n            );\n        }\n    }\n\n    function setRelayerConfig(\n        uint256 local,\n        uint256 remote,\n        uint128 dstPriceRatio,\n        uint128 dstGasPriceInWei,\n        uint64 baseGas,\n        uint64 gasPerByte\n    ) public {\n        configOf[local][remote] = Config(dstPriceRatio, dstGasPriceInWei, baseGas, gasPerByte);\n    }\n\n    function getRelayerConfig(uint256 local, uint256 remote) public view returns (Config memory c) {\n        c = configOf[local][remote];\n        if (c.baseGas == 0) revert NotFoundRelayerConfig(local, remote);\n    }\n}\n"
          },
          "script/self/SwapOwner.s.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {Base} from \"../common/Base.sol\";\n\ninterface ISafe {\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) external;\n}\n\ncontract SwapOwnerScript is Base {\n    address aki = 0x53405FB4d71591E33fe07bFbC90bD82E65720ad0;\n    address bear = 0x5b7544b3f6aBd9E03Fba494796B1eE6F9543E2e4;\n\n    function _run() internal virtual {\n        if (block.chainid != 2818) {\n            return;\n        }\n        address self = safeAddress();\n\n        ISafe(self).swapOwner(0x52386BE2397e8EAc26298F733b390684203fB580, aki, bear);\n    }\n}\n"
          },
          "src/Msgport.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// Subapi\nimport {SubAPIMultiSig} from \"subapi/src/SubAPIMultiSig.sol\";\n\n// ORMP\nimport {ORMP} from \"ORMP/src/ORMP.sol\";\nimport {Oracle} from \"ORMP/src/eco/Oracle.sol\";\nimport {Relayer} from \"ORMP/src/eco/Relayer.sol\";\n\n// Msgport\nimport {ORMPUpgradeablePort} from \"@darwinia-msgport/src/ports/ORMPUpgradeablePort.sol\";\n\n// XAccount\nimport {PortRegistryProxy} from \"@darwinia-msgport/src/PortRegistryProxy.sol\";\nimport {PortRegistry} from \"@darwinia-msgport/src/PortRegistry.sol\";\nimport {MultiPort} from \"@darwinia-msgport/src/ports/MultiPort.sol\";\nimport {XAccountFactory} from \"@darwinia-msgport/src/xAccount/XAccountFactory.sol\";\nimport {SafeMsgportModule} from \"@darwinia-msgport/src/xAccount/SafeMsgportModule.sol\";\n\n// Create3\nimport {CREATE3Factory} from \"create3-deploy/src/CREATE3Factory.sol\";\n"
          }
        },
        "settings": {
          "viaIR": false,
          "optimizer": {
            "runs": 999999,
            "enabled": true
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs"
          },
          "outputSelection": {
            "lib/ORMP/src/Channel.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/Common.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/ORMP.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/UserConfig.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/Verifier.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/eco/Oracle.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/eco/Relayer.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/interfaces/IORMP.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/interfaces/IOracle.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/interfaces/IRelayer.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/interfaces/IVerifier.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/security/ExcessivelySafeCall.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/security/ReentrancyGuard.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/user/AppBase.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/create3-deploy/src/CREATE3Factory.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/create3-deploy/src/ICREATE3Factory.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/lib/solmate/src/utils/Bytes32AddressLib.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/lib/solmate/src/utils/CREATE3.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/PortRegistry.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/PortRegistryProxy.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/interfaces/IMessagePort.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/interfaces/IPortMetadata.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/interfaces/IPortRegistry.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/interfaces/ISafe.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/interfaces/ISafeMsgportModule.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/interfaces/ISafeProxyFactory.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/ports/MultiPort.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/ports/ORMPUpgradeablePort.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/ports/base/BaseMessagePort.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/ports/base/PeerLookup.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/ports/base/PortMetadata.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/user/Application.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/user/xAuth.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/utils/CREATE3.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/xAccount/SafeMsgportModule.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/xAccount/XAccountFactory.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/Base.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/Script.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/StdChains.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/StdCheats.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/StdJson.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/StdMath.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/StdStorage.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/StdStyle.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/StdToml.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/StdUtils.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/Vm.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/console.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/console2.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/interfaces/IERC165.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/interfaces/IERC20.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/interfaces/IERC721.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/interfaces/IMulticall3.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/mocks/MockERC20.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/mocks/MockERC721.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/safeconsole.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/proxy/utils/UUPSUpgradeable.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/core/SphinxDataTypes.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/core/interfaces/ISphinxModule.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/core/interfaces/ISphinxModuleProxyFactory.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/forge-std/src/StdUtils.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/forge-std/src/Vm.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/forge-std/src/interfaces/IERC165.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/forge-std/src/interfaces/IERC20.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/forge-std/src/interfaces/IERC721.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/forge-std/src/interfaces/IMulticall3.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/forge-std/src/mocks/MockERC20.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/forge-std/src/mocks/MockERC721.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/foundry/Sphinx.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/foundry/SphinxConstants.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/foundry/SphinxForkCheck.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/foundry/SphinxPlugin.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/foundry/SphinxPluginTypes.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/foundry/SphinxUtils.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/foundry/interfaces/ICreateCall.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/foundry/interfaces/IEnum.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/foundry/interfaces/IGnosisSafe.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/foundry/interfaces/IGnosisSafeProxy.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/foundry/interfaces/IGnosisSafeProxyFactory.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/foundry/interfaces/IMultiSend.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/subapi/lib/safe-smart-account/contracts/base/OwnerManager.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/subapi/lib/safe-smart-account/contracts/common/SelfAuthorized.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/subapi/src/SubAPIMultiSig.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "script/Proposal.s.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "script/common/Base.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "script/common/TomlTools.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "script/msgport/Connect.s.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "script/msgport/Deploy.s.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "script/msgport/OneClick.s.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "script/ormp/OracleConfig.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "script/ormp/RelayerConfig.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "script/self/SwapOwner.s.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "src/Msgport.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            }
          },
          "evmVersion": "london",
          "libraries": {},
          "remappings": [
            "subapi/=lib/subapi/",
            "ORMP/=lib/ORMP/",
            "@darwinia-msgport/=lib/darwinia-msgport/",
            "@openzeppelin/contracts@4.9.2/=lib/openzeppelin-contracts/contracts/",
            "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
            "@safe-smart-account/=lib/subapi/lib/safe-smart-account/contracts/",
            "@sphinx-labs/contracts/=lib/sphinx/packages/contracts/contracts/foundry/",
            "forge-std/=lib/forge-std/src/",
            "solmate/=lib/darwinia-msgport/lib/solmate/src/",
            "create3-deploy/=lib/create3-deploy/"
          ]
        }
      }
    }
  },
  "inputs": [
    {
      "solcVersion": "0.8.17",
      "solcLongVersion": "0.8.17+commit.8df45f5f",
      "id": "b17fe8726b32698f99fd0b9f2554d6c2",
      "input": {
        "language": "Solidity",
        "settings": {
          "viaIR": false,
          "optimizer": {
            "runs": 999999,
            "enabled": true
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs"
          },
          "outputSelection": {
            "lib/ORMP/src/Channel.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/Common.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/ORMP.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/UserConfig.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/Verifier.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/eco/Oracle.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/eco/Relayer.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/interfaces/IORMP.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/interfaces/IOracle.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/interfaces/IRelayer.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/interfaces/IVerifier.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/security/ExcessivelySafeCall.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/security/ReentrancyGuard.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/ORMP/src/user/AppBase.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/create3-deploy/src/CREATE3Factory.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/create3-deploy/src/ICREATE3Factory.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/lib/solmate/src/utils/Bytes32AddressLib.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/lib/solmate/src/utils/CREATE3.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/PortRegistry.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/PortRegistryProxy.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/interfaces/IMessagePort.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/interfaces/IPortMetadata.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/interfaces/IPortRegistry.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/interfaces/ISafe.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/interfaces/ISafeMsgportModule.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/interfaces/ISafeProxyFactory.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/ports/MultiPort.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/ports/ORMPUpgradeablePort.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/ports/base/BaseMessagePort.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/ports/base/PeerLookup.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/ports/base/PortMetadata.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/user/Application.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/user/xAuth.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/utils/CREATE3.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/xAccount/SafeMsgportModule.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/darwinia-msgport/src/xAccount/XAccountFactory.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/Base.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/Script.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/StdChains.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/StdCheats.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/StdJson.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/StdMath.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/StdStorage.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/StdStyle.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/StdToml.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/StdUtils.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/Vm.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/console.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/console2.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/interfaces/IERC165.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/interfaces/IERC20.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/interfaces/IERC721.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/interfaces/IMulticall3.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/mocks/MockERC20.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/mocks/MockERC721.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/forge-std/src/safeconsole.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/proxy/utils/UUPSUpgradeable.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/core/SphinxDataTypes.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/core/interfaces/ISphinxModule.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/core/interfaces/ISphinxModuleProxyFactory.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/forge-std/src/StdUtils.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/forge-std/src/Vm.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/forge-std/src/interfaces/IERC165.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/forge-std/src/interfaces/IERC20.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/forge-std/src/interfaces/IERC721.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/forge-std/src/interfaces/IMulticall3.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/forge-std/src/mocks/MockERC20.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/forge-std/src/mocks/MockERC721.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/foundry/Sphinx.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/foundry/SphinxConstants.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/foundry/SphinxForkCheck.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/foundry/SphinxPlugin.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/foundry/SphinxPluginTypes.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/foundry/SphinxUtils.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/foundry/interfaces/ICreateCall.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/foundry/interfaces/IEnum.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/foundry/interfaces/IGnosisSafe.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/foundry/interfaces/IGnosisSafeProxy.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/foundry/interfaces/IGnosisSafeProxyFactory.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/sphinx/packages/contracts/contracts/foundry/interfaces/IMultiSend.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/subapi/lib/safe-smart-account/contracts/base/OwnerManager.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/subapi/lib/safe-smart-account/contracts/common/SelfAuthorized.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "lib/subapi/src/SubAPIMultiSig.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "script/Proposal.s.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "script/common/Base.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "script/common/TomlTools.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "script/msgport/Connect.s.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "script/msgport/Deploy.s.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "script/msgport/OneClick.s.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "script/ormp/OracleConfig.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "script/ormp/RelayerConfig.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "script/self/SwapOwner.s.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "src/Msgport.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            }
          },
          "evmVersion": "london",
          "libraries": {},
          "remappings": [
            "subapi/=lib/subapi/",
            "ORMP/=lib/ORMP/",
            "@darwinia-msgport/=lib/darwinia-msgport/",
            "@openzeppelin/contracts@4.9.2/=lib/openzeppelin-contracts/contracts/",
            "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
            "@safe-smart-account/=lib/subapi/lib/safe-smart-account/contracts/",
            "@sphinx-labs/contracts/=lib/sphinx/packages/contracts/contracts/foundry/",
            "forge-std/=lib/forge-std/src/",
            "solmate/=lib/darwinia-msgport/lib/solmate/src/",
            "create3-deploy/=lib/create3-deploy/"
          ]
        },
        "sources": {
          "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
          },
          "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
          },
          "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
          },
          "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
          },
          "lib/subapi/lib/safe-smart-account/contracts/base/OwnerManager.sol": {
            "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport \"../common/SelfAuthorized.sol\";\n\n/// @title OwnerManager - Manages a set of owners and a threshold to perform actions.\n/// @author Stefan George - <stefan@gnosis.pm>\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract OwnerManager is SelfAuthorized {\n    event AddedOwner(address owner);\n    event RemovedOwner(address owner);\n    event ChangedThreshold(uint256 threshold);\n\n    address internal constant SENTINEL_OWNERS = address(0x1);\n\n    mapping(address => address) internal owners;\n    uint256 internal ownerCount;\n    uint256 internal threshold;\n\n    /// @dev Setup function sets initial storage of contract.\n    /// @param _owners List of Safe owners.\n    /// @param _threshold Number of required confirmations for a Safe transaction.\n    function setupOwners(address[] memory _owners, uint256 _threshold) internal {\n        // Threshold can only be 0 at initialization.\n        // Check ensures that setup function can only be called once.\n        require(threshold == 0, \"GS200\");\n        // Validate that threshold is smaller than number of added owners.\n        require(_threshold <= _owners.length, \"GS201\");\n        // There has to be at least one Safe owner.\n        require(_threshold >= 1, \"GS202\");\n        // Initializing Safe owners.\n        address currentOwner = SENTINEL_OWNERS;\n        for (uint256 i = 0; i < _owners.length; i++) {\n            // Owner address cannot be null.\n            address owner = _owners[i];\n            require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this) && currentOwner != owner, \"GS203\");\n            // No duplicate owners allowed.\n            require(owners[owner] == address(0), \"GS204\");\n            owners[currentOwner] = owner;\n            currentOwner = owner;\n        }\n        owners[currentOwner] = SENTINEL_OWNERS;\n        ownerCount = _owners.length;\n        threshold = _threshold;\n    }\n\n    /// @dev Allows to add a new owner to the Safe and update the threshold at the same time.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\n    /// @param owner New owner address.\n    /// @param _threshold New threshold.\n    function addOwnerWithThreshold(address owner, uint256 _threshold) public authorized {\n        // Owner address cannot be null, the sentinel or the Safe itself.\n        require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this), \"GS203\");\n        // No duplicate owners allowed.\n        require(owners[owner] == address(0), \"GS204\");\n        owners[owner] = owners[SENTINEL_OWNERS];\n        owners[SENTINEL_OWNERS] = owner;\n        ownerCount++;\n        emit AddedOwner(owner);\n        // Change threshold if threshold was changed.\n        if (threshold != _threshold) changeThreshold(_threshold);\n    }\n\n    /// @dev Allows to remove an owner from the Safe and update the threshold at the same time.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\n    /// @param prevOwner Owner that pointed to the owner to be removed in the linked list\n    /// @param owner Owner address to be removed.\n    /// @param _threshold New threshold.\n    function removeOwner(\n        address prevOwner,\n        address owner,\n        uint256 _threshold\n    ) public authorized {\n        // Only allow to remove an owner, if threshold can still be reached.\n        require(ownerCount - 1 >= _threshold, \"GS201\");\n        // Validate owner address and check that it corresponds to owner index.\n        require(owner != address(0) && owner != SENTINEL_OWNERS, \"GS203\");\n        require(owners[prevOwner] == owner, \"GS205\");\n        owners[prevOwner] = owners[owner];\n        owners[owner] = address(0);\n        ownerCount--;\n        emit RemovedOwner(owner);\n        // Change threshold if threshold was changed.\n        if (threshold != _threshold) changeThreshold(_threshold);\n    }\n\n    /// @dev Allows to swap/replace an owner from the Safe with another address.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\n    /// @param prevOwner Owner that pointed to the owner to be replaced in the linked list\n    /// @param oldOwner Owner address to be replaced.\n    /// @param newOwner New owner address.\n    function swapOwner(\n        address prevOwner,\n        address oldOwner,\n        address newOwner\n    ) public authorized {\n        // Owner address cannot be null, the sentinel or the Safe itself.\n        require(newOwner != address(0) && newOwner != SENTINEL_OWNERS && newOwner != address(this), \"GS203\");\n        // No duplicate owners allowed.\n        require(owners[newOwner] == address(0), \"GS204\");\n        // Validate oldOwner address and check that it corresponds to owner index.\n        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, \"GS203\");\n        require(owners[prevOwner] == oldOwner, \"GS205\");\n        owners[newOwner] = owners[oldOwner];\n        owners[prevOwner] = newOwner;\n        owners[oldOwner] = address(0);\n        emit RemovedOwner(oldOwner);\n        emit AddedOwner(newOwner);\n    }\n\n    /// @dev Allows to update the number of required confirmations by Safe owners.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Changes the threshold of the Safe to `_threshold`.\n    /// @param _threshold New threshold.\n    function changeThreshold(uint256 _threshold) public authorized {\n        // Validate that threshold is smaller than number of owners.\n        require(_threshold <= ownerCount, \"GS201\");\n        // There has to be at least one Safe owner.\n        require(_threshold >= 1, \"GS202\");\n        threshold = _threshold;\n        emit ChangedThreshold(threshold);\n    }\n\n    function getThreshold() public view returns (uint256) {\n        return threshold;\n    }\n\n    function isOwner(address owner) public view returns (bool) {\n        return owner != SENTINEL_OWNERS && owners[owner] != address(0);\n    }\n\n    /// @dev Returns array of owners.\n    /// @return Array of Safe owners.\n    function getOwners() public view returns (address[] memory) {\n        address[] memory array = new address[](ownerCount);\n\n        // populate return array\n        uint256 index = 0;\n        address currentOwner = owners[SENTINEL_OWNERS];\n        while (currentOwner != SENTINEL_OWNERS) {\n            array[index] = currentOwner;\n            currentOwner = owners[currentOwner];\n            index++;\n        }\n        return array;\n    }\n}\n"
          },
          "lib/subapi/lib/safe-smart-account/contracts/common/SelfAuthorized.sol": {
            "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title SelfAuthorized - authorizes current contract to perform actions\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract SelfAuthorized {\n    function requireSelfCall() private view {\n        require(msg.sender == address(this), \"GS031\");\n    }\n\n    modifier authorized() {\n        // This is a function call as it minimized the bytecode size\n        requireSelfCall();\n        _;\n    }\n}\n"
          },
          "lib/subapi/src/SubAPIMultiSig.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport {ECDSA} from \"@openzeppelin/contracts@4.9.2/utils/cryptography/ECDSA.sol\";\nimport {OwnerManager} from \"@safe-smart-account/base/OwnerManager.sol\";\n\ncontract SubAPIMultiSig is OwnerManager {\n    event ExecutionResult(bytes32 indexed hash, bool result);\n\n    mapping(bytes32 => bool) public doneOf;\n\n    receive() external payable {}\n\n    constructor(address[] memory signers, uint64 threshold) {\n        setupOwners(signers, threshold);\n    }\n\n    function verifySignatures(bytes32 hash, bytes calldata signatures) public view {\n        require(signatures.length == threshold * 65, \"invalid signature length\");\n        bytes32 messageDigest = ECDSA.toEthSignedMessageHash(hash);\n\n        address lastOwner = address(0);\n        for (uint256 i = 0; i < threshold; i++) {\n            bytes calldata signature = signatures[i * 65:(i + 1) * 65];\n            address currentOwner = ECDSA.recover(messageDigest, signature);\n            require(\n                currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS,\n                \"invalid signature\"\n            );\n            lastOwner = currentOwner;\n        }\n    }\n\n    function _checkSigs(uint256 expiration, bytes32 hash, bytes calldata signatures) internal view {\n        require(block.timestamp < expiration, \"operation expired\");\n        require(!doneOf[hash], \"hash already used\");\n        verifySignatures(hash, signatures);\n    }\n\n    function exec(address to, uint256 value, uint256 expiration, bytes memory data, bytes calldata signatures)\n        external\n        payable\n        returns (bool success)\n    {\n        bytes memory txData = abi.encode(block.chainid, address(this), to, value, expiration, data);\n        bytes32 hash = keccak256(txData);\n        _checkSigs(expiration, hash, signatures);\n        (success,) = to.call{value: value}(data);\n        doneOf[hash] = true;\n        emit ExecutionResult(hash, success);\n    }\n}\n"
          },
          "lib/ORMP/src/Common.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @dev The block of control information and data for comminicate\n/// between user applications. Messages are the exchange medium\n/// used by channels to send and receive data through cross-chain networks.\n/// A message is sent from a source chain to a destination chain.\n/// @param index The leaf index lives in channel's incremental mekle tree.\n/// @param fromChainId The message source chain id.\n/// @param from User application contract address which send the message.\n/// @param toChainId The message destination chain id.\n/// @param to User application contract address which receive the message.\n/// @param gasLimit Gas limit for destination UA used.\n/// @param encoded The calldata which encoded by ABI Encoding.\nstruct Message {\n    address channel;\n    uint256 index;\n    uint256 fromChainId;\n    address from;\n    uint256 toChainId;\n    address to;\n    uint256 gasLimit;\n    bytes encoded; /*(abi.encodePacked(SELECTOR, PARAMS))*/\n}\n\n/// @dev Hash of the message.\nfunction hash(Message memory message) pure returns (bytes32) {\n    return keccak256(abi.encode(message));\n}\n"
          },
          "lib/ORMP/src/Verifier.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./interfaces/IVerifier.sol\";\n\nabstract contract Verifier is IVerifier {\n    /// @notice Fetch message hash.\n    /// @param chainId The source chain id.\n    /// @param channel The message channel.\n    /// @param msgIndex The Message index.\n    /// @return Message hash in source chain.\n    function hashOf(uint256 chainId, address channel, uint256 msgIndex) public view virtual returns (bytes32);\n\n    /// @inheritdoc IVerifier\n    function verifyMessageProof(Message calldata message, bytes calldata) external view returns (bool) {\n        // check oracle's message hash equal relayer's message hash\n        return hashOf(message.fromChainId, message.channel, message.index) == hash(message);\n    }\n}\n"
          },
          "lib/ORMP/src/eco/Oracle.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../Verifier.sol\";\nimport \"../interfaces/IORMP.sol\";\n\ncontract Oracle is Verifier {\n    event SetFee(uint256 indexed chainId, uint256 fee);\n    event SetApproved(address operator, bool approve);\n    event Withdrawal(address indexed to, uint256 amt);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    address public immutable PROTOCOL;\n\n    address public owner;\n    // chainId => price\n    mapping(uint256 => uint256) public feeOf;\n    // operator => isApproved\n    mapping(address => bool) public approvedOf;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"!owner\");\n        _;\n    }\n\n    modifier onlyApproved() {\n        require(isApproved(msg.sender), \"!approve\");\n        _;\n    }\n\n    constructor(address dao, address ormp) {\n        PROTOCOL = ormp;\n        owner = dao;\n    }\n\n    receive() external payable {}\n\n    function version() public pure returns (string memory) {\n        return \"2.1.0\";\n    }\n\n    /// @dev Only could be called by owner.\n    /// @param chainId The source chain id.\n    /// @param channel The message channel.\n    /// @param msgIndex The source chain message index.\n    /// @param msgHash The source chain message hash corresponding to the channel.\n    function importMessageHash(uint256 chainId, address channel, uint256 msgIndex, bytes32 msgHash)\n        external\n        onlyOwner\n    {\n        IORMP(PROTOCOL).importHash(chainId, channel, msgIndex, msgHash);\n    }\n\n    function hashOf(uint256 chainId, address channel, uint256 msgIndex) public view override returns (bytes32) {\n        return IORMP(PROTOCOL).hashLookup(address(this), keccak256(abi.encode(chainId, channel, msgIndex)));\n    }\n\n    function changeOwner(address newOwner) external onlyOwner {\n        address oldOwner = owner;\n        owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    function setApproved(address operator, bool approve) external onlyOwner {\n        approvedOf[operator] = approve;\n        emit SetApproved(operator, approve);\n    }\n\n    function isApproved(address operator) public view returns (bool) {\n        return approvedOf[operator];\n    }\n\n    function withdraw(address to, uint256 amount) external onlyApproved {\n        (bool success,) = to.call{value: amount}(\"\");\n        require(success, \"!withdraw\");\n        emit Withdrawal(to, amount);\n    }\n\n    function setFee(uint256 chainId, uint256 fee_) external onlyApproved {\n        feeOf[chainId] = fee_;\n        emit SetFee(chainId, fee_);\n    }\n\n    function fee(uint256 toChainId, address /*ua*/ ) public view returns (uint256) {\n        uint256 f = feeOf[toChainId];\n        require(f != 0, \"!fee\");\n        return f;\n    }\n}\n"
          },
          "lib/ORMP/src/interfaces/IORMP.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../Common.sol\";\n\ninterface IORMP {\n    /// @dev Send a cross-chain message over the endpoint.\n    /// @notice follow https://eips.ethereum.org/EIPS/eip-5750\n    /// @param toChainId The Message destination chain id.\n    /// @param to User application contract address which receive the message.\n    /// @param gasLimit Gas limit for destination user application used.\n    /// @param encoded The calldata which encoded by ABI Encoding.\n    /// @param refund Return extra fee to refund address.\n    /// @return Return the hash of the message as message id.\n    /// @param params General extensibility for relayer to custom functionality.\n    function send(\n        uint256 toChainId,\n        address to,\n        uint256 gasLimit,\n        bytes calldata encoded,\n        address refund,\n        bytes calldata params\n    ) external payable returns (bytes32);\n\n    /// @notice Get a quote in source native gas, for the amount that send() requires to pay for message delivery.\n    /// @param toChainId The Message destination chain id.\n    //  @param ua User application contract address which send the message.\n    /// @param gasLimit Gas limit for destination user application used.\n    /// @param encoded The calldata which encoded by ABI Encoding.\n    /// @param params General extensibility for relayer to custom functionality.\n    function fee(uint256 toChainId, address ua, uint256 gasLimit, bytes calldata encoded, bytes calldata params)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Recv verified message and dispatch to destination user application address.\n    /// @param message Verified receive message info.\n    /// @param proof Message proof of this message.\n    /// @return dispatchResult Result of the message dispatch.\n    function recv(Message calldata message, bytes calldata proof) external payable returns (bool dispatchResult);\n\n    /// @dev Fetch user application config.\n    /// @notice If user application has not configured, then the default config is used.\n    /// @param ua User application contract address.\n    function getAppConfig(address ua) external view returns (address oracle, address relayer);\n\n    /// @notice Set user application config.\n    /// @param oracle Oracle which user application choose.\n    /// @param relayer Relayer which user application choose.\n    function setAppConfig(address oracle, address relayer) external;\n\n    function defaultUC() external view returns (address oracle, address relayer);\n\n    /// @dev Check the msg if it is dispatched.\n    /// @param msgHash Hash of the checked message.\n    /// @return Return the dispatched result of the checked message.\n    function dones(bytes32 msgHash) external view returns (bool);\n\n    /// @dev Import hash by any oracle address.\n    /// @notice Hash is an abstract of the proof system, it can be a block hash or a message root hash,\n    ///  \t\tspecifically provided by oracles.\n    /// @param chainId The source chain id.\n    /// @param channel The message channel.\n    /// @param msgIndex The source chain message index.\n    /// @param hash_ The hash to import.\n    function importHash(uint256 chainId, address channel, uint256 msgIndex, bytes32 hash_) external;\n\n    /// @dev Fetch hash.\n    /// @param oracle The oracle address.\n    /// @param lookupKey The key for loop up hash.\n    /// @return Return the hash imported by the oracle.\n    function hashLookup(address oracle, bytes32 lookupKey) external view returns (bytes32);\n}\n"
          },
          "lib/ORMP/src/interfaces/IVerifier.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../Common.sol\";\n\ninterface IVerifier {\n    /// @notice Verify message proof\n    /// @dev Message proof provided by relayer. Oracle should provide message root of\n    ///      source chain, and verify the merkle proof of the message hash.\n    /// @param message The message info.\n    /// @param proof Proof of the message\n    /// @return Result of the message verify.\n    function verifyMessageProof(Message calldata message, bytes calldata proof) external view returns (bool);\n}\n"
          }
        }
      }
    }
  ],
  "version": "0.2.0",
  "merkleTree": {
    "root": "0x2f239b3fdcb8d03628f3a1d28275ffe38517cfa6d76df4d82bedb8414b59bd1d",
    "leavesWithProofs": [
      {
        "leaf": {
          "chainId": "1",
          "index": "0",
          "leafType": 0,
          "data": "0x000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a50000000000000000000000003d75d338b4711f8a33d293a2008f07a7125134020000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000007e16116661ca8d66c73612382833153911fa03b100000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x83a2967f4334bdf71ef86e4d2bda77030cc03293b933ccf5a440ee6f865598a4",
          "0xc8b116d9d2fdb961f415e12dccedb9b78e78f3692044d6509de2f135c24daed7",
          "0x8189417b502aefc0129380a51d6013cb0701a9e159be6329937b40c815e33e70",
          "0xcb8e1bb39f903eb5fe5cc81c62aff55d71533f6aa6394ba01f989589e3aafd87",
          "0x516ce6f48ff49814be03849c7c249aea4b37a5e228bc59a3a06efb7cc829b4ed",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "1",
          "index": "1",
          "leafType": 1,
          "data": ""
        },
        "proof": [
          "0x19321fa3c3c85ff23d67f21d01fb38606677cab772eb460674421837ad952b89",
          "0xa52d6af643f0e11041b1dc3f4ba409ae8df6b421b06c55ffed93e2f1504b74a6",
          "0x919cf137a82992a13e7816e95f68931f91adc44a1bc3e8c7b1009d6efe2a94d3",
          "0x1b390562e17cf8685325cb38f9e5dd6b413f70278f1b48bfdbb61c311fd738b4",
          "0xb5865d8d613650df8f012689c3c0cd3cafa2ba3350af0f08fc8382e97e4a1c62",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "1",
          "index": "2",
          "leafType": 1,
          "data": ""
        },
        "proof": [
          "0xe731be1c4c7642727ab2239b347050b84c46215fa2fc9bc28c947dfa9c2b08ee",
          "0x03287e2f802cea3c23d51f4d9b4d56e51de333fd164fe391b6eb22586198861f",
          "0x1097c61aedbee7b075626df55aaef139ef774b04321ec357d2ee3d8e5c188f70",
          "0x4750eac2340b313b30c9b5729f68eda9e5e282de30ea035432cbd6b44b792808",
          "0x9a3e24bcb0fe604251506f3b926d2def4e4793979f97dcba2e191cadb0231873",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "1",
          "index": "3",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f0800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb680000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a5000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xffad01a66f663154a67b6b380bd985e2b549ba0f530a737d1da746e503fb2e7c",
          "0xde55929a29bab8b9f4613359c97576435878a90c6b8a502d9265d3f567d8c5aa",
          "0x058d5be6042401cf593790f3c1d118ceb4ccb501e7b8638f0f2710afb643577d",
          "0x875af909d0124ee04c8fd767736d91f675ddec48378c4fb2217002b7ce2929a1",
          "0xa10e8d0582ffaa4e005444ac6f15b911c2fa72e23c4d1007245ea888ed8debc6",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "1",
          "index": "4",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f0800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb6800000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x96d54f8ad4a5db85fe99a3d635eb7c057928eb4001a464491fc7aeb72a7108ec",
          "0xcbf9bfb26692541310ffc28e1093248f6266cb90866148e4292a356e6c085c10",
          "0x32895f3e700ac39202784a41ff51b97ef369b8b5aa9d1a9e5da37722e6261ec3",
          "0xaa0ec7a734ed15d45a2eb9c46b603ba5d3772e4d17cd78db89b6308c94ca867e",
          "0x01d5b68aa35474bd31a16188189de8f2cd25a12dbc98472d9c8e480cf45e86b8",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "1",
          "index": "5",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f0800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb680000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x68fb7c7e1dd00ae829f4c8657b441aaacb0bed7ef6e781c28d474829105b588e",
          "0x3320ed209801e9567548edcf693597c997f6c33df1d5620973211c2d88ab4b2f",
          "0x0257a72ae4330aecbe4cda624a79251bb5c4552fb264bb8a8e89c1f60aef0f47",
          "0xcb8e1bb39f903eb5fe5cc81c62aff55d71533f6aa6394ba01f989589e3aafd87",
          "0x516ce6f48ff49814be03849c7c249aea4b37a5e228bc59a3a06efb7cc829b4ed",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "1",
          "index": "6",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f15e00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000024a6f9dae1000000000000000000000000855275ac7ea4cc4f324915b2eb48839e447e04bd00000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x27a2cab25651b1b0c26330f39fa092acc2c2dc109bdf1fb07b918311f510b4aa",
          "0xe8431d4da61a3b90c27f6862b73a2af54a9c4caf901662c74cf942ef5e791cbe",
          "0xf437436623c3eef4d35cf50f75081e101220ac6121384b0ea8d04d99b391ae69",
          "0x3ad7a6de3ccd75b106f0e32cfc71a59815aa804517190f0a5c4410de645f7c8e",
          "0xb5865d8d613650df8f012689c3c0cd3cafa2ba3350af0f08fc8382e97e4a1c62",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "1",
          "index": "7",
          "leafType": 1,
          "data": "0x000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020a8600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb680000000000000000000000000912d7601569cbc2df8a7f0aae50bfd18e8c64d05000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x57f0add172fa562d6bf0f11592107060789ab2111a2b3a87333faa94e69364a2",
          "0xfe99e5228d8ce4e1da815ebce56d09d066fa390db8766cf7c4bc0507f377e69a",
          "0x63fa963513c75e6946235c6b891e7d0f4e49af670336707560914a22436cf662",
          "0x5f30486c17a475b5f0361633bc3f1bf14dcefe5e7b10606233cb2ec73b711261",
          "0xa88f09f93862c32046d3da315d8acfec1dab373c56d8d1ceccda4da62154c92f",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "1",
          "index": "8",
          "leafType": 1,
          "data": "0x000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024ef600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb68000000000000000000000000040c168503b9758540e18a79907f3fd8678c13f03000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x0a0718e9f11880d1c87638526551a3326fa79bc2031ce522e0afe53217b0d869",
          "0xc3db2da5902ad3c7ce5757c4187a8390251fe8c4ec091737e0e20c3871a3ab11",
          "0x213644e93fc6bef8c69c532e4ba9a33de174addf435c479ba5fe6a65d57bf8e6",
          "0x1b390562e17cf8685325cb38f9e5dd6b413f70278f1b48bfdbb61c311fd738b4",
          "0xb5865d8d613650df8f012689c3c0cd3cafa2ba3350af0f08fc8382e97e4a1c62",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "1",
          "index": "9",
          "leafType": 1,
          "data": "0x00000000000000000000000013b2211a7ca45db2808f6db05557ce5347e3634e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020bc500000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000444ea59979000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a00000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x2b0c32936145ef54c30dddc5eeffa97bd6f3a85804df8972ffbb7afed3c90ec1",
          "0x4e16264ab0bce6fe07862c3fbebd9fb1511e680a21c42a6fa9c6b17a048a28c3",
          "0x0f829d23b9ee0d8bd5f436f02e72ace6fdc76d2bdb2ee214ca34609932bcffae",
          "0x3ad7a6de3ccd75b106f0e32cfc71a59815aa804517190f0a5c4410de645f7c8e",
          "0xb5865d8d613650df8f012689c3c0cd3cafa2ba3350af0f08fc8382e97e4a1c62",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "1",
          "index": "10",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024eaa00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004452f7c988000000000000000000000000000000000000000000000000000000000000a4b10000000000000000000000000000000000000000000000000000246139ca800000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x091c08c1b6b96013ebd31ba44152be34e8b9d1465712139a21fe392449c7be12",
          "0x01bd13e2c451703cd1274dba982cf0719e0ed346c0887095bae23753115a5a69",
          "0x213644e93fc6bef8c69c532e4ba9a33de174addf435c479ba5fe6a65d57bf8e6",
          "0x1b390562e17cf8685325cb38f9e5dd6b413f70278f1b48bfdbb61c311fd738b4",
          "0xb5865d8d613650df8f012689c3c0cd3cafa2ba3350af0f08fc8382e97e4a1c62",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "1",
          "index": "11",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024eaa00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004452f7c988000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000001d1a94a200000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x2e5b56ee0ef6c4790e266e6f20d84e45552bf8e873884bef2ac40f0f91e4e4a2",
          "0x2d1601c3b13c100b122479ea43e81bb59e88f9973148317edaa361c05a40b64f",
          "0x58a01b05a96063746094debda125f5d6c39b84ecbde489fcea85a277380799b9",
          "0xd75c55c4276205475956dc1d3765c8ab5fb8f887a362eac56c3019b7e9261dcc",
          "0xa88f09f93862c32046d3da315d8acfec1dab373c56d8d1ceccda4da62154c92f",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "44",
          "index": "0",
          "leafType": 0,
          "data": "0x000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a50000000000000000000000003d75d338b4711f8a33d293a2008f07a7125134020000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000007e16116661ca8d66c73612382833153911fa03b100000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xc9ac2021137f1b1968ae7e38da0cde0351558a90a3269bcc19e3004fdbc9af55",
          "0xe2f1e9b8e6dc46369befba6e7230c5744cb047aef783a2733f58f677937a676b",
          "0xab9eb2b92875acfb253bed134c8e3bc224600ff8fd2368e7dc21779da4a29421",
          "0xf73cb1f9802f0cd75a7c31b7e65defab4cd637b4d748e2ab28e0fd0ce631b17c",
          "0x9a3e24bcb0fe604251506f3b926d2def4e4793979f97dcba2e191cadb0231873",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "44",
          "index": "1",
          "leafType": 1,
          "data": ""
        },
        "proof": [
          "0xb674ed0d28077c26995a8da79c21d1192ffd915a4c0f7f77cd65465d310d0aa8",
          "0x21785a61c2f56fa28c3ce8e6920ca89fad4e748e5924f74a32fcc6f64d04b2e8",
          "0x6d3ce77cda7132ebd71a0cead2622598e307868d060d2ad16e04e1058143cf50",
          "0xe2a0278dde338b599b05f575c93bd3982e454e5cbfb95f8996da764bef35aac2",
          "0x01d5b68aa35474bd31a16188189de8f2cd25a12dbc98472d9c8e480cf45e86b8",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "44",
          "index": "2",
          "leafType": 1,
          "data": ""
        },
        "proof": [
          "0x2db6f113cd4caeab35b346bd85fbb6810377e48c6ee42ee4310edf8527169035",
          "0x17fb9857bdebcaaad4cdbbd42a38ead1ff15ae8266b9810dd4dd70d092a9fbf9",
          "0x58a01b05a96063746094debda125f5d6c39b84ecbde489fcea85a277380799b9",
          "0xd75c55c4276205475956dc1d3765c8ab5fb8f887a362eac56c3019b7e9261dcc",
          "0xa88f09f93862c32046d3da315d8acfec1dab373c56d8d1ceccda4da62154c92f",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "44",
          "index": "3",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aae60000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb680000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a5000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xc3fbd02d15aa4b8acbf126b50c474d9dcef416a73ee140098f9dbce786715acf",
          "0x07d5388a450a1a01e692c84d23c73757f903f7d79de0a0b8865fd7d99b2bcf30",
          "0x2c39e5264b90f51711f162a086cad2e3d50c579d8d97fe16591469031ca9b87c",
          "0xf73cb1f9802f0cd75a7c31b7e65defab4cd637b4d748e2ab28e0fd0ce631b17c",
          "0x9a3e24bcb0fe604251506f3b926d2def4e4793979f97dcba2e191cadb0231873",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "44",
          "index": "4",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aae60000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb6800000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xd813f495ede368f58cd0bde91e2b0805ef1a00ca47599d4d58934f3a148ddd74",
          "0x45edafb1c8673eabf6095ba37288ca0cb0d89f54643ab9825dc8e2dd060da9f6",
          "0xee88c091cfc96835add7935bab2819edce2b4024763cf7e75f7131f1c50fe75e",
          "0x4750eac2340b313b30c9b5729f68eda9e5e282de30ea035432cbd6b44b792808",
          "0x9a3e24bcb0fe604251506f3b926d2def4e4793979f97dcba2e191cadb0231873",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "44",
          "index": "5",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aae60000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb680000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xde20e2d5615ca34e3f27872dd9ca3727d73b25e121602bf92c3bd92face87701",
          "0x922223858dcbe63c7cace08bd207c41b4dcebaf0e939ffed94c01f059257cd90",
          "0x1097c61aedbee7b075626df55aaef139ef774b04321ec357d2ee3d8e5c188f70",
          "0x4750eac2340b313b30c9b5729f68eda9e5e282de30ea035432cbd6b44b792808",
          "0x9a3e24bcb0fe604251506f3b926d2def4e4793979f97dcba2e191cadb0231873",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "44",
          "index": "6",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aae60000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000024a6f9dae1000000000000000000000000855275ac7ea4cc4f324915b2eb48839e447e04bd00000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xb0e72dba4a0ee5d5bfe0cbe069380bc8eed0d7905326f9257ac147dc06effeab",
          "0x0349aabcbcf87a00ffb3e1d39d6a2b864be4a9573243e06009454748dc9c42b4",
          "0x6e0782c2ce5cbbf2693b53e9562ba324a42a6581b555f6bf5f59a7f393398255",
          "0xaa0ec7a734ed15d45a2eb9c46b603ba5d3772e4d17cd78db89b6308c94ca867e",
          "0x01d5b68aa35474bd31a16188189de8f2cd25a12dbc98472d9c8e480cf45e86b8",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "44",
          "index": "7",
          "leafType": 1,
          "data": "0x000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aae60000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb680000000000000000000000000912d7601569cbc2df8a7f0aae50bfd18e8c64d05000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xe9b6f48247e25fef3a08016e7c00712a74f7f7fa136316cfc71d2f726f6984ce",
          "0x9ba38350a486500d244873e49b61a6ac846817ab9851e2d0ec021d28b5705e8a",
          "0x846026e00e27b8fa974ca5f5a1a7eace18ac56b5155119ccb9cd7b64d06aa9b9",
          "0x92732731115fedbc7b99acd6da79a80ec6e2d52a632f4f091d9c1fdbd7d499db",
          "0xa10e8d0582ffaa4e005444ac6f15b911c2fa72e23c4d1007245ea888ed8debc6",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "44",
          "index": "8",
          "leafType": 1,
          "data": "0x000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aae60000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb68000000000000000000000000040c168503b9758540e18a79907f3fd8678c13f03000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xf08ba1d3a610cb87bb773d031d4e07f7968df89115bed4f51e8f9bb1b0e2b35b",
          "0xa7aaf4793df2417f35a3e06f3343949660b398b4b2d0c17e8e922361d3cb2c9d",
          "0x846026e00e27b8fa974ca5f5a1a7eace18ac56b5155119ccb9cd7b64d06aa9b9",
          "0x92732731115fedbc7b99acd6da79a80ec6e2d52a632f4f091d9c1fdbd7d499db",
          "0xa10e8d0582ffaa4e005444ac6f15b911c2fa72e23c4d1007245ea888ed8debc6",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "44",
          "index": "9",
          "leafType": 1,
          "data": "0x00000000000000000000000013b2211a7ca45db2808f6db05557ce5347e3634e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aae60000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000444ea59979000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a00000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x4167b8866c977b19dfde28c7436b79dbe390a508e9a19dbeaa194d99aeb157d4",
          "0x3c07560cdd582371b3d1e821ba3d70976527e3c687a0d097d1fba67aea71dfb8",
          "0x1d62343bffa293f817d145d3052ad717d6eeca3375255781bc7cf3a31bc25639",
          "0xd75c55c4276205475956dc1d3765c8ab5fb8f887a362eac56c3019b7e9261dcc",
          "0xa88f09f93862c32046d3da315d8acfec1dab373c56d8d1ceccda4da62154c92f",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "44",
          "index": "10",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aae60000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004452f7c988000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000001158e460913d0000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xe17b37f4cb31fd58995845c21eba67babf1e1423a07766bccc709bfd782b4acc",
          "0x03287e2f802cea3c23d51f4d9b4d56e51de333fd164fe391b6eb22586198861f",
          "0x1097c61aedbee7b075626df55aaef139ef774b04321ec357d2ee3d8e5c188f70",
          "0x4750eac2340b313b30c9b5729f68eda9e5e282de30ea035432cbd6b44b792808",
          "0x9a3e24bcb0fe604251506f3b926d2def4e4793979f97dcba2e191cadb0231873",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "46",
          "index": "0",
          "leafType": 0,
          "data": "0x000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a50000000000000000000000003d75d338b4711f8a33d293a2008f07a7125134020000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000f0000000000000000000000007e16116661ca8d66c73612382833153911fa03b100000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xdd24ee10798c2c90877d03fa9a04ee5949b8cda5884fa753fc03c3203c9f31d8",
          "0x922223858dcbe63c7cace08bd207c41b4dcebaf0e939ffed94c01f059257cd90",
          "0x1097c61aedbee7b075626df55aaef139ef774b04321ec357d2ee3d8e5c188f70",
          "0x4750eac2340b313b30c9b5729f68eda9e5e282de30ea035432cbd6b44b792808",
          "0x9a3e24bcb0fe604251506f3b926d2def4e4793979f97dcba2e191cadb0231873",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "46",
          "index": "1",
          "leafType": 1,
          "data": ""
        },
        "proof": [
          "0xc8cda63ccf7e62ca62059163c07100457afb3c6c99efee2c3204fd90639cda8c",
          "0xe2f1e9b8e6dc46369befba6e7230c5744cb047aef783a2733f58f677937a676b",
          "0xab9eb2b92875acfb253bed134c8e3bc224600ff8fd2368e7dc21779da4a29421",
          "0xf73cb1f9802f0cd75a7c31b7e65defab4cd637b4d748e2ab28e0fd0ce631b17c",
          "0x9a3e24bcb0fe604251506f3b926d2def4e4793979f97dcba2e191cadb0231873",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "46",
          "index": "2",
          "leafType": 1,
          "data": ""
        },
        "proof": [
          "0xc12c1f0c3c6fd931f50dc061240fb5fe8e446bb7ce40fcb24b3d306fc068ed44",
          "0x5bf1e0cab6406a9537d4828e218790b0c9dc72bb5f5612f6073fbff4ea1ee3c1",
          "0x14529e5533f2204184563af2844d10db0c8258fba2efd5d1c58d571683290648",
          "0xe2a0278dde338b599b05f575c93bd3982e454e5cbfb95f8996da764bef35aac2",
          "0x01d5b68aa35474bd31a16188189de8f2cd25a12dbc98472d9c8e480cf45e86b8",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "46",
          "index": "3",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aae60000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb680000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a5000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x21d822e0ee34146e3be62dc6470bba00de62aa28c5d73a6dbdb5158158443bc3",
          "0xe8431d4da61a3b90c27f6862b73a2af54a9c4caf901662c74cf942ef5e791cbe",
          "0xf437436623c3eef4d35cf50f75081e101220ac6121384b0ea8d04d99b391ae69",
          "0x3ad7a6de3ccd75b106f0e32cfc71a59815aa804517190f0a5c4410de645f7c8e",
          "0xb5865d8d613650df8f012689c3c0cd3cafa2ba3350af0f08fc8382e97e4a1c62",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "46",
          "index": "4",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aae60000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb6800000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x8ccaf17a15f5f2f06dd38fb98cf59901bcfa7763f375bbc9af12138e442933b8",
          "0xcbf9bfb26692541310ffc28e1093248f6266cb90866148e4292a356e6c085c10",
          "0x32895f3e700ac39202784a41ff51b97ef369b8b5aa9d1a9e5da37722e6261ec3",
          "0xaa0ec7a734ed15d45a2eb9c46b603ba5d3772e4d17cd78db89b6308c94ca867e",
          "0x01d5b68aa35474bd31a16188189de8f2cd25a12dbc98472d9c8e480cf45e86b8",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "46",
          "index": "5",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aae60000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb680000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xc40cd9634d9216de9e43ac64cf5ce753bd86f7d9b1c141b93efb3037ccf818be",
          "0x07d5388a450a1a01e692c84d23c73757f903f7d79de0a0b8865fd7d99b2bcf30",
          "0x2c39e5264b90f51711f162a086cad2e3d50c579d8d97fe16591469031ca9b87c",
          "0xf73cb1f9802f0cd75a7c31b7e65defab4cd637b4d748e2ab28e0fd0ce631b17c",
          "0x9a3e24bcb0fe604251506f3b926d2def4e4793979f97dcba2e191cadb0231873",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "46",
          "index": "6",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aae60000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000024a6f9dae1000000000000000000000000855275ac7ea4cc4f324915b2eb48839e447e04bd00000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x62bba7851ff85c760dbc7a57b68ed8af96fad28c1b957ee036b7222c00b8d867",
          "0x7a3b6b61bed539f34cf3a7136f7240aed6d0b7e6d33ff3d57f885859159c5cff",
          "0xe3cd4f0aab2dd970f0b0e3e01584b0edee0a34809bbe55733a4dce04f1e3d3bd",
          "0xa25edf683d049d1870adaa129433ce976a3d087446cf5cb8adea8cd1698ada8d",
          "0x516ce6f48ff49814be03849c7c249aea4b37a5e228bc59a3a06efb7cc829b4ed",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "46",
          "index": "7",
          "leafType": 1,
          "data": "0x000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aae60000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb680000000000000000000000000912d7601569cbc2df8a7f0aae50bfd18e8c64d05000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x9832c0c3517f48b52ef336cf66d6964054a900e7899ee9fc2a537db6ff9b14f2",
          "0x001ce366c6bfa0604ca8ddb18f00eb583afc210331438026ce9e0e463420f9fa",
          "0x32895f3e700ac39202784a41ff51b97ef369b8b5aa9d1a9e5da37722e6261ec3",
          "0xaa0ec7a734ed15d45a2eb9c46b603ba5d3772e4d17cd78db89b6308c94ca867e",
          "0x01d5b68aa35474bd31a16188189de8f2cd25a12dbc98472d9c8e480cf45e86b8",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "46",
          "index": "8",
          "leafType": 1,
          "data": "0x000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aae60000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb68000000000000000000000000040c168503b9758540e18a79907f3fd8678c13f03000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x5c2922a71a1ff79d2a01f3ced885bfde60d302e92ac167f1a9f15863ccd39090",
          "0xc051c8f82dcfd1c98d976aafee556d37c10f90d87f6606a777db9bd0ee09fccb",
          "0x80e11eb9928144ad66f178b9e8ba955ef1171ec498d4dbeec99c57521d5c9337",
          "0xa25edf683d049d1870adaa129433ce976a3d087446cf5cb8adea8cd1698ada8d",
          "0x516ce6f48ff49814be03849c7c249aea4b37a5e228bc59a3a06efb7cc829b4ed",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "46",
          "index": "9",
          "leafType": 1,
          "data": "0x00000000000000000000000013b2211a7ca45db2808f6db05557ce5347e3634e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aae60000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000444ea59979000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a00000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xb7c221c333da438f350bf71464b57e2a6bde29e7d3c686b7b06dfa30b47b253e",
          "0x21785a61c2f56fa28c3ce8e6920ca89fad4e748e5924f74a32fcc6f64d04b2e8",
          "0x6d3ce77cda7132ebd71a0cead2622598e307868d060d2ad16e04e1058143cf50",
          "0xe2a0278dde338b599b05f575c93bd3982e454e5cbfb95f8996da764bef35aac2",
          "0x01d5b68aa35474bd31a16188189de8f2cd25a12dbc98472d9c8e480cf45e86b8",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "46",
          "index": "10",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aae60000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004452f7c988000000000000000000000000000000000000000000000000000000000000a4b1000000000000000000000000000000000000000000000001f399b1438a10000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x2d6de8095e2b8e2b4484f3ff3df58835d8b692cdb1aa9598d99958085b56dd33",
          "0x17fb9857bdebcaaad4cdbbd42a38ead1ff15ae8266b9810dd4dd70d092a9fbf9",
          "0x58a01b05a96063746094debda125f5d6c39b84ecbde489fcea85a277380799b9",
          "0xd75c55c4276205475956dc1d3765c8ab5fb8f887a362eac56c3019b7e9261dcc",
          "0xa88f09f93862c32046d3da315d8acfec1dab373c56d8d1ceccda4da62154c92f",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "46",
          "index": "11",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aae60000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004452f7c988000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x35770e2c2e300141364ad197190e458754f57c7736f9b1a4dd070facdb36f1c1",
          "0xe61de257e044bdb7cd9a00d20e6234fd360f79d70c9bebc91df9e31a8f0d1e56",
          "0x1d62343bffa293f817d145d3052ad717d6eeca3375255781bc7cf3a31bc25639",
          "0xd75c55c4276205475956dc1d3765c8ab5fb8f887a362eac56c3019b7e9261dcc",
          "0xa88f09f93862c32046d3da315d8acfec1dab373c56d8d1ceccda4da62154c92f",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "46",
          "index": "12",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aae60000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004452f7c988000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000002086ac35105260000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xbf50e4b039cabb342ae77d1b1674a4bd0e06b469a464cb91bcd1a162e338b3e5",
          "0x5bf1e0cab6406a9537d4828e218790b0c9dc72bb5f5612f6073fbff4ea1ee3c1",
          "0x14529e5533f2204184563af2844d10db0c8258fba2efd5d1c58d571683290648",
          "0xe2a0278dde338b599b05f575c93bd3982e454e5cbfb95f8996da764bef35aac2",
          "0x01d5b68aa35474bd31a16188189de8f2cd25a12dbc98472d9c8e480cf45e86b8",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "46",
          "index": "13",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aae60000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004452f7c98800000000000000000000000000000000000000000000000000000000000000890000000000000000000000000000000000000000000000001bc16d674ec8000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x51e5302fec8870eb55e5a4bb8f83b4afc6031d28301ddbf0521ee117839dc19d",
          "0x127aa1043494d928c159955f82094b05598a92fae67eeb0ff0eb1c307e92c015",
          "0x63fa963513c75e6946235c6b891e7d0f4e49af670336707560914a22436cf662",
          "0x5f30486c17a475b5f0361633bc3f1bf14dcefe5e7b10606233cb2ec73b711261",
          "0xa88f09f93862c32046d3da315d8acfec1dab373c56d8d1ceccda4da62154c92f",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "46",
          "index": "14",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aae60000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004452f7c98800000000000000000000000000000000000000000000000000000000000005040000000000000000000000000000000000000000000000001bc16d674ec8000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x2c41b26b2640fd7fcd388efa02deac473a94ed35eb65cf658ae8e35cee513adb",
          "0x4e16264ab0bce6fe07862c3fbebd9fb1511e680a21c42a6fa9c6b17a048a28c3",
          "0x0f829d23b9ee0d8bd5f436f02e72ace6fdc76d2bdb2ee214ca34609932bcffae",
          "0x3ad7a6de3ccd75b106f0e32cfc71a59815aa804517190f0a5c4410de645f7c8e",
          "0xb5865d8d613650df8f012689c3c0cd3cafa2ba3350af0f08fc8382e97e4a1c62",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "137",
          "index": "0",
          "leafType": 0,
          "data": "0x000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a50000000000000000000000003d75d338b4711f8a33d293a2008f07a7125134020000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000007e16116661ca8d66c73612382833153911fa03b100000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xb32b04f8edbf77e22f3ad95d7fc27eadfea4df55ab111ba8c792cc11df2fad30",
          "0x3ff8a5a70529bcaa66e850370d389190b34098063e5b7e94091a0ec70ded4ef7",
          "0x6d3ce77cda7132ebd71a0cead2622598e307868d060d2ad16e04e1058143cf50",
          "0xe2a0278dde338b599b05f575c93bd3982e454e5cbfb95f8996da764bef35aac2",
          "0x01d5b68aa35474bd31a16188189de8f2cd25a12dbc98472d9c8e480cf45e86b8",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "137",
          "index": "1",
          "leafType": 1,
          "data": ""
        },
        "proof": [
          "0xc6389fcc518c7e2ff28ad78b805cfc0dfe1a663a77e45ee797cfba108e6537e1",
          "0x06eb6d1e6c88ba6611dc526ff4e53a2ed63ec4775761a7fdf2b5f30f329792e2",
          "0x2c39e5264b90f51711f162a086cad2e3d50c579d8d97fe16591469031ca9b87c",
          "0xf73cb1f9802f0cd75a7c31b7e65defab4cd637b4d748e2ab28e0fd0ce631b17c",
          "0x9a3e24bcb0fe604251506f3b926d2def4e4793979f97dcba2e191cadb0231873",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "137",
          "index": "2",
          "leafType": 1,
          "data": ""
        },
        "proof": [
          "0xfd75dcf01c133e5566ff75fb7e1666646bdbdafcb152426804d82a9ea822da30",
          "0xa3a4bb3b8edfcd1d467e25890670d40dddaf3a9b24a417270d1a0953c1f69a4c",
          "0x058d5be6042401cf593790f3c1d118ceb4ccb501e7b8638f0f2710afb643577d",
          "0x875af909d0124ee04c8fd767736d91f675ddec48378c4fb2217002b7ce2929a1",
          "0xa10e8d0582ffaa4e005444ac6f15b911c2fa72e23c4d1007245ea888ed8debc6",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "137",
          "index": "3",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f0800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb680000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a5000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xf971905202085c14aceec1e6c6a2f537285f6e962e9dc32342dc88333b983a0f",
          "0xf141dc96f4234775e7702e05a611aa54db31b90449f9f8a5055876c8f00ad9b2",
          "0x276c768035a8b0259d1949ada746730463330f5eea64af83490327043c771a20",
          "0x875af909d0124ee04c8fd767736d91f675ddec48378c4fb2217002b7ce2929a1",
          "0xa10e8d0582ffaa4e005444ac6f15b911c2fa72e23c4d1007245ea888ed8debc6",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "137",
          "index": "4",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f0800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb6800000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xfac41c9b5dec9cce52975e0bdb56a5967f723ae79352031b98f7d4e45678937e",
          "0x37b8ed31985e03657a09ceb1a53abda2c10b4fd9c8b6e843366971cb0578793d",
          "0x276c768035a8b0259d1949ada746730463330f5eea64af83490327043c771a20",
          "0x875af909d0124ee04c8fd767736d91f675ddec48378c4fb2217002b7ce2929a1",
          "0xa10e8d0582ffaa4e005444ac6f15b911c2fa72e23c4d1007245ea888ed8debc6",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "137",
          "index": "5",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f0800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb680000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xf40b9dfa4adf6f3aaf9336d77a217e24f33000e45c6f90e3dd4002dc2fc5b850",
          "0xc571725cb9aa10747b7920326f8bdd141beeae3822ff0bc99c06dd5d6e382891",
          "0xb726a8e6dd097be8505fbce04843a9c9d1341216fa8d6c8096c5e828eed90736",
          "0x92732731115fedbc7b99acd6da79a80ec6e2d52a632f4f091d9c1fdbd7d499db",
          "0xa10e8d0582ffaa4e005444ac6f15b911c2fa72e23c4d1007245ea888ed8debc6",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "137",
          "index": "6",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f15e00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000024a6f9dae1000000000000000000000000855275ac7ea4cc4f324915b2eb48839e447e04bd00000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xf715a654888bd4cc5df3a7adff730590b3019823d178c34cf42a8b23ec199684",
          "0x1ebb3fb5ef1d3595e0212b4ef757a1ae0856d8b41b3c680094b772a9c0630522",
          "0xb726a8e6dd097be8505fbce04843a9c9d1341216fa8d6c8096c5e828eed90736",
          "0x92732731115fedbc7b99acd6da79a80ec6e2d52a632f4f091d9c1fdbd7d499db",
          "0xa10e8d0582ffaa4e005444ac6f15b911c2fa72e23c4d1007245ea888ed8debc6",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "137",
          "index": "7",
          "leafType": 1,
          "data": "0x000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020a8600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb680000000000000000000000000912d7601569cbc2df8a7f0aae50bfd18e8c64d05000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x4998d814a310231c2a5b2ef4779098a09e4a77d41c910afb2e36dd83ac8462e0",
          "0xd10f264a7924f7828d4a496ddc7a938ba300a8e8331fada053bc9795947bea82",
          "0x269d66114a2d46f289ee7508b8cbd176862a4c24a85922b3318b4e80b33f25dd",
          "0x5f30486c17a475b5f0361633bc3f1bf14dcefe5e7b10606233cb2ec73b711261",
          "0xa88f09f93862c32046d3da315d8acfec1dab373c56d8d1ceccda4da62154c92f",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "137",
          "index": "8",
          "leafType": 1,
          "data": "0x000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024ef600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb68000000000000000000000000040c168503b9758540e18a79907f3fd8678c13f03000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x62a1f361b1f25261e2ec823dcce2d141c1c85d321c9b72e216f01211162e1759",
          "0x7a3b6b61bed539f34cf3a7136f7240aed6d0b7e6d33ff3d57f885859159c5cff",
          "0xe3cd4f0aab2dd970f0b0e3e01584b0edee0a34809bbe55733a4dce04f1e3d3bd",
          "0xa25edf683d049d1870adaa129433ce976a3d087446cf5cb8adea8cd1698ada8d",
          "0x516ce6f48ff49814be03849c7c249aea4b37a5e228bc59a3a06efb7cc829b4ed",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "137",
          "index": "9",
          "leafType": 1,
          "data": "0x00000000000000000000000013b2211a7ca45db2808f6db05557ce5347e3634e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020bc500000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000444ea59979000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a00000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x7c1f3419a457fc171ea8aa9b663cdc507cb927e3e08ce5b8ddc41cc15b45613a",
          "0x9cdb54b2d2cf0af9ab645cf18351d58f3220a69c65187f14df8885941fa154bc",
          "0x8189417b502aefc0129380a51d6013cb0701a9e159be6329937b40c815e33e70",
          "0xcb8e1bb39f903eb5fe5cc81c62aff55d71533f6aa6394ba01f989589e3aafd87",
          "0x516ce6f48ff49814be03849c7c249aea4b37a5e228bc59a3a06efb7cc829b4ed",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "137",
          "index": "10",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024eaa00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004452f7c988000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x20ac5f6293b94213c572eacf8c8d88a895a4b830f0efbc2028fded608fab48c6",
          "0xb3d759938a96691d7a90775c2927679cb98c528ce8ec553e3ee7a86b7ccfd0b3",
          "0x919cf137a82992a13e7816e95f68931f91adc44a1bc3e8c7b1009d6efe2a94d3",
          "0x1b390562e17cf8685325cb38f9e5dd6b413f70278f1b48bfdbb61c311fd738b4",
          "0xb5865d8d613650df8f012689c3c0cd3cafa2ba3350af0f08fc8382e97e4a1c62",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "1284",
          "index": "0",
          "leafType": 0,
          "data": "0x000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a50000000000000000000000003d75d338b4711f8a33d293a2008f07a7125134020000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000007e16116661ca8d66c73612382833153911fa03b100000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x60f0a06084ba5c1eee21ace8ff58baefb0382b3564de7e5da896ad9f3a1ec880",
          "0x742ee9d65a93aa5338b685026e9551acdf8d1597a30be62dbe2d7501ac13ee19",
          "0x80e11eb9928144ad66f178b9e8ba955ef1171ec498d4dbeec99c57521d5c9337",
          "0xa25edf683d049d1870adaa129433ce976a3d087446cf5cb8adea8cd1698ada8d",
          "0x516ce6f48ff49814be03849c7c249aea4b37a5e228bc59a3a06efb7cc829b4ed",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "1284",
          "index": "1",
          "leafType": 1,
          "data": ""
        },
        "proof": [
          "0x7bfa5c88dfd27e6c7c48d00b57c20ca665929b1d0808a5efe9414c97e70e9d76",
          "0x9cdb54b2d2cf0af9ab645cf18351d58f3220a69c65187f14df8885941fa154bc",
          "0x8189417b502aefc0129380a51d6013cb0701a9e159be6329937b40c815e33e70",
          "0xcb8e1bb39f903eb5fe5cc81c62aff55d71533f6aa6394ba01f989589e3aafd87",
          "0x516ce6f48ff49814be03849c7c249aea4b37a5e228bc59a3a06efb7cc829b4ed",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "1284",
          "index": "2",
          "leafType": 1,
          "data": ""
        },
        "proof": [
          "0x29bfbe9faa061e1e699f14ae738934997a69900bbbedf1c8b41965f06b61b35b",
          "0xbdfee3b53f14e01c977a20676b762ac6c32f12647fa66e59934e05ade8044801",
          "0xf437436623c3eef4d35cf50f75081e101220ac6121384b0ea8d04d99b391ae69",
          "0x3ad7a6de3ccd75b106f0e32cfc71a59815aa804517190f0a5c4410de645f7c8e",
          "0xb5865d8d613650df8f012689c3c0cd3cafa2ba3350af0f08fc8382e97e4a1c62",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "1284",
          "index": "3",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a037a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb680000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a5000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x27c8e55f604942ca54d5bebbcb058f8726968a79bc1200017d7ceeebb29030a9",
          "0xbdfee3b53f14e01c977a20676b762ac6c32f12647fa66e59934e05ade8044801",
          "0xf437436623c3eef4d35cf50f75081e101220ac6121384b0ea8d04d99b391ae69",
          "0x3ad7a6de3ccd75b106f0e32cfc71a59815aa804517190f0a5c4410de645f7c8e",
          "0xb5865d8d613650df8f012689c3c0cd3cafa2ba3350af0f08fc8382e97e4a1c62",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "1284",
          "index": "4",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a037a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb6800000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x5df8bcf8f1fd1d6cade1aca3343f1d5fc6b01769a3edcc7e7a2ea2e0bdd0eec7",
          "0xc051c8f82dcfd1c98d976aafee556d37c10f90d87f6606a777db9bd0ee09fccb",
          "0x80e11eb9928144ad66f178b9e8ba955ef1171ec498d4dbeec99c57521d5c9337",
          "0xa25edf683d049d1870adaa129433ce976a3d087446cf5cb8adea8cd1698ada8d",
          "0x516ce6f48ff49814be03849c7c249aea4b37a5e228bc59a3a06efb7cc829b4ed",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "1284",
          "index": "5",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a037a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb680000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xee8d89e809743c9ce46381dd18bfd91201c7fa40319a90be2947cdc03fbac746",
          "0x9ba38350a486500d244873e49b61a6ac846817ab9851e2d0ec021d28b5705e8a",
          "0x846026e00e27b8fa974ca5f5a1a7eace18ac56b5155119ccb9cd7b64d06aa9b9",
          "0x92732731115fedbc7b99acd6da79a80ec6e2d52a632f4f091d9c1fdbd7d499db",
          "0xa10e8d0582ffaa4e005444ac6f15b911c2fa72e23c4d1007245ea888ed8debc6",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "1284",
          "index": "6",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a037a000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000024a6f9dae1000000000000000000000000855275ac7ea4cc4f324915b2eb48839e447e04bd00000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xaafd28666501e2a3794b39ab064aba4bbba1e2a46047b1c37deccf57d6ab54b3",
          "0xa7c6485b22f47ecaf4d3afcb2a43c92e7b70c870ed7dd2259c1dae3574424c11",
          "0x6e0782c2ce5cbbf2693b53e9562ba324a42a6581b555f6bf5f59a7f393398255",
          "0xaa0ec7a734ed15d45a2eb9c46b603ba5d3772e4d17cd78db89b6308c94ca867e",
          "0x01d5b68aa35474bd31a16188189de8f2cd25a12dbc98472d9c8e480cf45e86b8",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "1284",
          "index": "7",
          "leafType": 1,
          "data": "0x000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a037a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb680000000000000000000000000912d7601569cbc2df8a7f0aae50bfd18e8c64d05000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xc758d7e3e32dcb3a992bfd3a6a006497f30e3ac1780dbd10cc4cc7d9eb4ad1e5",
          "0x06eb6d1e6c88ba6611dc526ff4e53a2ed63ec4775761a7fdf2b5f30f329792e2",
          "0x2c39e5264b90f51711f162a086cad2e3d50c579d8d97fe16591469031ca9b87c",
          "0xf73cb1f9802f0cd75a7c31b7e65defab4cd637b4d748e2ab28e0fd0ce631b17c",
          "0x9a3e24bcb0fe604251506f3b926d2def4e4793979f97dcba2e191cadb0231873",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "1284",
          "index": "8",
          "leafType": 1,
          "data": "0x000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a037a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb68000000000000000000000000040c168503b9758540e18a79907f3fd8678c13f03000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xcb4ba7e9edb9d7ea7e45c9da7ba11ee1ff64d673ac6354b9a2eecca1ad170832",
          "0xa61463bb26269882707d748482d4bf08657c1cb519ed5ba62a32acaf36e4f964",
          "0xab9eb2b92875acfb253bed134c8e3bc224600ff8fd2368e7dc21779da4a29421",
          "0xf73cb1f9802f0cd75a7c31b7e65defab4cd637b4d748e2ab28e0fd0ce631b17c",
          "0x9a3e24bcb0fe604251506f3b926d2def4e4793979f97dcba2e191cadb0231873",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "1284",
          "index": "9",
          "leafType": 1,
          "data": "0x00000000000000000000000013b2211a7ca45db2808f6db05557ce5347e3634e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a037a000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000444ea59979000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a00000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xa0e458020219f9af6c96a268e5a53bb843f8640b70e4cd30f1020c5b5abfa868",
          "0x001ce366c6bfa0604ca8ddb18f00eb583afc210331438026ce9e0e463420f9fa",
          "0x32895f3e700ac39202784a41ff51b97ef369b8b5aa9d1a9e5da37722e6261ec3",
          "0xaa0ec7a734ed15d45a2eb9c46b603ba5d3772e4d17cd78db89b6308c94ca867e",
          "0x01d5b68aa35474bd31a16188189de8f2cd25a12dbc98472d9c8e480cf45e86b8",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "1284",
          "index": "10",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a037a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004452f7c988000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000058d15e1762800000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xf929a7918324d3867003be30780a15a735628e3927b67d419696e515872d49c8",
          "0xf141dc96f4234775e7702e05a611aa54db31b90449f9f8a5055876c8f00ad9b2",
          "0x276c768035a8b0259d1949ada746730463330f5eea64af83490327043c771a20",
          "0x875af909d0124ee04c8fd767736d91f675ddec48378c4fb2217002b7ce2929a1",
          "0xa10e8d0582ffaa4e005444ac6f15b911c2fa72e23c4d1007245ea888ed8debc6",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "2818",
          "index": "0",
          "leafType": 0,
          "data": "0x000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a50000000000000000000000003d75d338b4711f8a33d293a2008f07a7125134020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000007e16116661ca8d66c73612382833153911fa03b100000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xfe30b9386cc2ed7f5ac7d111bf24957fd834be243256a9719b81f3681ba62d2a",
          "0xa3a4bb3b8edfcd1d467e25890670d40dddaf3a9b24a417270d1a0953c1f69a4c",
          "0x058d5be6042401cf593790f3c1d118ceb4ccb501e7b8638f0f2710afb643577d",
          "0x875af909d0124ee04c8fd767736d91f675ddec48378c4fb2217002b7ce2929a1",
          "0xa10e8d0582ffaa4e005444ac6f15b911c2fa72e23c4d1007245ea888ed8debc6",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "2818",
          "index": "1",
          "leafType": 1,
          "data": ""
        },
        "proof": [
          "0xdba305d181c2abd493bf7b61e7f0f42102cfc1ea52a6c7aa86ca9e1519f73ce8",
          "0xcd50d58d0fa29d1bb90e3b2bf8edf5c79ba031a7e22b868ef28c198fab7a9882",
          "0xee88c091cfc96835add7935bab2819edce2b4024763cf7e75f7131f1c50fe75e",
          "0x4750eac2340b313b30c9b5729f68eda9e5e282de30ea035432cbd6b44b792808",
          "0x9a3e24bcb0fe604251506f3b926d2def4e4793979f97dcba2e191cadb0231873",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "2818",
          "index": "2",
          "leafType": 1,
          "data": ""
        },
        "proof": [
          "0xb907aba0e8f2672af55663aa6fc32fea15a6df14d559ceb790b37b01b7a8de70",
          "0x711e2117335b72ec5089ed759984e3954ff3cef0fddc3ea52039f2516e29274a",
          "0x14529e5533f2204184563af2844d10db0c8258fba2efd5d1c58d571683290648",
          "0xe2a0278dde338b599b05f575c93bd3982e454e5cbfb95f8996da764bef35aac2",
          "0x01d5b68aa35474bd31a16188189de8f2cd25a12dbc98472d9c8e480cf45e86b8",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "2818",
          "index": "3",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f0800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb680000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a5000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x48721cd4f51cbd72265b9daa3a4d5fb8a5bbb668a1ab32755ebabb2f6e1c3bc5",
          "0x87b0b567e39f783bfef380b0adeb511f53ff157cf4d52bc235b4a15b5cd9c749",
          "0x269d66114a2d46f289ee7508b8cbd176862a4c24a85922b3318b4e80b33f25dd",
          "0x5f30486c17a475b5f0361633bc3f1bf14dcefe5e7b10606233cb2ec73b711261",
          "0xa88f09f93862c32046d3da315d8acfec1dab373c56d8d1ceccda4da62154c92f",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "2818",
          "index": "4",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f0800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb6800000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xf2e79cb9efebacf7f46f2b5c4467f4624d83e16d51d72ef6b3cd34567418c6e7",
          "0xc571725cb9aa10747b7920326f8bdd141beeae3822ff0bc99c06dd5d6e382891",
          "0xb726a8e6dd097be8505fbce04843a9c9d1341216fa8d6c8096c5e828eed90736",
          "0x92732731115fedbc7b99acd6da79a80ec6e2d52a632f4f091d9c1fdbd7d499db",
          "0xa10e8d0582ffaa4e005444ac6f15b911c2fa72e23c4d1007245ea888ed8debc6",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "2818",
          "index": "5",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f0800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb680000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x7c92932f29c6e20192588a30fc0d84ac201d6e72bff2b710c3a4b955ef7875de",
          "0xc8b116d9d2fdb961f415e12dccedb9b78e78f3692044d6509de2f135c24daed7",
          "0x8189417b502aefc0129380a51d6013cb0701a9e159be6329937b40c815e33e70",
          "0xcb8e1bb39f903eb5fe5cc81c62aff55d71533f6aa6394ba01f989589e3aafd87",
          "0x516ce6f48ff49814be03849c7c249aea4b37a5e228bc59a3a06efb7cc829b4ed",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "2818",
          "index": "6",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f15e00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000024a6f9dae1000000000000000000000000855275ac7ea4cc4f324915b2eb48839e447e04bd00000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xd50747287dfba345515194647092b4cc3d8cef799dbf37045ad6277874054e9d",
          "0x45edafb1c8673eabf6095ba37288ca0cb0d89f54643ab9825dc8e2dd060da9f6",
          "0xee88c091cfc96835add7935bab2819edce2b4024763cf7e75f7131f1c50fe75e",
          "0x4750eac2340b313b30c9b5729f68eda9e5e282de30ea035432cbd6b44b792808",
          "0x9a3e24bcb0fe604251506f3b926d2def4e4793979f97dcba2e191cadb0231873",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "2818",
          "index": "7",
          "leafType": 1,
          "data": "0x000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020a8600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb680000000000000000000000000912d7601569cbc2df8a7f0aae50bfd18e8c64d05000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x2f97df26ed763330ed5ac11a2106228e6295522427ff2e6f3506940671054e35",
          "0x2d1601c3b13c100b122479ea43e81bb59e88f9973148317edaa361c05a40b64f",
          "0x58a01b05a96063746094debda125f5d6c39b84ecbde489fcea85a277380799b9",
          "0xd75c55c4276205475956dc1d3765c8ab5fb8f887a362eac56c3019b7e9261dcc",
          "0xa88f09f93862c32046d3da315d8acfec1dab373c56d8d1ceccda4da62154c92f",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "2818",
          "index": "8",
          "leafType": 1,
          "data": "0x000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024ef600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb68000000000000000000000000040c168503b9758540e18a79907f3fd8678c13f03000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x42c805d007775a9356df33e1a34bcbfc1ba6d6fc609a66450611b3afbcfaa65d",
          "0x87b0b567e39f783bfef380b0adeb511f53ff157cf4d52bc235b4a15b5cd9c749",
          "0x269d66114a2d46f289ee7508b8cbd176862a4c24a85922b3318b4e80b33f25dd",
          "0x5f30486c17a475b5f0361633bc3f1bf14dcefe5e7b10606233cb2ec73b711261",
          "0xa88f09f93862c32046d3da315d8acfec1dab373c56d8d1ceccda4da62154c92f",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "2818",
          "index": "9",
          "leafType": 1,
          "data": "0x00000000000000000000000013b2211a7ca45db2808f6db05557ce5347e3634e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020bc500000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000444ea59979000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a00000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x7119273a6f2b75bc35a291f320962b899af38dfd9a80f6dbd62fd0204c41e0ff",
          "0x4e88f51472407ce1a1ad7b2fd3be3aecb8a62e8f95f5143e438114e6d24f6dc0",
          "0x0257a72ae4330aecbe4cda624a79251bb5c4552fb264bb8a8e89c1f60aef0f47",
          "0xcb8e1bb39f903eb5fe5cc81c62aff55d71533f6aa6394ba01f989589e3aafd87",
          "0x516ce6f48ff49814be03849c7c249aea4b37a5e228bc59a3a06efb7cc829b4ed",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "2818",
          "index": "10",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024eaa00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004452f7c988000000000000000000000000000000000000000000000000000000000000a4b10000000000000000000000000000000000000000000000000000246139ca800000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xfe7ba997434a3fc4d3518f1119dc3bb1f11f7eb00d9a36e7d093f65e6883eebf",
          "0xde55929a29bab8b9f4613359c97576435878a90c6b8a502d9265d3f567d8c5aa",
          "0x058d5be6042401cf593790f3c1d118ceb4ccb501e7b8638f0f2710afb643577d",
          "0x875af909d0124ee04c8fd767736d91f675ddec48378c4fb2217002b7ce2929a1",
          "0xa10e8d0582ffaa4e005444ac6f15b911c2fa72e23c4d1007245ea888ed8debc6",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "42161",
          "index": "0",
          "leafType": 0,
          "data": "0x000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a50000000000000000000000003d75d338b4711f8a33d293a2008f07a7125134020000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000007e16116661ca8d66c73612382833153911fa03b100000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x5b4a045c7dad2decd1c0471827644d337274ccfa04f038e1c97233c739fdb400",
          "0xfe99e5228d8ce4e1da815ebce56d09d066fa390db8766cf7c4bc0507f377e69a",
          "0x63fa963513c75e6946235c6b891e7d0f4e49af670336707560914a22436cf662",
          "0x5f30486c17a475b5f0361633bc3f1bf14dcefe5e7b10606233cb2ec73b711261",
          "0xa88f09f93862c32046d3da315d8acfec1dab373c56d8d1ceccda4da62154c92f",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "42161",
          "index": "1",
          "leafType": 1,
          "data": ""
        },
        "proof": [
          "0x363fc3805f0d9ff4e5f865e5922c4166e0e8a5aea92ab8436272d7c8e251fa23",
          "0x3c07560cdd582371b3d1e821ba3d70976527e3c687a0d097d1fba67aea71dfb8",
          "0x1d62343bffa293f817d145d3052ad717d6eeca3375255781bc7cf3a31bc25639",
          "0xd75c55c4276205475956dc1d3765c8ab5fb8f887a362eac56c3019b7e9261dcc",
          "0xa88f09f93862c32046d3da315d8acfec1dab373c56d8d1ceccda4da62154c92f",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "42161",
          "index": "2",
          "leafType": 1,
          "data": ""
        },
        "proof": [
          "0x787934d41fc1ca18c4125b4728257a6a8e3472125f77fcd9d28720d7217d7020",
          "0x4e88f51472407ce1a1ad7b2fd3be3aecb8a62e8f95f5143e438114e6d24f6dc0",
          "0x0257a72ae4330aecbe4cda624a79251bb5c4552fb264bb8a8e89c1f60aef0f47",
          "0xcb8e1bb39f903eb5fe5cc81c62aff55d71533f6aa6394ba01f989589e3aafd87",
          "0x516ce6f48ff49814be03849c7c249aea4b37a5e228bc59a3a06efb7cc829b4ed",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "42161",
          "index": "3",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f0800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb680000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a5000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x2ca6e63cb0abfbd20e749cdecdab651c437f2747eb6c10e47225819efa1f8e84",
          "0xcc47e965cf3ef6f87e6966a407140c8a8187333769a62027a9c07daf8652eeb7",
          "0x0f829d23b9ee0d8bd5f436f02e72ace6fdc76d2bdb2ee214ca34609932bcffae",
          "0x3ad7a6de3ccd75b106f0e32cfc71a59815aa804517190f0a5c4410de645f7c8e",
          "0xb5865d8d613650df8f012689c3c0cd3cafa2ba3350af0f08fc8382e97e4a1c62",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "42161",
          "index": "4",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f0800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb6800000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xfbef65c8a7555fa6312f8f6f36670e4f3a5204212f5e22f31d9d30a7010e9235",
          "0x37b8ed31985e03657a09ceb1a53abda2c10b4fd9c8b6e843366971cb0578793d",
          "0x276c768035a8b0259d1949ada746730463330f5eea64af83490327043c771a20",
          "0x875af909d0124ee04c8fd767736d91f675ddec48378c4fb2217002b7ce2929a1",
          "0xa10e8d0582ffaa4e005444ac6f15b911c2fa72e23c4d1007245ea888ed8debc6",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "42161",
          "index": "5",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f0800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb680000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xf2868b558bed4af50e3ca9c040ff4de8d5b9c50a0be6468aff85ad6d34d6e60e",
          "0xa7aaf4793df2417f35a3e06f3343949660b398b4b2d0c17e8e922361d3cb2c9d",
          "0x846026e00e27b8fa974ca5f5a1a7eace18ac56b5155119ccb9cd7b64d06aa9b9",
          "0x92732731115fedbc7b99acd6da79a80ec6e2d52a632f4f091d9c1fdbd7d499db",
          "0xa10e8d0582ffaa4e005444ac6f15b911c2fa72e23c4d1007245ea888ed8debc6",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "42161",
          "index": "6",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f15e00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000024a6f9dae1000000000000000000000000855275ac7ea4cc4f324915b2eb48839e447e04bd00000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xf90c2f61ac9bd7a1641ebc17cbf0c893e7189e447d9557f6e1c23abd4f737ceb",
          "0x1ebb3fb5ef1d3595e0212b4ef757a1ae0856d8b41b3c680094b772a9c0630522",
          "0xb726a8e6dd097be8505fbce04843a9c9d1341216fa8d6c8096c5e828eed90736",
          "0x92732731115fedbc7b99acd6da79a80ec6e2d52a632f4f091d9c1fdbd7d499db",
          "0xa10e8d0582ffaa4e005444ac6f15b911c2fa72e23c4d1007245ea888ed8debc6",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "42161",
          "index": "7",
          "leafType": 1,
          "data": "0x000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020a8600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb680000000000000000000000000912d7601569cbc2df8a7f0aae50bfd18e8c64d05000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xa1d915c6f2f5df7d8eec50ff46ca2164b814b9f8a5723897798b6dcd1f03735b",
          "0xa7c6485b22f47ecaf4d3afcb2a43c92e7b70c870ed7dd2259c1dae3574424c11",
          "0x6e0782c2ce5cbbf2693b53e9562ba324a42a6581b555f6bf5f59a7f393398255",
          "0xaa0ec7a734ed15d45a2eb9c46b603ba5d3772e4d17cd78db89b6308c94ca867e",
          "0x01d5b68aa35474bd31a16188189de8f2cd25a12dbc98472d9c8e480cf45e86b8",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "42161",
          "index": "8",
          "leafType": 1,
          "data": "0x000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024ef600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb68000000000000000000000000040c168503b9758540e18a79907f3fd8678c13f03000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x63816dfad8761c1cab59fe9d0aa6805d0553e5ae5857aef14e853b7129c26af0",
          "0xbe240f5d842b07d1e8076cd8ae19770c9e74890566cf6f5a7d13bdd107c2eeb2",
          "0xe3cd4f0aab2dd970f0b0e3e01584b0edee0a34809bbe55733a4dce04f1e3d3bd",
          "0xa25edf683d049d1870adaa129433ce976a3d087446cf5cb8adea8cd1698ada8d",
          "0x516ce6f48ff49814be03849c7c249aea4b37a5e228bc59a3a06efb7cc829b4ed",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "42161",
          "index": "9",
          "leafType": 1,
          "data": "0x00000000000000000000000013b2211a7ca45db2808f6db05557ce5347e3634e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020bc500000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000444ea59979000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a00000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x576dee0c01c9f71d86c55f8fbce930d577e6cb28a3ff0f01cd9e68f672abc35b",
          "0x127aa1043494d928c159955f82094b05598a92fae67eeb0ff0eb1c307e92c015",
          "0x63fa963513c75e6946235c6b891e7d0f4e49af670336707560914a22436cf662",
          "0x5f30486c17a475b5f0361633bc3f1bf14dcefe5e7b10606233cb2ec73b711261",
          "0xa88f09f93862c32046d3da315d8acfec1dab373c56d8d1ceccda4da62154c92f",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "42161",
          "index": "10",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024eaa00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004452f7c9880000000000000000000000000000000000000000000000000000000000013e310000000000000000000000000000000000000000000000000000246139ca800000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x60a49a7c1a6f3dee52f3fb8cce6356c2b74733ddcdcfa6430df816150a33e0c5",
          "0x742ee9d65a93aa5338b685026e9551acdf8d1597a30be62dbe2d7501ac13ee19",
          "0x80e11eb9928144ad66f178b9e8ba955ef1171ec498d4dbeec99c57521d5c9337",
          "0xa25edf683d049d1870adaa129433ce976a3d087446cf5cb8adea8cd1698ada8d",
          "0x516ce6f48ff49814be03849c7c249aea4b37a5e228bc59a3a06efb7cc829b4ed",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "42161",
          "index": "11",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024eaa00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004452f7c988000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000001d1a94a200000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x1d35fbe0d7732ba9b34e91a4bdd0c600d2e963fc461709b4882c5c09d73efc5e",
          "0xb3d759938a96691d7a90775c2927679cb98c528ce8ec553e3ee7a86b7ccfd0b3",
          "0x919cf137a82992a13e7816e95f68931f91adc44a1bc3e8c7b1009d6efe2a94d3",
          "0x1b390562e17cf8685325cb38f9e5dd6b413f70278f1b48bfdbb61c311fd738b4",
          "0xb5865d8d613650df8f012689c3c0cd3cafa2ba3350af0f08fc8382e97e4a1c62",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "42161",
          "index": "12",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024eaa00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004452f7c988000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000071afd498d000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x68f53fb59d6be2c229a01fda35cf69c42fe223dda144c80cde0dc0e46b846b74",
          "0xbe240f5d842b07d1e8076cd8ae19770c9e74890566cf6f5a7d13bdd107c2eeb2",
          "0xe3cd4f0aab2dd970f0b0e3e01584b0edee0a34809bbe55733a4dce04f1e3d3bd",
          "0xa25edf683d049d1870adaa129433ce976a3d087446cf5cb8adea8cd1698ada8d",
          "0x516ce6f48ff49814be03849c7c249aea4b37a5e228bc59a3a06efb7cc829b4ed",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "42161",
          "index": "13",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024eaa00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004452f7c9880000000000000000000000000000000000000000000000000000000000000b020000000000000000000000000000000000000000000000000000246139ca800000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xb44ef2be9976323aac5461a8970802d0c0d3cc13ec9363c7161343213327b87d",
          "0x3ff8a5a70529bcaa66e850370d389190b34098063e5b7e94091a0ec70ded4ef7",
          "0x6d3ce77cda7132ebd71a0cead2622598e307868d060d2ad16e04e1058143cf50",
          "0xe2a0278dde338b599b05f575c93bd3982e454e5cbfb95f8996da764bef35aac2",
          "0x01d5b68aa35474bd31a16188189de8f2cd25a12dbc98472d9c8e480cf45e86b8",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "81457",
          "index": "0",
          "leafType": 0,
          "data": "0x000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a50000000000000000000000003d75d338b4711f8a33d293a2008f07a7125134020000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000007e16116661ca8d66c73612382833153911fa03b100000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x2c6ea72ac1e03dabfe09d4e18c44365a44c67ec7d5f018f59e72fbc665c4051c",
          "0xcc47e965cf3ef6f87e6966a407140c8a8187333769a62027a9c07daf8652eeb7",
          "0x0f829d23b9ee0d8bd5f436f02e72ace6fdc76d2bdb2ee214ca34609932bcffae",
          "0x3ad7a6de3ccd75b106f0e32cfc71a59815aa804517190f0a5c4410de645f7c8e",
          "0xb5865d8d613650df8f012689c3c0cd3cafa2ba3350af0f08fc8382e97e4a1c62",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "81457",
          "index": "1",
          "leafType": 1,
          "data": ""
        },
        "proof": [
          "0x097bf471691a2c3d0864711774e0cb1876e6673fd255ff9db46f3147c443e283",
          "0xc3db2da5902ad3c7ce5757c4187a8390251fe8c4ec091737e0e20c3871a3ab11",
          "0x213644e93fc6bef8c69c532e4ba9a33de174addf435c479ba5fe6a65d57bf8e6",
          "0x1b390562e17cf8685325cb38f9e5dd6b413f70278f1b48bfdbb61c311fd738b4",
          "0xb5865d8d613650df8f012689c3c0cd3cafa2ba3350af0f08fc8382e97e4a1c62",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "81457",
          "index": "2",
          "leafType": 1,
          "data": ""
        },
        "proof": [
          "0xcd508fe0b9d2f74b08334f4976279add55fcdba299b99dc4dc3592f048e3a490",
          "0xa61463bb26269882707d748482d4bf08657c1cb519ed5ba62a32acaf36e4f964",
          "0xab9eb2b92875acfb253bed134c8e3bc224600ff8fd2368e7dc21779da4a29421",
          "0xf73cb1f9802f0cd75a7c31b7e65defab4cd637b4d748e2ab28e0fd0ce631b17c",
          "0x9a3e24bcb0fe604251506f3b926d2def4e4793979f97dcba2e191cadb0231873",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "81457",
          "index": "3",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f0800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb680000000000000000000000000040f331774ed6bb161412b4cedb1358b382af3a5000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xd89403dae6a38feb5350aa1a5a301d409014314c39470685d1ac959815933add",
          "0xcd50d58d0fa29d1bb90e3b2bf8edf5c79ba031a7e22b868ef28c198fab7a9882",
          "0xee88c091cfc96835add7935bab2819edce2b4024763cf7e75f7131f1c50fe75e",
          "0x4750eac2340b313b30c9b5729f68eda9e5e282de30ea035432cbd6b44b792808",
          "0x9a3e24bcb0fe604251506f3b926d2def4e4793979f97dcba2e191cadb0231873",
          "0xb5e58aaf5d2506f74caf8446fba4822db25bb8e28b02071264a6e691a01c4cef"
        ]
      },
      {
        "leaf": {
          "chainId": "81457",
          "index": "4",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f0800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb6800000000000000000000000000f14341a7f464320319025540e8fe48ad0fe5aec000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xbccfef743eed9845e99570427938646a33cb8ebb88595502d71db14aeb12bdd9",
          "0x711e2117335b72ec5089ed759984e3954ff3cef0fddc3ea52039f2516e29274a",
          "0x14529e5533f2204184563af2844d10db0c8258fba2efd5d1c58d571683290648",
          "0xe2a0278dde338b599b05f575c93bd3982e454e5cbfb95f8996da764bef35aac2",
          "0x01d5b68aa35474bd31a16188189de8f2cd25a12dbc98472d9c8e480cf45e86b8",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "81457",
          "index": "5",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f0800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb680000000000000000000000000c1a3fee4132e9285f41f5389570fd9fbbcb10a1d000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x70271a42cc3237a4a2f4b8b05a9ec4ad9e3d6419505be32655ec773bc7dbc638",
          "0x3320ed209801e9567548edcf693597c997f6c33df1d5620973211c2d88ab4b2f",
          "0x0257a72ae4330aecbe4cda624a79251bb5c4552fb264bb8a8e89c1f60aef0f47",
          "0xcb8e1bb39f903eb5fe5cc81c62aff55d71533f6aa6394ba01f989589e3aafd87",
          "0x516ce6f48ff49814be03849c7c249aea4b37a5e228bc59a3a06efb7cc829b4ed",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "81457",
          "index": "6",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f15e00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000024a6f9dae1000000000000000000000000855275ac7ea4cc4f324915b2eb48839e447e04bd00000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x16ac929119593e270b631e76c3ecabf6ed6aba8c22de8261889a2552d5d1e6c5",
          "0xa52d6af643f0e11041b1dc3f4ba409ae8df6b421b06c55ffed93e2f1504b74a6",
          "0x919cf137a82992a13e7816e95f68931f91adc44a1bc3e8c7b1009d6efe2a94d3",
          "0x1b390562e17cf8685325cb38f9e5dd6b413f70278f1b48bfdbb61c311fd738b4",
          "0xb5865d8d613650df8f012689c3c0cd3cafa2ba3350af0f08fc8382e97e4a1c62",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "81457",
          "index": "7",
          "leafType": 1,
          "data": "0x000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020a8600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb680000000000000000000000000912d7601569cbc2df8a7f0aae50bfd18e8c64d05000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x30aa365bb41fb1e1d305c7d7cf4706114e3c80be6def1710ed23999057bd8c80",
          "0xe61de257e044bdb7cd9a00d20e6234fd360f79d70c9bebc91df9e31a8f0d1e56",
          "0x1d62343bffa293f817d145d3052ad717d6eeca3375255781bc7cf3a31bc25639",
          "0xd75c55c4276205475956dc1d3765c8ab5fb8f887a362eac56c3019b7e9261dcc",
          "0xa88f09f93862c32046d3da315d8acfec1dab373c56d8d1ceccda4da62154c92f",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "81457",
          "index": "8",
          "leafType": 1,
          "data": "0x000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024ef600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004484cfb68000000000000000000000000040c168503b9758540e18a79907f3fd8678c13f03000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0xae8b5ce50b1ab00e54642d13d11dfebe965b32e7fd6af05cd94cc8c40ae16876",
          "0x0349aabcbcf87a00ffb3e1d39d6a2b864be4a9573243e06009454748dc9c42b4",
          "0x6e0782c2ce5cbbf2693b53e9562ba324a42a6581b555f6bf5f59a7f393398255",
          "0xaa0ec7a734ed15d45a2eb9c46b603ba5d3772e4d17cd78db89b6308c94ca867e",
          "0x01d5b68aa35474bd31a16188189de8f2cd25a12dbc98472d9c8e480cf45e86b8",
          "0x6eeec9b45870f20cc5f5b2049e3c9ec8f877a82b01d0d54db1dff383e458e656",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "81457",
          "index": "9",
          "leafType": 1,
          "data": "0x00000000000000000000000013b2211a7ca45db2808f6db05557ce5347e3634e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020bc500000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000444ea59979000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e000000000000000000000000114890eb7386f94eae410186f20968bfaf66142a00000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x48f87bbe68a1e6e635320b589533e4d5a8bcc9c4fc5062e7f26ebcdd134abc91",
          "0xd10f264a7924f7828d4a496ddc7a938ba300a8e8331fada053bc9795947bea82",
          "0x269d66114a2d46f289ee7508b8cbd176862a4c24a85922b3318b4e80b33f25dd",
          "0x5f30486c17a475b5f0361633bc3f1bf14dcefe5e7b10606233cb2ec73b711261",
          "0xa88f09f93862c32046d3da315d8acfec1dab373c56d8d1ceccda4da62154c92f",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      },
      {
        "leaf": {
          "chainId": "81457",
          "index": "10",
          "leafType": 1,
          "data": "0x000000000000000000000000b49e82067a54b3e8c5d9db2f378fdb6892c04d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024eaa00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004452f7c988000000000000000000000000000000000000000000000000000000000000a4b10000000000000000000000000000000000000000000000000000246139ca800000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x071938d0e673ab2f8f5ca89ac08baeb0e01cd9e489cc852680cc35228a55034c",
          "0x01bd13e2c451703cd1274dba982cf0719e0ed346c0887095bae23753115a5a69",
          "0x213644e93fc6bef8c69c532e4ba9a33de174addf435c479ba5fe6a65d57bf8e6",
          "0x1b390562e17cf8685325cb38f9e5dd6b413f70278f1b48bfdbb61c311fd738b4",
          "0xb5865d8d613650df8f012689c3c0cd3cafa2ba3350af0f08fc8382e97e4a1c62",
          "0x97c8f194df0772163cd20d13d6f6d507744cca08fa824023d309f71b991a7103",
          "0x54772703f14f2827152320e4c183babbc9df6bea4e93bad591f2a8a45a7b60dd"
        ]
      }
    ]
  },
  "configArtifacts": {
    "lib/subapi/src/SubAPIMultiSig.sol:SubAPIMultiSig": {
      "artifact": {
        "abi": [
          {
            "type": "constructor",
            "inputs": [
              {
                "name": "signers",
                "type": "address[]",
                "internalType": "address[]"
              },
              {
                "name": "threshold",
                "type": "uint64",
                "internalType": "uint64"
              }
            ],
            "stateMutability": "nonpayable"
          },
          {
            "type": "receive",
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "addOwnerWithThreshold",
            "inputs": [
              {
                "name": "owner",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_threshold",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
          },
          {
            "type": "function",
            "name": "changeThreshold",
            "inputs": [
              {
                "name": "_threshold",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
          },
          {
            "type": "function",
            "name": "doneOf",
            "inputs": [
              {
                "name": "",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "internalType": "bool"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "exec",
            "inputs": [
              {
                "name": "to",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "value",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "expiration",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "data",
                "type": "bytes",
                "internalType": "bytes"
              },
              {
                "name": "signatures",
                "type": "bytes",
                "internalType": "bytes"
              }
            ],
            "outputs": [
              {
                "name": "success",
                "type": "bool",
                "internalType": "bool"
              }
            ],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "getOwners",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address[]",
                "internalType": "address[]"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "getThreshold",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "isOwner",
            "inputs": [
              {
                "name": "owner",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "internalType": "bool"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "removeOwner",
            "inputs": [
              {
                "name": "prevOwner",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "owner",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_threshold",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
          },
          {
            "type": "function",
            "name": "swapOwner",
            "inputs": [
              {
                "name": "prevOwner",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "oldOwner",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "newOwner",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
          },
          {
            "type": "function",
            "name": "verifySignatures",
            "inputs": [
              {
                "name": "hash",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "signatures",
                "type": "bytes",
                "internalType": "bytes"
              }
            ],
            "outputs": [],
            "stateMutability": "view"
          },
          {
            "type": "event",
            "name": "AddedOwner",
            "inputs": [
              {
                "name": "owner",
                "type": "address",
                "indexed": false,
                "internalType": "address"
              }
            ],
            "anonymous": false
          },
          {
            "type": "event",
            "name": "ChangedThreshold",
            "inputs": [
              {
                "name": "threshold",
                "type": "uint256",
                "indexed": false,
                "internalType": "uint256"
              }
            ],
            "anonymous": false
          },
          {
            "type": "event",
            "name": "ExecutionResult",
            "inputs": [
              {
                "name": "hash",
                "type": "bytes32",
                "indexed": true,
                "internalType": "bytes32"
              },
              {
                "name": "result",
                "type": "bool",
                "indexed": false,
                "internalType": "bool"
              }
            ],
            "anonymous": false
          },
          {
            "type": "event",
            "name": "RemovedOwner",
            "inputs": [
              {
                "name": "owner",
                "type": "address",
                "indexed": false,
                "internalType": "address"
              }
            ],
            "anonymous": false
          }
        ],
        "bytecode": "0x60806040523480156200001157600080fd5b5060405162001ec738038062001ec78339810160408190526200003491620002e5565b62000049826001600160401b03831662000051565b505062000409565b600254156200008f5760405162461bcd60e51b8152602060048201526005602482015264047533230360dc1b60448201526064015b60405180910390fd5b8151811115620000ca5760405162461bcd60e51b8152602060048201526005602482015264475332303160d81b604482015260640162000086565b6001811015620001055760405162461bcd60e51b815260206004820152600560248201526423a999181960d91b604482015260640162000086565b600160005b8351811015620002645760008482815181106200012b576200012b620003cb565b6020026020010151905060006001600160a01b0316816001600160a01b0316141580156200016357506001600160a01b038116600114155b80156200017957506001600160a01b0381163014155b8015620001985750806001600160a01b0316836001600160a01b031614155b620001ce5760405162461bcd60e51b8152602060048201526005602482015264475332303360d81b604482015260640162000086565b6001600160a01b038181166000908152602081905260409020541615620002205760405162461bcd60e51b815260206004820152600560248201526411d4cc8c0d60da1b604482015260640162000086565b6001600160a01b03928316600090815260208190526040902080546001600160a01b03191693821693909317909255806200025b81620003e1565b9150506200010a565b506001600160a01b0316600090815260208190526040902080546001600160a01b03191660019081179091559151909155600255565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002c857600080fd5b919050565b80516001600160401b0381168114620002c857600080fd5b60008060408385031215620002f957600080fd5b82516001600160401b03808211156200031157600080fd5b818501915085601f8301126200032657600080fd5b81516020828211156200033d576200033d6200029a565b8160051b604051601f19603f830116810181811086821117156200036557620003656200029a565b6040529283528183019350848101820192898411156200038457600080fd5b948201945b83861015620003ad576200039d86620002b0565b8552948201949382019362000389565b9650620003be9050878201620002cd565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200040257634e487b7160e01b600052601160045260246000fd5b5060010190565b611aae80620004196000396000f3fe6080604052600436106100b55760003560e01c8063a0e67e2b11610069578063e318b52b1161004e578063e318b52b146101bd578063e75235b8146101dd578063f8dc5dd9146101fb57600080fd5b8063a0e67e2b1461017b578063c7a823e01461019d57600080fd5b80632f54bf6e1161009a5780632f54bf6e1461010b578063694e80c31461012b578063935f9ade1461014b57600080fd5b80630589105b146100c15780630d582f13146100e957600080fd5b366100bc57005b600080fd5b6100d46100cf3660046115a1565b61021b565b60405190151581526020015b60405180910390f35b3480156100f557600080fd5b506101096101043660046116bf565b61036b565b005b34801561011757600080fd5b506100d46101263660046116e9565b6105c2565b34801561013757600080fd5b5061010961014636600461170b565b610617565b34801561015757600080fd5b506100d461016636600461170b565b60036020526000908152604090205460ff1681565b34801561018757600080fd5b50610190610731565b6040516100e09190611724565b3480156101a957600080fd5b506101096101b836600461177e565b610848565b3480156101c957600080fd5b506101096101d83660046117ca565b610a80565b3480156101e957600080fd5b506002546040519081526020016100e0565b34801561020757600080fd5b5061010961021636600461180d565b610e0a565b6000804630898989896040516020016102399695949392919061186d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602082012090915061027d8782878761109b565b8873ffffffffffffffffffffffffffffffffffffffff1688876040516102a391906118fb565b60006040518083038185875af1925050503d80600081146102e0576040519150601f19603f3d011682016040523d82523d6000602084013e6102e5565b606091505b50506000828152600360205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555190935081907f0457ea5bc67881c59a30a626040dbff6e109920907a75dc61f3465475530336e9061035790861515815260200190565b60405180910390a250509695505050505050565b61037361118e565b73ffffffffffffffffffffffffffffffffffffffff8216158015906103af575073ffffffffffffffffffffffffffffffffffffffff8216600114155b80156103d1575073ffffffffffffffffffffffffffffffffffffffff82163014155b61043c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f475332303300000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82811660009081526020819052604090205416156104cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610433565b600060208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d805473ffffffffffffffffffffffffffffffffffffffff858116808552604085208054929093167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556001808552835490911690911790915580549161055e83611946565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a180600254146105be576105be81610617565b5050565b600073ffffffffffffffffffffffffffffffffffffffff8216600114801590610611575073ffffffffffffffffffffffffffffffffffffffff8281166000908152602081905260409020541615155b92915050565b61061f61118e565b60015481111561068b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610433565b60018110156106f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230320000000000000000000000000000000000000000000000000000006044820152606401610433565b60028190556040518181527f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c939060200160405180910390a150565b6060600060015467ffffffffffffffff81111561075057610750611530565b604051908082528060200260200182016040528015610779578160200160208202803683370190505b506001600090815260208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d549192509073ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff811660011461084057808383815181106107f4576107f461197e565b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201810191909152918116600090815291829052604090912054168161083881611946565b9250506107c3565b509092915050565b6002546108569060416119ad565b81146108be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606401610433565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c849052603c812090805b600254811015610a7857366000868661090a8560416119ad565b906109168660016119c4565b6109219060416119ad565b9261092e939291906119d7565b9150915060006109748684848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111f992505050565b90508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161180156109d7575073ffffffffffffffffffffffffffffffffffffffff8181166000908152602081905260409020541615155b80156109fa575073ffffffffffffffffffffffffffffffffffffffff8116600114155b610a60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610433565b9350829150610a70905081611946565b9150506108f0565b505050505050565b610a8861118e565b73ffffffffffffffffffffffffffffffffffffffff811615801590610ac4575073ffffffffffffffffffffffffffffffffffffffff8116600114155b8015610ae6575073ffffffffffffffffffffffffffffffffffffffff81163014155b610b4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff8181166000908152602081905260409020541615610bdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff821615801590610c17575073ffffffffffffffffffffffffffffffffffffffff8216600114155b610c7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260208190526040902054811690831614610d10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208181526040808320805487871680865283862080549289167fffffffffffffffffffffffff0000000000000000000000000000000000000000938416179055968a1685528285208054821690971790965592849052825490941690915591519081527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf910160405180910390a160405173ffffffffffffffffffffffffffffffffffffffff821681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a1505050565b610e1261118e565b8060018054610e219190611a01565b1015610e89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff821615801590610ec5575073ffffffffffffffffffffffffffffffffffffffff8216600114155b610f2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260208190526040902054811690831614610fbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208190526040808220805488861684529183208054929095167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179094559181528254909116909155600180549161103683611a14565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf9060200160405180910390a180600254146110965761109681610617565b505050565b834210611104576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6f7065726174696f6e20657870697265640000000000000000000000000000006044820152606401610433565b60008381526003602052604090205460ff161561117d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6861736820616c726561647920757365640000000000000000000000000000006044820152606401610433565b611188838383610848565b50505050565b3330146111f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533033310000000000000000000000000000000000000000000000000000006044820152606401610433565b565b6000806000611208858561121d565b9150915061121581611262565b509392505050565b60008082516041036112535760208301516040840151606085015160001a61124787828585611418565b9450945050505061125b565b506000905060025b9250929050565b600081600481111561127657611276611a49565b0361127e5750565b600181600481111561129257611292611a49565b036112f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610433565b600281600481111561130d5761130d611a49565b03611374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610433565b600381600481111561138857611388611a49565b03611415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610433565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561144f57506000905060036114fe565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156114a3573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166114f7576000600192509250506114fe565b9150600090505b94509492505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461152b57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083601f84011261157157600080fd5b50813567ffffffffffffffff81111561158957600080fd5b60208301915083602082850101111561125b57600080fd5b60008060008060008060a087890312156115ba57600080fd5b6115c387611507565b95506020870135945060408701359350606087013567ffffffffffffffff808211156115ee57600080fd5b818901915089601f83011261160257600080fd5b81358181111561161457611614611530565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561165a5761165a611530565b816040528281528c602084870101111561167357600080fd5b8260208601602083013760006020848301015280975050505060808901359150808211156116a057600080fd5b506116ad89828a0161155f565b979a9699509497509295939492505050565b600080604083850312156116d257600080fd5b6116db83611507565b946020939093013593505050565b6000602082840312156116fb57600080fd5b61170482611507565b9392505050565b60006020828403121561171d57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561177257835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611740565b50909695505050505050565b60008060006040848603121561179357600080fd5b83359250602084013567ffffffffffffffff8111156117b157600080fd5b6117bd8682870161155f565b9497909650939450505050565b6000806000606084860312156117df57600080fd5b6117e884611507565b92506117f660208501611507565b915061180460408501611507565b90509250925092565b60008060006060848603121561182257600080fd5b61182b84611507565b925061183960208501611507565b9150604084013590509250925092565b60005b8381101561186457818101518382015260200161184c565b50506000910152565b868152600073ffffffffffffffffffffffffffffffffffffffff808816602084015280871660408401525084606083015283608083015260c060a083015282518060c08401526118c48160e0850160208701611849565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160e001979650505050505050565b6000825161190d818460208701611849565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361197757611977611917565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808202811582820484141761061157610611611917565b8082018082111561061157610611611917565b600080858511156119e757600080fd5b838611156119f457600080fd5b5050820193919092039150565b8181038181111561061157610611611917565b600081611a2357611a23611917565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220f324b0700dbbbeaf57c064d165aa16d47fc4f52aac1b0e1017b0f81c78d579af64736f6c63430008110033",
        "sourceName": "lib/subapi/src/SubAPIMultiSig.sol",
        "contractName": "SubAPIMultiSig",
        "deployedBytecode": "0x6080604052600436106100b55760003560e01c8063a0e67e2b11610069578063e318b52b1161004e578063e318b52b146101bd578063e75235b8146101dd578063f8dc5dd9146101fb57600080fd5b8063a0e67e2b1461017b578063c7a823e01461019d57600080fd5b80632f54bf6e1161009a5780632f54bf6e1461010b578063694e80c31461012b578063935f9ade1461014b57600080fd5b80630589105b146100c15780630d582f13146100e957600080fd5b366100bc57005b600080fd5b6100d46100cf3660046115a1565b61021b565b60405190151581526020015b60405180910390f35b3480156100f557600080fd5b506101096101043660046116bf565b61036b565b005b34801561011757600080fd5b506100d46101263660046116e9565b6105c2565b34801561013757600080fd5b5061010961014636600461170b565b610617565b34801561015757600080fd5b506100d461016636600461170b565b60036020526000908152604090205460ff1681565b34801561018757600080fd5b50610190610731565b6040516100e09190611724565b3480156101a957600080fd5b506101096101b836600461177e565b610848565b3480156101c957600080fd5b506101096101d83660046117ca565b610a80565b3480156101e957600080fd5b506002546040519081526020016100e0565b34801561020757600080fd5b5061010961021636600461180d565b610e0a565b6000804630898989896040516020016102399695949392919061186d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602082012090915061027d8782878761109b565b8873ffffffffffffffffffffffffffffffffffffffff1688876040516102a391906118fb565b60006040518083038185875af1925050503d80600081146102e0576040519150601f19603f3d011682016040523d82523d6000602084013e6102e5565b606091505b50506000828152600360205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555190935081907f0457ea5bc67881c59a30a626040dbff6e109920907a75dc61f3465475530336e9061035790861515815260200190565b60405180910390a250509695505050505050565b61037361118e565b73ffffffffffffffffffffffffffffffffffffffff8216158015906103af575073ffffffffffffffffffffffffffffffffffffffff8216600114155b80156103d1575073ffffffffffffffffffffffffffffffffffffffff82163014155b61043c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f475332303300000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82811660009081526020819052604090205416156104cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610433565b600060208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d805473ffffffffffffffffffffffffffffffffffffffff858116808552604085208054929093167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556001808552835490911690911790915580549161055e83611946565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a180600254146105be576105be81610617565b5050565b600073ffffffffffffffffffffffffffffffffffffffff8216600114801590610611575073ffffffffffffffffffffffffffffffffffffffff8281166000908152602081905260409020541615155b92915050565b61061f61118e565b60015481111561068b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610433565b60018110156106f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230320000000000000000000000000000000000000000000000000000006044820152606401610433565b60028190556040518181527f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c939060200160405180910390a150565b6060600060015467ffffffffffffffff81111561075057610750611530565b604051908082528060200260200182016040528015610779578160200160208202803683370190505b506001600090815260208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d549192509073ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff811660011461084057808383815181106107f4576107f461197e565b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201810191909152918116600090815291829052604090912054168161083881611946565b9250506107c3565b509092915050565b6002546108569060416119ad565b81146108be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606401610433565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c849052603c812090805b600254811015610a7857366000868661090a8560416119ad565b906109168660016119c4565b6109219060416119ad565b9261092e939291906119d7565b9150915060006109748684848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111f992505050565b90508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161180156109d7575073ffffffffffffffffffffffffffffffffffffffff8181166000908152602081905260409020541615155b80156109fa575073ffffffffffffffffffffffffffffffffffffffff8116600114155b610a60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610433565b9350829150610a70905081611946565b9150506108f0565b505050505050565b610a8861118e565b73ffffffffffffffffffffffffffffffffffffffff811615801590610ac4575073ffffffffffffffffffffffffffffffffffffffff8116600114155b8015610ae6575073ffffffffffffffffffffffffffffffffffffffff81163014155b610b4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff8181166000908152602081905260409020541615610bdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff821615801590610c17575073ffffffffffffffffffffffffffffffffffffffff8216600114155b610c7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260208190526040902054811690831614610d10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208181526040808320805487871680865283862080549289167fffffffffffffffffffffffff0000000000000000000000000000000000000000938416179055968a1685528285208054821690971790965592849052825490941690915591519081527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf910160405180910390a160405173ffffffffffffffffffffffffffffffffffffffff821681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a1505050565b610e1261118e565b8060018054610e219190611a01565b1015610e89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff821615801590610ec5575073ffffffffffffffffffffffffffffffffffffffff8216600114155b610f2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260208190526040902054811690831614610fbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152606401610433565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208190526040808220805488861684529183208054929095167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179094559181528254909116909155600180549161103683611a14565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf9060200160405180910390a180600254146110965761109681610617565b505050565b834210611104576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6f7065726174696f6e20657870697265640000000000000000000000000000006044820152606401610433565b60008381526003602052604090205460ff161561117d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6861736820616c726561647920757365640000000000000000000000000000006044820152606401610433565b611188838383610848565b50505050565b3330146111f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533033310000000000000000000000000000000000000000000000000000006044820152606401610433565b565b6000806000611208858561121d565b9150915061121581611262565b509392505050565b60008082516041036112535760208301516040840151606085015160001a61124787828585611418565b9450945050505061125b565b506000905060025b9250929050565b600081600481111561127657611276611a49565b0361127e5750565b600181600481111561129257611292611a49565b036112f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610433565b600281600481111561130d5761130d611a49565b03611374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610433565b600381600481111561138857611388611a49565b03611415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610433565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561144f57506000905060036114fe565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156114a3573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166114f7576000600192509250506114fe565b9150600090505b94509492505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461152b57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083601f84011261157157600080fd5b50813567ffffffffffffffff81111561158957600080fd5b60208301915083602082850101111561125b57600080fd5b60008060008060008060a087890312156115ba57600080fd5b6115c387611507565b95506020870135945060408701359350606087013567ffffffffffffffff808211156115ee57600080fd5b818901915089601f83011261160257600080fd5b81358181111561161457611614611530565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561165a5761165a611530565b816040528281528c602084870101111561167357600080fd5b8260208601602083013760006020848301015280975050505060808901359150808211156116a057600080fd5b506116ad89828a0161155f565b979a9699509497509295939492505050565b600080604083850312156116d257600080fd5b6116db83611507565b946020939093013593505050565b6000602082840312156116fb57600080fd5b61170482611507565b9392505050565b60006020828403121561171d57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561177257835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611740565b50909695505050505050565b60008060006040848603121561179357600080fd5b83359250602084013567ffffffffffffffff8111156117b157600080fd5b6117bd8682870161155f565b9497909650939450505050565b6000806000606084860312156117df57600080fd5b6117e884611507565b92506117f660208501611507565b915061180460408501611507565b90509250925092565b60008060006060848603121561182257600080fd5b61182b84611507565b925061183960208501611507565b9150604084013590509250925092565b60005b8381101561186457818101518382015260200161184c565b50506000910152565b868152600073ffffffffffffffffffffffffffffffffffffffff808816602084015280871660408401525084606083015283608083015260c060a083015282518060c08401526118c48160e0850160208701611849565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160e001979650505050505050565b6000825161190d818460208701611849565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361197757611977611917565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808202811582820484141761061157610611611917565b8082018082111561061157610611611917565b600080858511156119e757600080fd5b838611156119f457600080fd5b5050820193919092039150565b8181038181111561061157610611611917565b600081611a2357611a23611917565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220f324b0700dbbbeaf57c064d165aa16d47fc4f52aac1b0e1017b0f81c78d579af64736f6c63430008110033",
        "metadata": {
          "compiler": {
            "version": "0.8.17+commit.8df45f5f"
          },
          "language": "Solidity",
          "output": {
            "abi": [
              {
                "inputs": [
                  {
                    "internalType": "address[]",
                    "name": "signers",
                    "type": "address[]"
                  },
                  {
                    "internalType": "uint64",
                    "name": "threshold",
                    "type": "uint64"
                  }
                ],
                "stateMutability": "nonpayable",
                "type": "constructor"
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address",
                    "indexed": false
                  }
                ],
                "type": "event",
                "name": "AddedOwner",
                "anonymous": false
              },
              {
                "inputs": [
                  {
                    "internalType": "uint256",
                    "name": "threshold",
                    "type": "uint256",
                    "indexed": false
                  }
                ],
                "type": "event",
                "name": "ChangedThreshold",
                "anonymous": false
              },
              {
                "inputs": [
                  {
                    "internalType": "bytes32",
                    "name": "hash",
                    "type": "bytes32",
                    "indexed": true
                  },
                  {
                    "internalType": "bool",
                    "name": "result",
                    "type": "bool",
                    "indexed": false
                  }
                ],
                "type": "event",
                "name": "ExecutionResult",
                "anonymous": false
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address",
                    "indexed": false
                  }
                ],
                "type": "event",
                "name": "RemovedOwner",
                "anonymous": false
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_threshold",
                    "type": "uint256"
                  }
                ],
                "stateMutability": "nonpayable",
                "type": "function",
                "name": "addOwnerWithThreshold"
              },
              {
                "inputs": [
                  {
                    "internalType": "uint256",
                    "name": "_threshold",
                    "type": "uint256"
                  }
                ],
                "stateMutability": "nonpayable",
                "type": "function",
                "name": "changeThreshold"
              },
              {
                "inputs": [
                  {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "doneOf",
                "outputs": [
                  {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "expiration",
                    "type": "uint256"
                  },
                  {
                    "internalType": "bytes",
                    "name": "data",
                    "type": "bytes"
                  },
                  {
                    "internalType": "bytes",
                    "name": "signatures",
                    "type": "bytes"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "exec",
                "outputs": [
                  {
                    "internalType": "bool",
                    "name": "success",
                    "type": "bool"
                  }
                ]
              },
              {
                "inputs": [],
                "stateMutability": "view",
                "type": "function",
                "name": "getOwners",
                "outputs": [
                  {
                    "internalType": "address[]",
                    "name": "",
                    "type": "address[]"
                  }
                ]
              },
              {
                "inputs": [],
                "stateMutability": "view",
                "type": "function",
                "name": "getThreshold",
                "outputs": [
                  {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "isOwner",
                "outputs": [
                  {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "prevOwner",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_threshold",
                    "type": "uint256"
                  }
                ],
                "stateMutability": "nonpayable",
                "type": "function",
                "name": "removeOwner"
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "prevOwner",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "oldOwner",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                  }
                ],
                "stateMutability": "nonpayable",
                "type": "function",
                "name": "swapOwner"
              },
              {
                "inputs": [
                  {
                    "internalType": "bytes32",
                    "name": "hash",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "bytes",
                    "name": "signatures",
                    "type": "bytes"
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "verifySignatures"
              },
              {
                "inputs": [],
                "stateMutability": "payable",
                "type": "receive"
              }
            ],
            "devdoc": {
              "kind": "dev",
              "methods": {
                "addOwnerWithThreshold(address,uint256)": {
                  "details": "Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.",
                  "params": {
                    "_threshold": "New threshold.",
                    "owner": "New owner address."
                  }
                },
                "changeThreshold(uint256)": {
                  "details": "Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.",
                  "params": {
                    "_threshold": "New threshold."
                  }
                },
                "getOwners()": {
                  "details": "Returns array of owners.",
                  "returns": {
                    "_0": "Array of Safe owners."
                  }
                },
                "removeOwner(address,address,uint256)": {
                  "details": "Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.",
                  "params": {
                    "_threshold": "New threshold.",
                    "owner": "Owner address to be removed.",
                    "prevOwner": "Owner that pointed to the owner to be removed in the linked list"
                  }
                },
                "swapOwner(address,address,address)": {
                  "details": "Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.",
                  "params": {
                    "newOwner": "New owner address.",
                    "oldOwner": "Owner address to be replaced.",
                    "prevOwner": "Owner that pointed to the owner to be replaced in the linked list"
                  }
                }
              },
              "version": 1
            },
            "userdoc": {
              "kind": "user",
              "methods": {
                "addOwnerWithThreshold(address,uint256)": {
                  "notice": "Adds the owner `owner` to the Safe and updates the threshold to `_threshold`."
                },
                "changeThreshold(uint256)": {
                  "notice": "Changes the threshold of the Safe to `_threshold`."
                },
                "removeOwner(address,address,uint256)": {
                  "notice": "Removes the owner `owner` from the Safe and updates the threshold to `_threshold`."
                },
                "swapOwner(address,address,address)": {
                  "notice": "Replaces the owner `oldOwner` in the Safe with `newOwner`."
                }
              },
              "version": 1
            }
          },
          "settings": {
            "remappings": [
              "@darwinia-msgport/=lib/darwinia-msgport/",
              "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
              "@openzeppelin/contracts@4.9.2/=lib/openzeppelin-contracts/contracts/",
              "@safe-smart-account/=lib/subapi/lib/safe-smart-account/contracts/",
              "@sphinx-labs/contracts/=lib/sphinx/packages/contracts/contracts/foundry/",
              "ORMP/=lib/ORMP/",
              "create3-deploy/=lib/create3-deploy/",
              "forge-std/=lib/forge-std/src/",
              "solmate/=lib/darwinia-msgport/lib/solmate/src/",
              "subapi/=lib/subapi/"
            ],
            "optimizer": {
              "enabled": true,
              "runs": 999999
            },
            "metadata": {
              "bytecodeHash": "ipfs"
            },
            "compilationTarget": {
              "lib/subapi/src/SubAPIMultiSig.sol": "SubAPIMultiSig"
            },
            "evmVersion": "london",
            "libraries": {}
          },
          "sources": {
            "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
              "keccak256": "0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0",
              "urls": [
                "bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f",
                "dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n"
              ],
              "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
              "keccak256": "0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58",
              "urls": [
                "bzz-raw://8b93a1e39a4a19eba1600b92c96f435442db88cac91e315c8291547a2a7bcfe2",
                "dweb:/ipfs/QmTm34KVe6uZBZwq8dZDNWwPcm24qBJdxqL3rPxBJ4LrMv"
              ],
              "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
              "keccak256": "0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3",
              "urls": [
                "bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c",
                "dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS"
              ],
              "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
              "keccak256": "0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc",
              "urls": [
                "bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7",
                "dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6"
              ],
              "license": "MIT"
            },
            "lib/subapi/lib/safe-smart-account/contracts/base/OwnerManager.sol": {
              "keccak256": "0x01a3d64cc0967f42ae63802409f5404d18352516ea2a6335005003d919ffcf12",
              "urls": [
                "bzz-raw://91824103f2966612103705d6493290e193b0c0ca2bbe7141965184435dbb999b",
                "dweb:/ipfs/Qmd7u917v4DnD4hvQGAGbchVJ8A7pm1UCzCv7sAzQnRoi4"
              ],
              "license": "LGPL-3.0-only"
            },
            "lib/subapi/lib/safe-smart-account/contracts/common/SelfAuthorized.sol": {
              "keccak256": "0x59d36efca578b75541a776f62a0d0ef03712fc27b6647c3915c14b572106d7bc",
              "urls": [
                "bzz-raw://8530c6e0392415d42486847cd4368d30f6cac42051596330692a571fcdbb9e29",
                "dweb:/ipfs/QmWw51Pshw5t2sMKANzxtfNdBSQUyQQpfTr3Mi7oNJGk7U"
              ],
              "license": "LGPL-3.0-only"
            },
            "lib/subapi/src/SubAPIMultiSig.sol": {
              "keccak256": "0xe2ee0e54123b3fb0f601bc89a9c6914b8ff7c1c453ce3f05a6a61a0025abcc1c",
              "urls": [
                "bzz-raw://a36c7858ef358742d85e8e5af2ad8691524f447814b926b5a2bd949758f27d06",
                "dweb:/ipfs/QmeT282v5wfxinfcAvDvDE4kvHJ2EdHBhthjMsSeUghFSV"
              ],
              "license": "MIT"
            }
          },
          "version": 1
        },
        "methodIdentifiers": {
          "addOwnerWithThreshold(address,uint256)": "0d582f13",
          "changeThreshold(uint256)": "694e80c3",
          "doneOf(bytes32)": "935f9ade",
          "exec(address,uint256,uint256,bytes,bytes)": "0589105b",
          "getOwners()": "a0e67e2b",
          "getThreshold()": "e75235b8",
          "isOwner(address)": "2f54bf6e",
          "removeOwner(address,address,uint256)": "f8dc5dd9",
          "swapOwner(address,address,address)": "e318b52b",
          "verifySignatures(bytes32,bytes)": "c7a823e0"
        },
        "storageLayout": {
          "storage": [
            {
              "astId": 65195,
              "contract": "lib/subapi/src/SubAPIMultiSig.sol:SubAPIMultiSig",
              "label": "owners",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_address)"
            },
            {
              "astId": 65197,
              "contract": "lib/subapi/src/SubAPIMultiSig.sol:SubAPIMultiSig",
              "label": "ownerCount",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256"
            },
            {
              "astId": 65199,
              "contract": "lib/subapi/src/SubAPIMultiSig.sol:SubAPIMultiSig",
              "label": "threshold",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256"
            },
            {
              "astId": 65722,
              "contract": "lib/subapi/src/SubAPIMultiSig.sol:SubAPIMultiSig",
              "label": "doneOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_bool)"
            }
          ],
          "types": {
            "t_address": {
              "encoding": "inplace",
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "encoding": "inplace",
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "encoding": "inplace",
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "encoding": "mapping",
              "key": "t_address",
              "label": "mapping(address => address)",
              "numberOfBytes": "32",
              "value": "t_address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "encoding": "mapping",
              "key": "t_bytes32",
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32",
              "value": "t_bool"
            },
            "t_uint256": {
              "encoding": "inplace",
              "label": "uint256",
              "numberOfBytes": "32"
            }
          }
        },
        "linkReferences": {},
        "deployedLinkReferences": {}
      },
      "buildInfoId": "b17fe8726b32698f99fd0b9f2554d6c2"
    },
    "lib/ORMP/src/eco/Oracle.sol:Oracle": {
      "artifact": {
        "abi": [
          {
            "type": "constructor",
            "inputs": [
              {
                "name": "dao",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "ormp",
                "type": "address",
                "internalType": "address"
              }
            ],
            "stateMutability": "nonpayable"
          },
          {
            "type": "receive",
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "PROTOCOL",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "internalType": "address"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "approvedOf",
            "inputs": [
              {
                "name": "",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "internalType": "bool"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "changeOwner",
            "inputs": [
              {
                "name": "newOwner",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
          },
          {
            "type": "function",
            "name": "fee",
            "inputs": [
              {
                "name": "toChainId",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "feeOf",
            "inputs": [
              {
                "name": "",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "hashOf",
            "inputs": [
              {
                "name": "chainId",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "channel",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "msgIndex",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "importMessageHash",
            "inputs": [
              {
                "name": "chainId",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "channel",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "msgIndex",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "msgHash",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
          },
          {
            "type": "function",
            "name": "isApproved",
            "inputs": [
              {
                "name": "operator",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "internalType": "bool"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "owner",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "internalType": "address"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "setApproved",
            "inputs": [
              {
                "name": "operator",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "approve",
                "type": "bool",
                "internalType": "bool"
              }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
          },
          {
            "type": "function",
            "name": "setFee",
            "inputs": [
              {
                "name": "chainId",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "fee_",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
          },
          {
            "type": "function",
            "name": "verifyMessageProof",
            "inputs": [
              {
                "name": "message",
                "type": "tuple",
                "internalType": "struct Message",
                "components": [
                  {
                    "name": "channel",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "index",
                    "type": "uint256",
                    "internalType": "uint256"
                  },
                  {
                    "name": "fromChainId",
                    "type": "uint256",
                    "internalType": "uint256"
                  },
                  {
                    "name": "from",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "toChainId",
                    "type": "uint256",
                    "internalType": "uint256"
                  },
                  {
                    "name": "to",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "gasLimit",
                    "type": "uint256",
                    "internalType": "uint256"
                  },
                  {
                    "name": "encoded",
                    "type": "bytes",
                    "internalType": "bytes"
                  }
                ]
              },
              {
                "name": "",
                "type": "bytes",
                "internalType": "bytes"
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "internalType": "bool"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "version",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "string",
                "internalType": "string"
              }
            ],
            "stateMutability": "pure"
          },
          {
            "type": "function",
            "name": "withdraw",
            "inputs": [
              {
                "name": "to",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "amount",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
          },
          {
            "type": "event",
            "name": "OwnershipTransferred",
            "inputs": [
              {
                "name": "previousOwner",
                "type": "address",
                "indexed": true,
                "internalType": "address"
              },
              {
                "name": "newOwner",
                "type": "address",
                "indexed": true,
                "internalType": "address"
              }
            ],
            "anonymous": false
          },
          {
            "type": "event",
            "name": "SetApproved",
            "inputs": [
              {
                "name": "operator",
                "type": "address",
                "indexed": false,
                "internalType": "address"
              },
              {
                "name": "approve",
                "type": "bool",
                "indexed": false,
                "internalType": "bool"
              }
            ],
            "anonymous": false
          },
          {
            "type": "event",
            "name": "SetFee",
            "inputs": [
              {
                "name": "chainId",
                "type": "uint256",
                "indexed": true,
                "internalType": "uint256"
              },
              {
                "name": "fee",
                "type": "uint256",
                "indexed": false,
                "internalType": "uint256"
              }
            ],
            "anonymous": false
          },
          {
            "type": "event",
            "name": "Withdrawal",
            "inputs": [
              {
                "name": "to",
                "type": "address",
                "indexed": true,
                "internalType": "address"
              },
              {
                "name": "amt",
                "type": "uint256",
                "indexed": false,
                "internalType": "uint256"
              }
            ],
            "anonymous": false
          }
        ],
        "bytecode": "",
        "sourceName": "lib/ORMP/src/eco/Oracle.sol",
        "contractName": "Oracle",
        "deployedBytecode": "0x6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063a6f9dae111610059578063a6f9dae1146102ea578063af9e3a361461030a578063b6333d1614610337578063f3fef3a31461036757600080fd5b80638da5cb5b1461024457806391b9b82714610296578063a1dbf432146102ca57600080fd5b806354fd4d50116100bb57806354fd4d5014610162578063651b04a7146101ae578063673448dd146101de57806384cfb6801461022457600080fd5b80630a863e6c146100ed578063506146951461010f57806352f7c9881461014257600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004610b5d565b610387565b005b34801561011b57600080fd5b5061012f61012a366004610b98565b6104c9565b6040519081526020015b60405180910390f35b34801561014e57600080fd5b5061010d61015d366004610bcd565b6105e1565b34801561016e57600080fd5b50604080518082018252600581527f322e312e30000000000000000000000000000000000000000000000000000000602082015290516101399190610c53565b3480156101ba57600080fd5b506101ce6101c9366004610c66565b6106ab565b6040519015158152602001610139565b3480156101ea57600080fd5b506101ce6101f9366004610d06565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b34801561023057600080fd5b5061010d61023f366004610d21565b6106e6565b34801561025057600080fd5b506000546102719073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610139565b3480156102a257600080fd5b506102717f000000000000000000000000000000000000000000000000000000000000000081565b3480156102d657600080fd5b5061012f6102e5366004610d5d565b6107f5565b3480156102f657600080fd5b5061010d610305366004610d06565b610876565b34801561031657600080fd5b5061012f610325366004610d89565b60016020526000908152604090205481565b34801561034357600080fd5b506101ce610352366004610d06565b60026020526000908152604090205460ff1681565b34801561037357600080fd5b5061010d610382366004610da2565b61096c565b60005473ffffffffffffffffffffffffffffffffffffffff16331461040d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e6572000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6040517f5f3abe960000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f00000000000000000000000000000000000000000000000000000000000000001690635f3abe9690608401600060405180830381600087803b1580156104ab57600080fd5b505af11580156104bf573d6000803e3d6000fd5b5050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663559e7230308686866040516020016105449392919092835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b604051602081830303815290604052805190602001206040518363ffffffff1660e01b815260040161059892919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b602060405180830381865afa1580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d99190610dcc565b949350505050565b3360009081526002602052604090205460ff1661065a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21617070726f76650000000000000000000000000000000000000000000000006044820152606401610404565b600082815260016020526040908190208290555182907f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b59061069f9084815260200190565b60405180910390a25050565b60006106be6106b985610ee9565b610b04565b6106dd60408601356106d36020880188610d06565b87602001356104c9565b14949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e657200000000000000000000000000000000000000000000000000006044820152606401610404565b73ffffffffffffffffffffffffffffffffffffffff821660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168515159081179091558251938452908301527fd984ea421ae5d2a473199f85e03998a04a12f54d6f1fa183a955b3df1c0c546d910160405180910390a15050565b60008281526001602052604081205480820361086f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104049060208082526004908201527f2166656500000000000000000000000000000000000000000000000000000000604082015260600190565b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f216f776e657200000000000000000000000000000000000000000000000000006044820152606401610404565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3360009081526002602052604090205460ff166109e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21617070726f76650000000000000000000000000000000000000000000000006044820152606401610404565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610a3f576040519150601f19603f3d011682016040523d82523d6000602084013e610a44565b606091505b5050905080610aaf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f21776974686472617700000000000000000000000000000000000000000000006044820152606401610404565b8273ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6583604051610af791815260200190565b60405180910390a2505050565b600081604051602001610b179190610f8b565b604051602081830303815290604052805190602001209050919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b5857600080fd5b919050565b60008060008060808587031215610b7357600080fd5b84359350610b8360208601610b34565b93969395505050506040820135916060013590565b600080600060608486031215610bad57600080fd5b83359250610bbd60208501610b34565b9150604084013590509250925092565b60008060408385031215610be057600080fd5b50508035926020909101359150565b6000815180845260005b81811015610c1557602081850181015186830182015201610bf9565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600061086f6020830184610bef565b600080600060408486031215610c7b57600080fd5b833567ffffffffffffffff80821115610c9357600080fd5b908501906101008288031215610ca857600080fd5b90935060208501359080821115610cbe57600080fd5b818601915086601f830112610cd257600080fd5b813581811115610ce157600080fd5b876020828501011115610cf357600080fd5b6020830194508093505050509250925092565b600060208284031215610d1857600080fd5b61086f82610b34565b60008060408385031215610d3457600080fd5b610d3d83610b34565b915060208301358015158114610d5257600080fd5b809150509250929050565b60008060408385031215610d7057600080fd5b82359150610d8060208401610b34565b90509250929050565b600060208284031215610d9b57600080fd5b5035919050565b60008060408385031215610db557600080fd5b610dbe83610b34565b946020939093013593505050565b600060208284031215610dde57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715610e3857610e38610de5565b60405290565b600082601f830112610e4f57600080fd5b813567ffffffffffffffff80821115610e6a57610e6a610de5565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610eb057610eb0610de5565b81604052838152866020858801011115610ec957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006101008236031215610efc57600080fd5b610f04610e14565b610f0d83610b34565b81526020830135602082015260408301356040820152610f2f60608401610b34565b606082015260808301356080820152610f4a60a08401610b34565b60a082015260c083013560c082015260e083013567ffffffffffffffff811115610f7357600080fd5b610f7f36828601610e3e565b60e08301525092915050565b60208152600073ffffffffffffffffffffffffffffffffffffffff808451166020840152602084015160408401526040840151606084015280606085015116608084015250608083015160a083015260a083015161100160c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015160e083015260e08301516101008081850152506105d9610120840182610bef56fea26469706673582212204e15bd44f524a009ddb10dfab169b887e49170106f13f83c120155f154c3b9bc64736f6c63430008110033",
        "metadata": {
          "compiler": {
            "version": "0.8.17+commit.8df45f5f"
          },
          "language": "Solidity",
          "output": {
            "abi": [
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "dao",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "ormp",
                    "type": "address"
                  }
                ],
                "stateMutability": "nonpayable",
                "type": "constructor"
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "previousOwner",
                    "type": "address",
                    "indexed": true
                  },
                  {
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address",
                    "indexed": true
                  }
                ],
                "type": "event",
                "name": "OwnershipTransferred",
                "anonymous": false
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "operator",
                    "type": "address",
                    "indexed": false
                  },
                  {
                    "internalType": "bool",
                    "name": "approve",
                    "type": "bool",
                    "indexed": false
                  }
                ],
                "type": "event",
                "name": "SetApproved",
                "anonymous": false
              },
              {
                "inputs": [
                  {
                    "internalType": "uint256",
                    "name": "chainId",
                    "type": "uint256",
                    "indexed": true
                  },
                  {
                    "internalType": "uint256",
                    "name": "fee",
                    "type": "uint256",
                    "indexed": false
                  }
                ],
                "type": "event",
                "name": "SetFee",
                "anonymous": false
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "to",
                    "type": "address",
                    "indexed": true
                  },
                  {
                    "internalType": "uint256",
                    "name": "amt",
                    "type": "uint256",
                    "indexed": false
                  }
                ],
                "type": "event",
                "name": "Withdrawal",
                "anonymous": false
              },
              {
                "inputs": [],
                "stateMutability": "view",
                "type": "function",
                "name": "PROTOCOL",
                "outputs": [
                  {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "approvedOf",
                "outputs": [
                  {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                  }
                ],
                "stateMutability": "nonpayable",
                "type": "function",
                "name": "changeOwner"
              },
              {
                "inputs": [
                  {
                    "internalType": "uint256",
                    "name": "toChainId",
                    "type": "uint256"
                  },
                  {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "fee",
                "outputs": [
                  {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "feeOf",
                "outputs": [
                  {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "uint256",
                    "name": "chainId",
                    "type": "uint256"
                  },
                  {
                    "internalType": "address",
                    "name": "channel",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "msgIndex",
                    "type": "uint256"
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "hashOf",
                "outputs": [
                  {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "uint256",
                    "name": "chainId",
                    "type": "uint256"
                  },
                  {
                    "internalType": "address",
                    "name": "channel",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "msgIndex",
                    "type": "uint256"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "msgHash",
                    "type": "bytes32"
                  }
                ],
                "stateMutability": "nonpayable",
                "type": "function",
                "name": "importMessageHash"
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "operator",
                    "type": "address"
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "isApproved",
                "outputs": [
                  {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                  }
                ]
              },
              {
                "inputs": [],
                "stateMutability": "view",
                "type": "function",
                "name": "owner",
                "outputs": [
                  {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "operator",
                    "type": "address"
                  },
                  {
                    "internalType": "bool",
                    "name": "approve",
                    "type": "bool"
                  }
                ],
                "stateMutability": "nonpayable",
                "type": "function",
                "name": "setApproved"
              },
              {
                "inputs": [
                  {
                    "internalType": "uint256",
                    "name": "chainId",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "fee_",
                    "type": "uint256"
                  }
                ],
                "stateMutability": "nonpayable",
                "type": "function",
                "name": "setFee"
              },
              {
                "inputs": [
                  {
                    "internalType": "struct Message",
                    "name": "message",
                    "type": "tuple",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "channel",
                        "type": "address"
                      },
                      {
                        "internalType": "uint256",
                        "name": "index",
                        "type": "uint256"
                      },
                      {
                        "internalType": "uint256",
                        "name": "fromChainId",
                        "type": "uint256"
                      },
                      {
                        "internalType": "address",
                        "name": "from",
                        "type": "address"
                      },
                      {
                        "internalType": "uint256",
                        "name": "toChainId",
                        "type": "uint256"
                      },
                      {
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                      },
                      {
                        "internalType": "uint256",
                        "name": "gasLimit",
                        "type": "uint256"
                      },
                      {
                        "internalType": "bytes",
                        "name": "encoded",
                        "type": "bytes"
                      }
                    ]
                  },
                  {
                    "internalType": "bytes",
                    "name": "",
                    "type": "bytes"
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "verifyMessageProof",
                "outputs": [
                  {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                  }
                ]
              },
              {
                "inputs": [],
                "stateMutability": "pure",
                "type": "function",
                "name": "version",
                "outputs": [
                  {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                  }
                ],
                "stateMutability": "nonpayable",
                "type": "function",
                "name": "withdraw"
              },
              {
                "inputs": [],
                "stateMutability": "payable",
                "type": "receive"
              }
            ],
            "devdoc": {
              "kind": "dev",
              "methods": {
                "hashOf(uint256,address,uint256)": {
                  "params": {
                    "chainId": "The source chain id.",
                    "channel": "The message channel.",
                    "msgIndex": "The Message index."
                  },
                  "returns": {
                    "_0": "Message hash in source chain."
                  }
                },
                "importMessageHash(uint256,address,uint256,bytes32)": {
                  "details": "Only could be called by owner.",
                  "params": {
                    "chainId": "The source chain id.",
                    "channel": "The message channel.",
                    "msgHash": "The source chain message hash corresponding to the channel.",
                    "msgIndex": "The source chain message index."
                  }
                },
                "verifyMessageProof((address,uint256,uint256,address,uint256,address,uint256,bytes),bytes)": {
                  "details": "Message proof provided by relayer. Oracle should provide message root of      source chain, and verify the merkle proof of the message hash.",
                  "params": {
                    "message": "The message info.",
                    "proof": "Proof of the message"
                  },
                  "returns": {
                    "_0": "Result of the message verify."
                  }
                }
              },
              "version": 1
            },
            "userdoc": {
              "kind": "user",
              "methods": {
                "hashOf(uint256,address,uint256)": {
                  "notice": "Fetch message hash."
                },
                "verifyMessageProof((address,uint256,uint256,address,uint256,address,uint256,bytes),bytes)": {
                  "notice": "Verify message proof"
                }
              },
              "version": 1
            }
          },
          "settings": {
            "remappings": [
              "@darwinia-msgport/=lib/darwinia-msgport/",
              "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
              "@openzeppelin/contracts@4.9.2/=lib/openzeppelin-contracts/contracts/",
              "@safe-smart-account/=lib/subapi/lib/safe-smart-account/contracts/",
              "@sphinx-labs/contracts/=lib/sphinx/packages/contracts/contracts/foundry/",
              "ORMP/=lib/ORMP/",
              "create3-deploy/=lib/create3-deploy/",
              "forge-std/=lib/forge-std/src/",
              "solmate/=lib/darwinia-msgport/lib/solmate/src/",
              "subapi/=lib/subapi/"
            ],
            "optimizer": {
              "enabled": true,
              "runs": 999999
            },
            "metadata": {
              "bytecodeHash": "ipfs"
            },
            "compilationTarget": {
              "lib/ORMP/src/eco/Oracle.sol": "Oracle"
            },
            "evmVersion": "london",
            "libraries": {}
          },
          "sources": {
            "lib/ORMP/src/Common.sol": {
              "keccak256": "0x9ac4f4aaea488dcf254d006b290d5e76ca27ddc3d8f8542c916e4f6f713f108b",
              "urls": [
                "bzz-raw://e752ee67412386fc6527e4bce526093797b932bbadab4520130e803a68806d3e",
                "dweb:/ipfs/QmbLNLEAm7MSveSUcRhyuS9LnSSj1CQtn9tmatE1YsLySX"
              ],
              "license": "MIT"
            },
            "lib/ORMP/src/Verifier.sol": {
              "keccak256": "0xcbb09be9bd0f62cfaf9c07c46c446c79886118f0870bb1b7967f99470e72920e",
              "urls": [
                "bzz-raw://82b79598f8bc4a31a246e7251e62dbe9d94e56fff387c1de8314540cee931be1",
                "dweb:/ipfs/QmXEEmKkL5oj8XxqTTj6cHBYPPw55gUasM9JCGULhW8Cye"
              ],
              "license": "MIT"
            },
            "lib/ORMP/src/eco/Oracle.sol": {
              "keccak256": "0x1a62832fa2a023eedd67502f0eee29f3df5726c3fb3de5587e3fedd95e9042b6",
              "urls": [
                "bzz-raw://8f9d0594eb3e68eba1c4e6812e23b7db9e1418339d89cc24eb31ed05e6e69c80",
                "dweb:/ipfs/QmYwfLBhy8pCGk5bkm12t7tZ9dT32djiqiTKsPGCaVRJPN"
              ],
              "license": "MIT"
            },
            "lib/ORMP/src/interfaces/IORMP.sol": {
              "keccak256": "0x687f39c965fd8cdc30047820c0f491d926ae3e9cea4d82dbf832b0646d0ed268",
              "urls": [
                "bzz-raw://8a22e640c9c1a4b24833607a840be9bf779f500e38d84f18b35efe9fb5e53c7a",
                "dweb:/ipfs/QmV17CvqrG7dkNVS1rLJpxzUPK2KFcVkXNjvx9rNwUdUGh"
              ],
              "license": "MIT"
            },
            "lib/ORMP/src/interfaces/IVerifier.sol": {
              "keccak256": "0xfa53949a8465c32a0f4dda1c588654643c25cdc242820723db09bfdf39e6c298",
              "urls": [
                "bzz-raw://d88d918b8224292c06a9b120b241e99a3ca87e012b3e01280d77c1dd3e521484",
                "dweb:/ipfs/QmRFMyRg92ssguC3xUGVEdF24VfGnttUpv5vAAnJdwaDKT"
              ],
              "license": "MIT"
            }
          },
          "version": 1
        },
        "methodIdentifiers": {
          "PROTOCOL()": "91b9b827",
          "approvedOf(address)": "b6333d16",
          "changeOwner(address)": "a6f9dae1",
          "fee(uint256,address)": "a1dbf432",
          "feeOf(uint256)": "af9e3a36",
          "hashOf(uint256,address,uint256)": "50614695",
          "importMessageHash(uint256,address,uint256,bytes32)": "0a863e6c",
          "isApproved(address)": "673448dd",
          "owner()": "8da5cb5b",
          "setApproved(address,bool)": "84cfb680",
          "setFee(uint256,uint256)": "52f7c988",
          "verifyMessageProof((address,uint256,uint256,address,uint256,address,uint256,bytes),bytes)": "651b04a7",
          "version()": "54fd4d50",
          "withdraw(address,uint256)": "f3fef3a3"
        },
        "storageLayout": {
          "storage": [
            {
              "astId": 966,
              "contract": "lib/ORMP/src/eco/Oracle.sol:Oracle",
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address"
            },
            {
              "astId": 970,
              "contract": "lib/ORMP/src/eco/Oracle.sol:Oracle",
              "label": "feeOf",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_uint256)"
            },
            {
              "astId": 974,
              "contract": "lib/ORMP/src/eco/Oracle.sol:Oracle",
              "label": "approvedOf",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)"
            }
          ],
          "types": {
            "t_address": {
              "encoding": "inplace",
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "encoding": "inplace",
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "encoding": "mapping",
              "key": "t_address",
              "label": "mapping(address => bool)",
              "numberOfBytes": "32",
              "value": "t_bool"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "encoding": "mapping",
              "key": "t_uint256",
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32",
              "value": "t_uint256"
            },
            "t_uint256": {
              "encoding": "inplace",
              "label": "uint256",
              "numberOfBytes": "32"
            }
          }
        },
        "linkReferences": {},
        "deployedLinkReferences": {}
      },
      "buildInfoId": "b17fe8726b32698f99fd0b9f2554d6c2"
    }
  }
}
